*.btn"< Back"=< 戻る
*.btn"Cancel"=キャンセル
*.btn"Close"=閉じる
*.btn"Finish"=完了
*.btn"Next >"=次へ >
*.btn"OK"=OK
*.hnt"Filter"=フィルタ
dlgDgAbout.edt"Build Date"=ビルド日
dlgDgAbout.edt"Email"=電子メール
dlgDgAbout.edt"Java Version"=Java バージョン
dlgDgAbout.edt"Name"=名前
dlgDgAbout.edt"Settings Path"=設定ファイルパス
dlgDgAbout.edt"Version"=バージョン
dlgDgAbout.tab"Credits"=クレジット
dlgDgAbout.tab"Information"=情報
dlgDgAbout.tab"Licensee"=ライセンス
dlgDgAbout.tle=DeepGitについて
dlgDgSetEncoding.edt"Text File Encoding"=テキストファイルのエンコーディング
dlgDgSetEncoding.hdl=エンコーディング設定
dlgDgSetEncoding.inf=ファイルの処理と表示に使用するエンコーディングを指定します。なお、UTF-8のエンコーディングは、ここでの設定にかかわらず、自動検出されます。
dlgDgSetEncoding.tle=エンコーディングを設定する
dlgInfo.tle=破棄
dlgProgress.btn"Stop"=停止
dlgProgress.tle"Checking connectivity"=接続を確認中
dlgProgress.tle"Checking push conditions"=プッシュ条件の確認
dlgProgress.tle"JIRA"=JIRA
dlgProgress.tle"Jump To"=Jump To
dlgProgress.tle"Layouting Graph"=Layouting Graph
dlgProgress.tle"Refresh"=更新
dlgProgress.tle"Reveal Commit"=コミットを表示する
dlgProgress.tle"SmartGit Installation Update"=SmartGit インストールの更新
dlgProgress.tle"Upgrade"=アップグレード
dlgQBugFileSendingFailed.fur%1=プロキシの設定が必要なのか、サーバーが一時的にダウンしているのかもしれません。'$1'
dlgQBugFileSendingFailed.hdl%1=クラッシュ・ログを$1に送信できませんでした。
dlgQBugFileSendingFailed.tle=ネイティブクラッシュログ
dlgQBugReportSend.btn"Force Exit"=強制終了
dlgQBugReportSend.btn"Ignore \(Dangerous\)"=無視する\(危険\)
dlgQBugReportSend.btn"Just Exit"=終了のみ
dlgQBugReportSend.btn"Report && Exit"=報告して終了
dlgQBugReportSend.btn"Report Bug"=バグを報告
dlgQBugReportSend.edt"Comments or Steps to Reproduce"=コメントまたは再現のための手順\(英語で記述してください\)
dlgQBugReportSend.edt"Email"=電子メール
dlgQBugReportSend.edt"Reply To"=返信先
dlgQBugReportSend.tle=内部エラー
dlgQDockManagerClosedView.chk=次回から表示しない
dlgQDockManagerClosedView.fur=再び開くには、「ウィンドウ」メニューから対応するメニューを使用します。
dlgQDockManagerClosedView.hdl%1=ビュー'$1'を閉じました。
dlgQDockManagerClosedView.tle=閉じられたビュー
dlgQFileSaveAcceptFilterOverwrite.btn"Overwrite"=上書き
dlgQFileSaveAcceptFilterOverwrite.fur=別のファイルに保存する場合は、「キャンセル」をクリックします。
dlgQFileSaveAcceptFilterOverwrite.hdl%1=$1 は既に存在します。上書きしますか？
dlgQFileSaveAcceptFilterOverwrite.tle=ファイルの上書き
dlgQFrameManagerExit.btn"Discard Changes && Exit"=変更を破棄して終了
dlgQFrameManagerExit.fur=今すぐ終了すると、保存されていない変更が失われます。
dlgQFrameManagerExit.hdl=本当にSmartGitを終了しますか?
dlgQFrameManagerExit.tle=終了
dlgQIntegerInputProviderInvalidValue.fur%2=Portは'$1'から'$2'の範囲でなければなりません。
dlgQIntegerInputProviderInvalidValue.hdl%1=フィールド '$1' のテキストは有効ではありません。
dlgQIntegerInputProviderInvalidValue.tle=入力の検証
dlgQProxyConfigure.chk"Proxy requires authentication"=プロキシに認証が必要
dlgQProxyConfigure.edt"Host"=ホスト
dlgQProxyConfigure.edt"Password"=パスワード
dlgQProxyConfigure.edt"Port"=ポート
dlgQProxyConfigure.edt"Username"=ユーザ名
dlgQProxyConfigure.lbl"Note: The password will be stored in plain text in SmartGit's configuration area!"=\
 注：パスワードは、SmartGitの設定領域にプレーンテキストで保存されます。
dlgQProxyConfigure.rbt"Auto-detect the system proxy"=システムプロキシを自動検出
dlgQProxyConfigure.rbt"Don't use a proxy"=プロキシを使わない
dlgQProxyConfigure.rbt"Use following proxy"=以下のプロキシを使用
dlgQProxyConfigure.tle=プロキシ設定
dlgQProxyConnectionFailed.btn"Configure Proxy"=プロキシ設定
dlgQProxyConnectionFailed.btn"Retry"=再試行
dlgQProxyConnectionFailed.fur=詳細: syntevo.com
dlgQProxyConnectionFailed.hdl%1=$1 に接続できませんでした。
dlgQProxyConnectionFailed.tle=接続に失敗しました。
dlgQUpdateCheckForNewVersion.btn"Configure Proxy"=プロキシ設定
dlgQUpdateCheckForNewVersion.btn"Exit"=終了
dlgQUpdateCheckForNewVersion.btn"Retry"=再試行
dlgQUpdateCheckForNewVersion.btn"Skip"=スキップ
dlgQUpdateCheckForNewVersion.hdl=SmartGit は更新を確認する必要があります
dlgQUpdateCheckForNewVersion.inf=必要であれば、プロキシの設定を行い、再試行してください。
dlgQUpdateCheckForNewVersion.tle=新しいバージョンの確認
dlgQUpdateCheckForNewVersionFailed.fur%1=詳細: '$1'への接続に失敗しました。
dlgQUpdateCheckForNewVersionFailed.hdl=新しいバージョンのチェックに失敗しました。
dlgQUpdateCheckForNewVersionFailed.tle=新しいバージョンの確認
dlgQUpdateCheckLatestBuild.btn"Get Latest Build"=最新のビルドを入手する
dlgQUpdateCheckLatestBuild.fur=サポートチームから要請があった場合のみ、最新のビルドを使用してください。
dlgQUpdateCheckLatestBuild.hdl=最新のビルドをダウンロードしますか？
dlgQUpdateCheckLatestBuild.tle=最新ビルドの確認
dlgQUpdateCheckLatestBuildFetchFailed.fur%1=詳細: $1
dlgQUpdateCheckLatestBuildFetchFailed.hdl=アップグレードの初期化に失敗しました。
dlgQUpdateCheckLatestBuildFetchFailed.tle=最新ビルドの確認
dlgQUpdateCheckNewVersion.btn"Download"=ダウンロード
dlgQUpdateCheckNewVersion.fur=新しいバージョンにアップデートすることをお勧めします。
dlgQUpdateCheckNewVersion.hdl=SmartGitの新しいバージョンが利用可能です。
dlgQUpdateCheckNewVersion.tle=新しいバージョンの確認
dlgQUpdateCheckNoNewerLatestBuild.fur=すでに最新のビルドを使用しています。
dlgQUpdateCheckNoNewerLatestBuild.hdl=新しいビルドは見つかりませんでした。
dlgQUpdateCheckNoNewerLatestBuild.tle=最新ビルドの確認
dlgQUpdateCheckNowNewerVersion.fur=すでに最新のバージョンを使用しています。
dlgQUpdateCheckNowNewerVersion.hdl=新しいバージョンは見つかりませんでした。
dlgQUpdateCheckNowNewerVersion.tle=新しいバージョンの確認
dlgScAboutUpdateInstallation.btn"Upgrade Installation"=アップグレードのインストール
dlgScAboutUpdateInstallation.fur=これには少し時間がかかり、SmartGitを再起動する必要があります。
dlgScAboutUpdateInstallation.hdl%1=インストールディレクトリをバージョン$1にアップグレードしますか？
dlgScAboutUpdateInstallation.tle=アップグレードのインストール
dlgScApplicationStarterRestart.btn"Exit"=終了
dlgScApplicationStarterRestart.btn"Remind Later"=後で通知
dlgScApplicationStarterRestart.btn"Restart"=再起動
dlgScApplicationStarterRestart.fur=ダウンロードしたプログラムの更新が適用されます。
dlgScApplicationStarterRestart.hdl=SmartGitは再起動が必要です。
dlgScApplicationStarterRestart.tle=再起動
dlgScConflictSolverAdd.hdl=コンフリクトソルバーの追加
dlgScConflictSolverAdd.tle=追加
dlgScConflictSolverEdit.hdl=コンフリクトソルバーの編集
dlgScConflictSolverEdit.tle=編集
dlgScConflictSolverUnresolvedConflicts.chk=次回から警告しない
dlgScConflictSolverUnresolvedConflicts.fur=すべての競合が解決されたわけではありません。
dlgScConflictSolverUnresolvedConflicts.hdl=Conflict Solverを終了しますか？
dlgScConflictSolverUnresolvedConflicts.tle=未解決の競合
dlgScConflictSolver(Add|Edit).edt"Arguments"=引数
dlgScConflictSolver(Add|Edit).edt"Command"=コマンド
dlgScConflictSolver(Add|Edit).edt"File Pattern"=ファイルパターン
dlgScConflictSolver(Add|Edit).inf=ファイルパターン\(例: \*.txt\)を定義し、このパターンに一致するファイルの競合を解決するために使用するマージツールを選択します。
dlgScConflictSolver(Add|Edit).lbl"Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html"=\
 有効なワイルドカードは下記のとおりです。複数のパターンはコンマで区切ります。\r例：*.txt,*.html \r ? (任意の1文字) \r * (任意の数の任意の文字)
dlgScConflictSolver(Add|Edit).rbt"Built-in Conflict Solver"=内蔵のコンフリクトソルバー
dlgScConflictSolver(Add|Edit).rbt"External Conflict Solver"=外部コンフリクトソルバー
dlgScCustomizeAccelerators.btn"Assign"=割り当て
dlgScCustomizeAccelerators.btn"Clear"=クリア
dlgScCustomizeAccelerators.btn"Reset"=リセット
dlgScCustomizeAccelerators.col"Accelerator"=Accelerator
dlgScCustomizeAccelerators.col"Default"=デフォルト
dlgScCustomizeAccelerators.col"Menu Item"=メニュー項目
dlgScCustomizeAccelerators.edt"Accelerator"=Accelerator
dlgScCustomizeAccelerators.hdl=Customize Accelerators
dlgScCustomizeAccelerators.inf=Double click on the menu item for which the accelerator should be changed, then press the accelerator keys and click the Assign button.
dlgScCustomizeAccelerators.tle=カスタマイズ
dlgScCustomizeToolBar.btn"Add"=追加
dlgScCustomizeToolBar.btn"Remove"=除去
dlgScCustomizeToolBar.btn"Reset to Default"=初期設定に戻す
dlgScCustomizeToolBar.chk"Show text below icon"=アイコンの下にテキストを表示する
dlgScCustomizeToolBar.col"Available"=利用可能
dlgScCustomizeToolBar.col"Selected"=選択された項目
dlgScCustomizeToolBar.tle=ツールバーの設定
dlgScDevOpsCredentials.btn"Login"=ログイン
dlgScDevOpsCredentials.chk"Store password"=パスワードの保存
dlgScDevOpsCredentials.edt"Password"=パスワード
dlgScDevOpsCredentials.edt"User Name"=ユーザ名
dlgScDevOpsCredentials.hdl%1='$1' にログイン
dlgScDevOpsCredentials.inf=JIRAに認証するためのユーザー名とパスワードを入力します。
dlgScDevOpsCredentials.tle=JIRAにログインする
dlgScDevOpsCredentials.wrn"HTTP response code $1"=HTTP応答コード $1
dlgScDevOpsSslClientCertificate.btn"Login"=ログイン
dlgScDevOpsSslClientCertificate.chk"Store passphrase"=パスフレーズを保存する
dlgScDevOpsSslClientCertificate.edt"Certificate"=証明書
dlgScDevOpsSslClientCertificate.edt"Passphrase"=パスフレーズ
dlgScDevOpsSslClientCertificate.hdl%1=$1 用クライアント証明書を選択する
dlgScDevOpsSslClientCertificate.inf=JIRAに認証するためのクライアント証明書ファイルを選択します。
dlgScDevOpsSslClientCertificate.tle=JIRAクライアント証明書
dlgScDevOpsSslClientCertificate.wrn"$1"=$1
dlgScDevOpsSslFingerprintNew.btn"Accept"=Accept
dlgScDevOpsSslFingerprintNew.btn"Reject"=Reject
dlgScDevOpsSslFingerprintNew.edt"MD5 fingerprint"=MD5 フィンガープリント
dlgScDevOpsSslFingerprintNew.edt"SHA fingerprint"=SHA フィンガープリント
dlgScDevOpsSslFingerprintNew.edt"Server"=サーバ
dlgScDevOpsSslFingerprintNew.lbl"Is the following server fingerprint correct?"=\
 以下のサーバのフィンガープリントは正しいですか？
dlgScDevOpsSslFingerprintNew.lbl"When in doubt, contact your server administrator."=\
 不明な点がある場合は、サーバー管理者に問い合わせてください。
dlgScDevOpsSslFingerprintNew.tle=SSL認証
dlgScDialogAssertionHandler.btn"Send Logs"=ログの送信
dlgScDialogAssertionHandler.edt"Email"=電子メール
dlgScDialogAssertionHandler.edt"Optional comments or steps to reproduce \(in case you still recall\)"=\
 オプションのコメントまたは再現手順\(まだ覚えている場合のみ\)
dlgScDialogAssertionHandler.tle=ネイティブクラッシュログ
dlgScDialogAssertionHandlerLinkageError.btn"Copy"=コピー
dlgScDialogAssertionHandlerLinkageError.btn"Force Exit"=強制終了
dlgScDialogAssertionHandlerLinkageError.lbl"SmartGit has detected inconsistencies within its installation files \(JAR files\), what has most likely been caused by a faulty installation.\n\nPlease uninstall SmartGit completely, make sure there are no more installation files left \(especially JAR files\), then reinstall.\n\nIf the problem persists, send following log file as an attachment to smartgit@syntevo.com."=\
 SmartGit のインストール ファイル (JAR ファイル) に不整合があることが判明しました。\n\nSmartGit を完全にアンインストールし、インストール ファイル (特に JAR ファイル) が残っていないことを確認してから、再インストールしてください。\n\n問題が解決しない場合は、次のログ ファイルを smartgit@syntevo.com に添付して送信してください。
dlgScDialogAssertionHandlerLinkageError.tle=内部エラー
dlgScFileComparatorAdd.hdl=外部Diffツールの追加
dlgScFileComparatorAdd.mni"Base Encoding"=ベースエンコーディング
dlgScFileComparatorAdd.mni"Base File"=ベースファイル
dlgScFileComparatorAdd.mni"Base Title"=ベースタイトル
dlgScFileComparatorAdd.tle=追加
dlgScFileComparatorEdit.hdl=外部Diffツールの編集
dlgScFileComparatorEdit.mni"Base Encoding"=ベースエンコーディング
dlgScFileComparatorEdit.mni"Base File"=ベースファイル
dlgScFileComparatorEdit.mni"Base Title"=ベースタイトル
dlgScFileComparatorEdit.tle=編集
dlgScFileComparator(Add|Edit).edt"Arguments"=引数
dlgScFileComparator(Add|Edit).edt"Command"=コマンド
dlgScFileComparator(Add|Edit).edt"File Pattern"=ファイルパターン
dlgScFileComparator(Add|Edit).inf=ファイルパターン（例：*.png）を定義し、ファイルパターンに一致するファイルを比較するために使用する比較コマンドを選択します。
dlgScFileComparator(Add|Edit).lbl"Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html"=\
 有効なワイルドカードは下記のとおりです。複数のパターンはコンマで区切ります。\r例：*.txt,*.html \r ? (任意の1文字) \r * (任意の数の任意の文字)
dlgScFileComparator(Add|Edit).mni"File"=ファイル
dlgScFileComparator(Add|Edit).mni"Left Encoding"=左のエンコーディング
dlgScFileComparator(Add|Edit).mni"Left File"=左のファイル
dlgScFileComparator(Add|Edit).mni"Left Local File"=左のローカルファイル
dlgScFileComparator(Add|Edit).mni"Left Title"=左のタイトル
dlgScFileComparator(Add|Edit).mni"Right Encoding"=右のエンコーディング
dlgScFileComparator(Add|Edit).mni"Right File"=右のファイル
dlgScFileComparator(Add|Edit).mni"Right Local File"=右のローカルファイル
dlgScFileComparator(Add|Edit).mni"Right Title"=右のタイトル
dlgScFileComparator(Add|Edit).rbt"Built-in file compare"=内蔵の比較ツール
dlgScFileComparator(Add|Edit).rbt"External diff tool:"=外部Diffツール:
dlgScFileComparator(Add|Edit).rbt"External viewer \(invoked for both compared files\):"=\
 外部ビューア\(比較対象ファイルの両方に対して呼び出されます。\)
dlgScFileCompareFileChanged.btn"Discard"=破棄
dlgScFileCompareFileChanged.btn"Save"=保存
dlgScFileCompareFileChanged.fur=保存しない場合、変更内容が失われます。
dlgScFileCompareFileChanged.hdl=変更内容を保存しますか？
dlgScFileCompareFileChanged.tle=ファイルが変更されています
dlgScFilePatternsEdit.edt"File Pattern"=ファイルパターン
dlgScFilePatternsEdit.hdl%1=言語: $1
dlgScFilePatternsEdit.inf=ファイルパターンは、ファイル言語を決定するために使用され、シンタックスカラーリングに使用されます。
dlgScFilePatternsEdit.lbl"Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html"=\
 有効なワイルドカードは下記のとおりです。複数のパターンはコンマで区切ります。\r例：*.txt,*.html \r ? (任意の1文字) \r * (任意の数の任意の文字)
dlgScFilePatternsEdit.tle=ファイルパターン
dlgScFindAction.edt"Action name"=アクション名
dlgScFindAction.tle=コマンドを検索
dlgScJiraCommitMessageSelect.btn"Refresh"=更新
dlgScJiraCommitMessageSelect.btn"Reset to default"=デフォルトにリセット
dlgScJiraCommitMessageSelect.btn"Select"=選択
dlgScJiraCommitMessageSelect.chk"Query Configuration"=クエリーの構成
dlgScJiraCommitMessageSelect.col"Fix Version"=Fix Version
dlgScJiraCommitMessageSelect.col"Key"=キー
dlgScJiraCommitMessageSelect.col"Status"=ステータス
dlgScJiraCommitMessageSelect.col"Summary"=概要
dlgScJiraCommitMessageSelect.hdl=コミットメッセージをJIRAの課題から選択する
dlgScJiraCommitMessageSelect.inf=選択された課題の概要がコミットメッセージとして使用されます。
dlgScJiraCommitMessageSelect.lbl"Enter the JQL-Queries which will be loaded in the specified order: every query on a new line, \$\{projects\} will be substituted by the JIRA project key\(s\) which is derived or explicitly specified in your .gitbugtraq file.\n\nYou can compose a JQL query directly in JIRA, using Issues\|Search and go to Advanced view there."=\
 Enter the JQL-Queries which will be loaded in the specified order: every query on a new line, \$\{projects\} will be substituted by the JIRA project key\(s\) which is derived or explicitly specified in your .gitbugtraq file.\n\nYou can compose a JQL query directly in JIRA, using Issues\|Search and go to Advanced view there.
dlgScJiraCommitMessageSelect.lbl"Load All Issues"=すべての課題を読み込む
dlgScJiraCommitMessageSelect.lbl"Query Configuration"=クエリーの構成
dlgScJiraCommitMessageSelect.tle=課題の選択
dlgScJiraResolveIssue.btn"Don't Resolve"=解決しない
dlgScJiraResolveIssue.btn"Ignore"=無視
dlgScJiraResolveIssue.btn"Resolve Issue"=課題を解決
dlgScJiraResolveIssue.btn"Resolve"=解決
dlgScJiraResolveIssue.edt"Resolution"=Resolution
dlgScJiraResolveIssue.edt"Summary"=概要
dlgScJiraResolveIssue.hdl%1=課題 $1 を解決
dlgScJiraResolveIssue.inf=この問題を解決するかどうか、どのバージョンで解決済みとしてマークするかを選択します。
dlgScJiraResolveIssue.tle=JIRAの課題を解決する
dlgScMasterPasswordChange.edt"Current Master Password"=現在のマスターパスワード
dlgScMasterPasswordChange.edt"New Master Password"=新しいマスターパスワード
dlgScMasterPasswordChange.edt"Retype New Master Password"=新しいマスターパスワードの再入力
dlgScMasterPasswordChange.hdl=マスターパスワードの変更・再設定
dlgScMasterPasswordChange.inf=マスターパスワードを変更する場合は、現在のパスワードを入力してください。マスターパスワードを使用しない場合は、新しいパスワードを空白にします。
dlgScMasterPasswordChange.lbl"When setting a new master password, all stored passwords and passphrases will be lost and need to be re-entered when required!"=\
 新しいマスターパスワードを設定すると、保存されているすべてのパスワードとパスフレーズが失われ、必要に応じて再入力する必要があります。
dlgScMasterPasswordChange.rbt"Change master password"=マスターパスワードの変更
dlgScMasterPasswordChange.rbt"Set new master password"=新しいマスターパスワードの設定
dlgScMasterPasswordChange.tle=マスターパスワードの変更
dlgScMasterPasswordCreate.edt"Master Password"=マスターパスワード
dlgScMasterPasswordCreate.edt"Retype Again"=もう一度入力
dlgScMasterPasswordCreate.hdl=暗号化されたパスワードストアのマスターパスワードを設定する
dlgScMasterPasswordCreate.inf=マスターパスワードは、サーバーとの認証に使用されるパスワードやパスフレーズを保護するために使用されます。
dlgScMasterPasswordCreate.lbl"Not using a master password makes your passwords and passphrases readable for everyone who has access to the password file located at $1. Use this option only if you are sure that this file is safe."=\
 マスターパスワードを使用しないと、$1にあるパスワードファイルにアクセスできるすべての人が、パスワードやパスフレーズを読むことができます。
dlgScMasterPasswordCreate.lbl"This master password is case-sensitive and should contain lowercase and uppercase characters, digits and other characters. Longer passwords are in general more secure than shorter ones."=\
 このマスターパスワードは、大文字と小文字を区別し、小文字、大文字、数字、その他の文字を含む必要があります。一般的に、長いパスワードは短いパスワードよりも安全です。
dlgScMasterPasswordCreate.rbt"Don't use a master password"=マスターパスワードを使用しない
dlgScMasterPasswordCreate.rbt"Use the following master password"=以下のマスターパスワードを使用します。
dlgScMasterPasswordCreate.tle=マスターパスワード
dlgScMasterPasswordEnter.edt"Master Password"=マスターパスワード
dlgScMasterPasswordEnter.hdl=マスターパスワードの入力
dlgScMasterPasswordEnter.inf=保存されたパスワードまたはパスフレーズがパスワードストアから要求されました。
dlgScMasterPasswordEnter.tle=パスワード
dlgScPasswordMasterChangeSuccessfulChange.fur=忘れないようにしてください。忘れた場合、保存したパスワードにアクセスできなくなります。
dlgScPasswordMasterChangeSuccessfulChange.hdl=マスターパスワードが変更されました。
dlgScPasswordMasterChangeSuccessfulChange.tle=マスターパスワードを変更
dlgScPropertiesReset.btn"Reset"=リセット
dlgScPropertiesReset.fur=新しい値は、SmartGitを再起動すると有効になります。
dlgScPropertiesReset.hdl%1=$1 システムのプロパティをデフォルトにリセットしますか？
dlgScPropertiesReset.tle=プロパティのリセット
dlgScPropertyEdit.edt"Value"=値
dlgScPropertyEdit.hdl=ローレベルのプロパティ値を編集する
dlgScPropertyEdit.inf%1=プロパティ '$1' の値を設定します。
dlgScPropertyEdit.rbt"false"=false
dlgScPropertyEdit.rbt"true"=true
dlgScPropertyEdit.tle=プロパティの編集
dlgScRegisterFormLicenseConfirmDetails.edt"Add-on"=アドオン
dlgScRegisterFormLicenseConfirmDetails.edt"Address"=アドレス
dlgScRegisterFormLicenseConfirmDetails.edt"Email"=電子メール
dlgScRegisterFormLicenseConfirmDetails.edt"Free Updates Until"=無料アップデート期間
dlgScRegisterFormLicenseConfirmDetails.edt"Name"=名前
dlgScRegisterFormLicenseConfirmDetails.edt"Support Until"=サポート期限
dlgScRegisterFormLicenseConfirmDetails.edt"User Count"=ユーザ数
dlgScRegisterFormLicenseConfirmDetails.tle=SmartGit ライセンス
dlgScRegisterFreeUpdatesExpiredLicense.btn"Purchase Update"=アップデートを購入
dlgScRegisterFreeUpdatesExpiredLicense.fur=古いバージョンのSmartGitを使用することもできますし、アップデートライセンスを購入することもできます。
dlgScRegisterFreeUpdatesExpiredLicense.hdl=本ライセンスの無償アップデート期間は、このバージョンには適用されません。
dlgScRegisterFreeUpdatesExpiredLicense.tle=SmartGit ライセンス
dlgScRegisterRequestRejected.fur=ライセンスサーバーが要求を拒否しました。電子メールで受け取った最新のライセンスファイルを手動で登録するか、後ほどもう一度お試しください。
dlgScRegisterRequestRejected.hdl=ライセンスファイルの更新に失敗しました。
dlgScRegisterRequestRejected.tle=SmartGit ライセンス
dlgScSetupLicense.btn"Configure Proxy"=プロキシ設定
dlgScSetupLicense.btn"Purchase Update"=アップデートを購入
dlgScSetupLicense.btn"Register"=登録
dlgScSetupLicense.edt"License File"=ライセンスファイル
dlgScSetupLicense.hdl=ライセンスファイルを登録
dlgScSetupLicense.inf=購入後にメールで送られてきたSmartGitのライセンスファイルを指定してください。
dlgScSetupLicense.tle=SmartGit ライセンス
dlgScSpellCheckDictionaryAdd.hdl=スペルチェッカー辞書の追加
dlgScSpellCheckDictionaryAdd.tle=追加
dlgScSpellCheckDictionaryEdit.hdl=スペルチェッカー辞書の編集
dlgScSpellCheckDictionaryEdit.tle=編集
dlgScSpellCheckDictionary(Add|Edit).edt"Dictionary File"=辞書ファイル
dlgScSpellCheckDictionary(Add|Edit).edt"Name"=名前
dlgScSpellCheckDictionary(Add|Edit).inf=使用するMySpell辞書ファイルを指定します（例：Mozilla FirefoxまたはThunderbirdの「辞書」ディレクトリにある*.dic）\r名前は、異なる辞書を切り替える際に使用されます。
dlgScSslFingerprint.btn"Accept"=Accept
dlgScSslFingerprint.btn"Reject"=Reject
dlgScSslFingerprint.edt"SHA fingerprint"=SHA フィンガープリント
dlgScSslFingerprint.edt"Server"=サーバ
dlgScSslFingerprint.lbl"The server fingerprint has changed! Is the change correct?"=\
 サーバーのフィンガープリントが変更されました!この変更は正しいですか？
dlgScSslFingerprint.lbl"This might indicate a security problem! When in doubt, contact your server administrator."=\
 これは、セキュリティ上の問題を示している可能性があります。疑わしい場合は、サーバー管理者に連絡してください。
dlgScSslFingerprint.tle=サーバーのフィンガープリント
dlgScTextFinderFindFromStart.btn"Find from Beginning"=初めから探す
dlgScTextFinderFindFromStart.fur=ドキュメントの最後まで見つかりませんでした。
dlgScTextFinderFindFromStart.hdl=ドキュメントの先頭から続けますか？
dlgScTextFinderFindFromStart.tle=テキストの検索
dlgScTextFinderNothingFound.hdl=No \(more\) occurrences have been found.
dlgScTextFinderNothingFound.tle=テキストの検索
dlgScTextMultiComponentGoToLine.edt"Line Number"=行番号
dlgScTextMultiComponentGoToLine.tle=指定の行へ移動
dlgScTextMultiComponentSyntaxHighlightingSelection.tle=シンタックスハイライトの選択
dlgScTextReplace.btn"< Find"=< 検索
dlgScTextReplace.btn"Find >"=検索 >
dlgScTextReplace.btn"Replace All"=全て置換
dlgScTextReplace.btn"Replace"=置換
dlgScTextReplace.chk"Case-sensitive"=大文字小文字を区別する
dlgScTextReplace.chk"Regular Expression search"=正規表現検索
dlgScTextReplace.chk"Replace With:"=置換文字列:
dlgScTextReplace.edt"Text to Find"=検索文字列
dlgScTextReplace.tle=検索と置換
dlgScTextSettings.chk"Coalesce nearby change blocks"=近くの変更ブロックを結合する
dlgScTextSettings.chk"Split leading/trailing added or removed lines into separate blocks"=\
 Split leading/trailing added or removed lines into separate blocks
dlgScTextSettings.chk"Trim equal start/end of Inner-Line changes"=\
 Trim equal start/end of Inner-Line changes
dlgScTextSettings.edt"Inner-Line Comparison"=行内比較
dlgScTextSettings.edt"Show Whitespaces"=空白文字を表示
dlgScTextSettings.edt"Tab Size"=タブサイズ(スペース文字数)
dlgScTextSettings.rbt"All"=全て
dlgScTextSettings.rbt"Alphanumeric words"=英数字の単語
dlgScTextSettings.rbt"C identifiers"=C 識別子
dlgScTextSettings.rbt"Character-based"=文字ベース
dlgScTextSettings.rbt"Java identifiers"=Java 識別子
dlgScTextSettings.rbt"None"=なし
dlgScTextSettings.rbt"Off"=Off
dlgScTextSettings.rbt"Trailing and changed"=Trailing and changed
dlgScTextSettings.tab"Compare"=比較
dlgScTextSettings.tab"General"=一般
dlgScTextSettings.tle=設定
dlgScUpdateInstallationUpgrade.btn"Upgrade Now"=今すぐアップグレード
dlgScUpdateInstallationUpgrade.fur%1=The new version $1 has been downloaded which needs to be installed.
dlgScUpdateInstallationUpgrade.hdl=今すぐSmartGitをアップグレードしますか？
dlgScUpdateInstallationUpgrade.tle=SmartGitのアップグレード
dlgSelectDiff.col"Command"=コマンド
dlgSelectDiff.hdl=Select the diff tool
dlgSelectDiff.inf=Select which matching diff tool should be used.
dlgSelectDiff.tle=ファイルの比較
dlgSgAbortBisectingConfirm.btn"Abort Bisect"=Abort Bisect
dlgSgAbortBisectingConfirm.fur=Your working tree is in 'bisecting' state. You may abort it to get out of this state.\n\nAborting will checkout the branch or commit before starting bisect.
dlgSgAbortBisectingConfirm.hdl=作業ツリーをリセットしますか？
dlgSgAbortBisectingConfirm.tle=中断
dlgSgAbortCherryPickingConfirm.btn"Abort Cherry-Pick"=Abort Cherry-Pick
dlgSgAbortCherryPickingConfirm.fur=Your working tree is in 'cherry-picking' state. You may abort it to get out of this state and freshly start over with the cherry-picking afterwards.\n\nAborting will clean any local modification \(by invoking 'git reset --hard'\)!
dlgSgAbortCherryPickingConfirm.hdl=作業ツリーをリセットしますか？
dlgSgAbortCherryPickingConfirm.tle=中断
dlgSgAbortMergingConfirm.btn"Abort Merge"=マージを中断
dlgSgAbortMergingConfirm.fur=Your working tree is in 'merging' state. You may abort it to get out of this state and freshly start over with the merge afterwards.\n\nAborting will try to reconstruct the pre-merge state \(by invoking 'git merge --abort'\)!
dlgSgAbortMergingConfirm.hdl=現在のマージを中止しますか？
dlgSgAbortMergingConfirm.tle=破棄
dlgSgAbortRebasingConfirm.btn"Abort Rebase"=リベースを中断
dlgSgAbortRebasingConfirm.fur=Your working tree is in 'rebasing' state. You may abort rebasing; if you just want to skip the current patch, use Branch \| Rebase \| Rebase HEAD To instead.\n\nAborting will clean any local modification \(by invoking 'git reset --hard'\)!
dlgSgAbortRebasingConfirm.hdl=リベースを中止しますか？
dlgSgAbortRebasingConfirm.tle=破棄
dlgSgAbortRevertingConfirm.btn"Abort Revert"=リバートを中断
dlgSgAbortRevertingConfirm.fur=Your working tree is in 'reverting' state. You may abort it to get out of this state and freshly start over with the revert afterwards.\n\nAborting will clean any local modification \(by invoking 'git reset --hard'\)!
dlgSgAbortRevertingConfirm.hdl=作業ツリーをリセットしますか？
dlgSgAbortRevertingConfirm.tle=破棄
dlgSgAbout.btn"Register"=登録
dlgSgAbout.edt"Add-on"=アドオン
dlgSgAbout.edt"Address"=アドレス
dlgSgAbout.edt"Build Date"=ビルド日
dlgSgAbout.edt"Email"=電子メール
dlgSgAbout.edt"Free Updates Until"=無料アップデート期間
dlgSgAbout.edt"Java Version"=Java Version
dlgSgAbout.edt"Maximum Heap"=Maximum Heap
dlgSgAbout.edt"Name"=名前
dlgSgAbout.edt"Settings Path"=Settings Path
dlgSgAbout.edt"Support Until"=サポート期限
dlgSgAbout.edt"User Count"=ユーザ数
dlgSgAbout.edt"Version"=バージョン
dlgSgAbout.tab"Credits"=クレジット
dlgSgAbout.tab"Information"=情報
dlgSgAbout.tab"Licensee"=ライセンス
dlgSgAbout.tle=SmartGitについて
dlgSgAuthenticationRemoveAllCredentials.btn"Remove All"=全て削除
dlgSgAuthenticationRemoveAllCredentials.fur=You will have to re-enter all authentication details.
dlgSgAuthenticationRemoveAllCredentials.hdl=既知の認証情報をすべて削除しますか？
dlgSgAuthenticationRemoveAllCredentials.tle=全て削除
dlgSgAuthenticationShowPassword.edt"Password"=Password
dlgSgAuthenticationShowPassword.tle%1=Password for $1
dlgSgBisectStartConfirm.btn"Start Bisect with Bad HEAD"=Start Bisect with Bad HEAD
dlgSgBisectStartConfirm.btn"Start Bisect"=Start Bisect
dlgSgBisectStartConfirm.fur=You need to mark 1 commit as good and 1 commit as bad before Git can start the binary search.
dlgSgBisectStartConfirm.hdl=Should the bisect be started with a bad commit?
dlgSgBisectStartConfirm.tle=Start Bisect
dlgSgBitbucketGenerateToken.edt"Code"=コード
dlgSgBitbucketGenerateToken.edt"Link"=リンク
dlgSgBitbucketGenerateToken.hdl=生成されたコードを入力する
dlgSgBitbucketGenerateToken.inf=Bitbucketで認証し、生成されたトークンを入力します。
dlgSgBitbucketGenerateToken.lbl"Your browser should have opened automatically, let you authenticate with your preferred account at Bitbucket and grant access to SmartGit. If this didn't happen, manually open following link:"=\
 ブラウザが自動的に開き、Bitbucketのアカウントで認証され、SmartGitへのアクセスが許可されたはずです。そうならなかった場合は、手動で以下のリンクを開いてください。
dlgSgBitbucketGenerateToken.tle=アクセストークンを要求する
dlgSgBranchAddCheckout.btn"Add Branch && Checkout"=ブランチを追加しチェックアウト
dlgSgBranchAddCheckout.btn"Add Branch"=ブランチを追加
dlgSgBranchAddCheckout.edt"Branch"=ブランチ
dlgSgBranchAddCheckout.err"Choose a different branch, the current branch can't be used."=\
 Choose a different branch, the current branch can't be used.
dlgSgBranchAddCheckout.err"Enter the name of the local branch."=\
 ローカルブランチの名前を入力してください。
dlgSgBranchAddCheckout.err"The name must not end with a slash or dot."=\
 The name must not end with a slash or dot.
dlgSgBranchAddCheckout.err"This branch already exists at this commit."=\
 This branch already exists at this commit.
dlgSgBranchAddCheckout.hdl"Add branch at commit $1"=コミット  $1  でブランチ追加
dlgSgBranchAddCheckout.hdl"Add branch at current HEAD commit"=\
 現在のHEADコミットにブランチを追加
dlgSgBranchAddCheckout.inf=作成するローカルブランチの名前を入力してください。
dlgSgBranchAddCheckout.tle=ブランチを追加
dlgSgBranchAddCheckoutOverwriteExisting.btn"Overwrite"=上書き
dlgSgBranchAddCheckoutOverwriteExisting.fur=「'キャンセル」をクリックすると、別のブランチ名を選択することができます。
dlgSgBranchAddCheckoutOverwriteExisting.hdl%1=ブランチ '$1' はすでに存在しています。上書きしますか？
dlgSgBranchAddCheckoutOverwriteExisting.tle=ブランチを追加
dlgSgBranchDeleteCurrentNotPossible.fur=デフォルトでは、SmartGit は現在のブランチを削除することを許可していません。この制限をスキップするには、ローレベルプロパティ 'branch.delete.allowToDeleteCurrentBranch' を設定します。
dlgSgBranchDeleteCurrentNotPossible.hdl=You can't delete the current branch.
dlgSgBranchDeleteCurrentNotPossible.tle=削除
dlgSgBranchDeleteLocalConfirmMultiple.btn"Delete"=削除
dlgSgBranchDeleteLocalConfirmMultiple.chk"Delete from remote repository"=リモートリポジトリから削除する
dlgSgBranchDeleteLocalConfirmMultiple.chk"Delete tracked branches"=Delete tracked branches
dlgSgBranchDeleteLocalConfirmMultiple.fur=It might be complicated to restore deleted branches.\n\nYou may only delete a branch from your local list of remote branches, but this may bring back the branch with the next fetch.
dlgSgBranchDeleteLocalConfirmMultiple.hdl%1=$1個のローカルブランチを削除しますか？
dlgSgBranchDeleteLocalConfirmMultiple.tle=削除
dlgSgBranchDeleteLocalConfirmSingle.btn"Delete"=削除
dlgSgBranchDeleteLocalConfirmSingle.chk"Delete from remote repository '$1'"=リモートリポジトリ'$1'から削除
dlgSgBranchDeleteLocalConfirmSingle.chk"Delete tracked branch '$1'"=追跡ブランチ'$1'を削除
dlgSgBranchDeleteLocalConfirmSingle.fur=プッシュされていない変更が失われたり、ブランチの復元が複雑になったりする可能性があります。
dlgSgBranchDeleteLocalConfirmSingle.hdl%1=ローカルブランチ'$1'を削除しますか？
dlgSgBranchDeleteLocalConfirmSingle.tle=削除
dlgSgBranchDeleteRemoteConfirmSingle.btn"Delete"=削除
dlgSgBranchDeleteRemoteConfirmSingle.chk%1=リモート '$1' から削除
dlgSgBranchDeleteRemoteConfirmSingle.fur=You may only delete a branch from your local list of remote branches, but this may bring back the branch with the next fetch.
dlgSgBranchDeleteRemoteConfirmSingle.hdl%1=リモートブランチ'$1'を削除しますか？
dlgSgBranchDeleteRemoteConfirmSingle.tle=削除
dlgSgBranchTrackingSetConfirm.btn"Configure"=設定
dlgSgBranchTrackingSetConfirm.fur=The necessary configuration will be performed in the .git/config file.
dlgSgBranchTrackingSetConfirm.hdl%2=Do you want to configure '$1' to track '$2'?
dlgSgBranchTrackingSetConfirm.tle=追跡ブランチの設定
dlgSgBugReportSettings.btn"Exit"=終了
dlgSgBugReportSettings.chk"Automatically send 'crash footprints' after an internal error has occurred"=\
 内部エラー発生後、自動的に「クラッシュフットプリント」を送信
dlgSgBugReportSettings.chk"Send 'crash footprints' after an internal error has occurred"=\
 Send 'crash footprints' after an internal error has occurred
dlgSgBugReportSettings.err"Sending 'crash footprints' is required for preview builds, because their main purposes is to get as much as possible bugs reported and fixed before release."=\
 プレビュービルドには「クラッシュフットプリント」を送信する必要があります。\rこれは、プレビュービルドの主な目的が、リリース前にできるだけ多くのバグを報告して修正することであるためです。
dlgSgBugReportSettings.hdl=Crash Reporting
dlgSgBugReportSettings.inf=SmartGitの品質向上のために、機密情報を含まない「クラッシュフットプリント」を自動的に送信してください。このオプションは後から環境設定で変更することができます。
dlgSgBugReportSettings.lbl"A 'crash footprint' contains details about your machine \(e.g. version of operating system\), SmartGit's version/build number, the JVM state and where the internal error occurred.\n\nIt contains NO POTENTIALLY SENSITIVE INFORMATION like user names, email addresses, file contents, file paths or server names."=\
 クラッシュフットプリント」には、お客様のマシンの詳細（オペレーティングシステムのバージョンなど）、SmartGitのバージョン/ビルド番号、JVMの状態、内部エラーが発生した場所などが含まれていますが、ユーザー名、メールアドレス、ファイルの内容、ファイルパス、サーバー名などの機密情報は含まれていません。
dlgSgBugReportSettings.tle=SmartGit
dlgSgCheckoutFastForwardMerge.btn"Fast-Forward-Merge"=Fast-Forward マージ
dlgSgCheckoutFastForwardMerge.btn"Just Checkout"=Just Checkout
dlgSgCheckoutFastForwardMerge.fur=Fast-forward-merging automatically moves the branch forward to the tracked remote branch.
dlgSgCheckoutFastForwardMerge.hdl%1=Do you want to fast-forward-merge remote changes after checking out '$1'?
dlgSgCheckoutFastForwardMerge.tle=チェックアウト
dlgSgCheckoutLocalBranchConfirm.btn"Checkout"=チェックアウト
dlgSgCheckoutLocalBranchConfirm.chk=次回から表示しない
dlgSgCheckoutLocalBranchConfirm.fur%1=この操作により '$1' が現在のブランチになります。
dlgSgCheckoutLocalBranchConfirm.hdl%1=ブランチ '$1' をチェックアウトしますか？
dlgSgCheckoutLocalBranchConfirm.tle=チェックアウト
dlgSgCheckoutTarget.btn"Checkout"=チェックアウト
dlgSgCheckoutTarget.chk"Track remote branch '$1'"=リモートブランチ '$1' を追跡
dlgSgCheckoutTarget.chk"Track remote branch"=追跡するリモートブランチ
dlgSgCheckoutTarget.hdl"Check out commit"=コミットをチェックアウト
dlgSgCheckoutTarget.hdl"Check out remote branch"=リモートブランチをチェックアウト
dlgSgCheckoutTarget.hdl"Checkout commit"=コミットをチェックアウト
dlgSgCheckoutTarget.hdl"Checkout remote branch"=リモートブランチのチェックアウト
dlgSgCheckoutTarget.inf=ローカルブランチではなくコミットをチェックアウトする場合は注意してください。コミットの上にあるコミットは簡単に失われてしまう可能性があります。
dlgSgCheckoutTarget.rbt"Checkout local branch '$1'"=ローカルブランチ'$1'のチェックアウト
dlgSgCheckoutTarget.rbt"Create local branch:"=ローカルブランチを作成:
dlgSgCheckoutTarget.rbt"Don't create local branch \(just work read-only\)"=\
 ローカルブランチを作成しない \(読み取り専用で作業\)
dlgSgCheckoutTarget.tle=チェックアウト
dlgSgCheckoutTarget.wrn"Local branch '$1' is behind checkout target '$2'."=\
 Local branch '$1' is behind checkout target '$2'.
dlgSgCheckoutTarget.wrn"Local branch '$1' is diverged from checkout target '$2'."=\
 Local branch '$1' is diverged from checkout target '$2'.
dlgSgCheckoutTarget.wrn"Local branch is ahead of remote branch. The checkout will end up at a more recent commit."=\
 Local branch is ahead of remote branch. The checkout will end up at a more recent commit.
dlgSgCheckoutTargetAlreadyExistsOverwrite.btn"Overwrite"=上書き
dlgSgCheckoutTargetAlreadyExistsOverwrite.fur=「'キャンセル」をクリックすると、別のブランチ名を選択することができます。
dlgSgCheckoutTargetAlreadyExistsOverwrite.hdl%1=ブランチ '$1' はすでに存在しています。上書きしますか？
dlgSgCheckoutTargetAlreadyExistsOverwrite.tle=チェックアウト
dlgSgCherryPickConfigurationFile.btn"Cherry-Pick"=チェリーピック
dlgSgCherryPickConfigurationFile.fur=Only changes of these files will be cherry-picked \(without committing\).
dlgSgCherryPickConfigurationFile.hdl%1=Do you want to cherry-pick changes of '$1'?
dlgSgCherryPickConfigurationFile.tle=チェリーピック
dlgSgCherryPickConfirmation.btn"Cherry-Pick && Commit"=Cherry-Pick && Commit
dlgSgCherryPickConfirmation.btn"Cherry-Pick"=チェリーピック
dlgSgCherryPickConfirmation.chk=コミットメッセージにソースSHAを追加する
dlgSgCherryPickConfirmation.fur=This will cherry-pick the selected commit into the Working Tree.
dlgSgCherryPickConfirmation.hdl=Do you want to cherry-pick?
dlgSgCherryPickConfirmation.tle=チェリーピック
dlgSgCherryPickFailedBecauseOfConflicts.chk=次回から表示しない
dlgSgCherryPickFailedBecauseOfConflicts.fur=You may need to resolve the conflicts before proceeding.
dlgSgCherryPickFailedBecauseOfConflicts.hdl=Cherry-picking failed because of conflicts.
dlgSgCherryPickFailedBecauseOfConflicts.tle=チェリーピック
dlgSgCherryPickUnpushedCommits.btn"Cherry-Pick"=チェリーピック
dlgSgCherryPickUnpushedCommits.fur=At least one of the selected commits has not been pushed yet, hence cherry-pick is only local and won't be translated to SVN \(mergeinfo\).
dlgSgCherryPickUnpushedCommits.hdl=Do you want to cherry-pick unpushed commits?
dlgSgCherryPickUnpushedCommits.tle=チェリーピック
dlgSgClean.btn"Clean Working Tree"=Clean Working Tree
dlgSgClean.chk"Remove only ignored files"=無視されたファイルのみ削除
dlgSgClean.chk"Remove untracked directories"=追跡されていないディレクトリを削除する
dlgSgClean.hdl=追跡されていないファイルを削除する
dlgSgClean.inf=どの未追跡ファイルを削除するかを選択します。
dlgSgClean.tle=Clean Working Tree
dlgSgClone.chk"Create upstream remote"=Create upstream remote
dlgSgClone.chk"Fetch all Heads and Tags"=Fetch all Heads and Tags
dlgSgClone.chk"Fetch all commits"=Fetch all commits
dlgSgClone.chk"Include Submodules"=Include Submodules
dlgSgClone.chk"Just initialize clone \(expert mode, not officially supported!\)"=\
 Just initialize clone \(expert mode, not officially supported!\)
dlgSgClone.chk"Map SVN trunk, tags and branches to Git"=\
 Map SVN trunk, tags and branches to Git
dlgSgClone.chk"Skip large files \(\"partial clone\"\)"=Skip large files \("partial clone"\)
dlgSgClone.edt"Check Out Branch"=ブランチをチェックアウト
dlgSgClone.edt"Fetch Only"=フェッチのみ
dlgSgClone.edt"Fetch only the latest"=Fetch Only the Latest
dlgSgClone.edt"Local Directory"=Local Directory
dlgSgClone.edt"Omit files larger than"=Omit files larger than
dlgSgClone.edt"Path"=パス
dlgSgClone.edt"Repository URL"=リポジトリ URL
dlgSgClone.err"Please select an empty, local directory for the new repository."=\
 Please select an empty, local directory for the new repository.
dlgSgClone.err"Please specify the URL of the remote repository to be cloned."=\
 クローンするリモートリポジトリのURLを指定してください。
dlgSgClone.err"Please specify the root directory of a local repository."=\
 ローカルリポジトリのルートディレクトリを指定してください。
dlgSgClone.inf"Customize how and what to clone."=\
 Customize how and what to clone.
dlgSgClone.inf"Specify the Git or SVN repository to clone."=\
 クローンするGitまたはSVNリポジトリを指定します。
dlgSgClone.inf"Specify the Git, Mercurial or SVN repository to clone."=\
 クローンするGit、MercurialまたはSVNリポジトリを指定します。
dlgSgClone.inf"Specify the local directory for the new repository."=\
 新しいリポジトリのローカルディレクトリを指定します。
dlgSgClone.inf"Specify the repository to clone."=クローンを作成するリポジトリを指定します。
dlgSgClone.mni"Add Hosting Provider"=ホスティングプロバイダーを追加
dlgSgClone.rbt"Clone all revisions \(recommended\)"=すべてのリビジョンをクローンする \(推奨\)
dlgSgClone.rbt"Clone from revision:"=このリビジョンからクローン:
dlgSgClone.rbt"Local Git or Mercurial repository"=Local Git or Mercurial repository
dlgSgClone.rbt"Local Git repository"=Local Git repository
dlgSgClone.rbt"Local repository"=ローカルリポジトリ
dlgSgClone.rbt"Remote Git or SVN repository"=Remote Git or SVN repository
dlgSgClone.rbt"Remote Git, Mercurial or SVN repository"=\
 Remote Git, Mercurial or SVN repository
dlgSgClone.rbt"Remote repository"=リモートリポジトリ
dlgSgClone.tle=クローン
dlgSgCloneRepositoryType.btn"Git"=Git
dlgSgCloneRepositoryType.btn"Mercurial"=Mercurial
dlgSgCloneRepositoryType.btn"SVN"=SVN
dlgSgCloneRepositoryType.fur=The specified URL protocol is ambiguous and may refer to different types of repositories.
dlgSgCloneRepositoryType.hdl=Select the type of repository you are going to clone.
dlgSgCloneRepositoryType.tle=クローン
dlgSgCloneSvnDetachedHeadSuccess.fur=SmartGit now continues to fetch all other revisions in the background. You may safely start working with the repository now; only log-related operations will be affected by this intermediate state.\n\nOnce SmartGit has finished the background part of the clone, it will let you know in the notifications area \(status bar\) and you can complete the clone there.
dlgSgCloneSvnDetachedHeadSuccess.hdl=HEAD revision has been successfully cloned.
dlgSgCloneSvnDetachedHeadSuccess.tle=クローン
dlgSgCommit.btn"Commit && Push"=コミット&&プッシュ
dlgSgCommit.btn"Commit"=コミット
dlgSgCommit.btn"Select from Log"=ログから選択
dlgSgCommit.btn"Select"=選択
dlgSgCommit.chk"Add 'Signed-off-by' signature"=コミットメッセージにSigned-off-by 署名を追加する
dlgSgCommit.chk"Amend last commit instead of creating new one"=\
 新規にコミットせず、前回のコミットを修正する
dlgSgCommit.chk"Amend last commit"=前回のコミットを修正
dlgSgCommit.chk"Bypass commit hook"=コミットフックをバイパスする
dlgSgCommit.col"Directory"=ディレクトリ
dlgSgCommit.col"Name"=名前
dlgSgCommit.edt"Commit Message"=コミットメッセージ
dlgSgCommit.edt"Create"=作成
dlgSgCommit.err"Enter a commit message describing \(the reason for\) the commit."=\
 Enter a commit message describing \(the reason for\) the commit.
dlgSgCommit.hdl=ローカルまたはステージングされた変更のコミット
dlgSgCommit.inf=コミットしたいファイルを選択し、コミットメッセージを記入します。
dlgSgCommit.lbl"More Options"=追加のオプション
dlgSgCommit.mni"Deselect All"=選択を解除
dlgSgCommit.mni"JIRA"=JIRA
dlgSgCommit.mni"Log"=ログ
dlgSgCommit.mni"Select All"=全選択
dlgSgCommit.mni"Select from Log"=ログから選択
dlgSgCommit.mni"Show Changes"=比較する
dlgSgCommit.mni"Toggle"=トグル
dlgSgCommit.rbt"Local Changes"=ローカルの変更
dlgSgCommit.rbt"Merge commit \(multiple parents\)"=Merge commit \(multiple parents\)
dlgSgCommit.rbt"Simple commit \(one parent, \"squash\"\)"=Simple commit \(one parent, "squash"\)
dlgSgCommit.rbt"Staged Changes"=ステージされた変更
dlgSgCommit.tle=コミット
dlgSgCommit.wrn"All staged changes have been selected for commit, as this is necessary in 'Reverting' state."=\
 ステージされたすべての変更がコミット対象として選択されています。これは 'Reverting' 状態において必要なことだからです。
dlgSgCommit.wrn"When modifying or splitting a commit, you first need to commit all local changes before being able to continue the rebase."=\
 When modifying or splitting a commit, you first need to commit all local changes before being able to continue the rebase.
dlgSgCommitAmendAlreadyPushedCommit.btn"Amend"=修正する
dlgSgCommitAmendAlreadyPushedCommit.fur=プッシュしたコミットを修正した場合、後で強制的にプッシュする必要があります。\rこの場合、他のユーザーの変更を上書きしてしまう可能性があります。
dlgSgCommitAmendAlreadyPushedCommit.hdl=すでにプッシュされているコミットを修正しますか？
dlgSgCommitAmendAlreadyPushedCommit.tle=コミット
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.btn"Continue Rebase"=Continue Rebase
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.btn"Create Commit"=コミットを作成
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.fur=The repository is in 'rebasing' state. Instead of creating an additional commit as part of your rebased commits, you will usually just want continue the rebase.
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.hdl=Do you want to continue the rebase or create an additional commit?
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.tle=リベース
dlgSgCommitIndexAllWorkingTreeChanges.btn"Commit All Working Tree Changes"=作業ツリーの全ての変更をコミットする
dlgSgCommitIndexAllWorkingTreeChanges.chk=次回から表示しない
dlgSgCommitIndexAllWorkingTreeChanges.fur=まだステージングされていないファイルがあります。\r個々の変更をステージングするには、［キャンセル］をクリックしてください。\rそれ以外の場合は、作業ツリーの全ての変更がステージングされ、コミットされます。
dlgSgCommitIndexAllWorkingTreeChanges.hdl=すべての作業ツリーの変更をコミットしますか？
dlgSgCommitIndexAllWorkingTreeChanges.tle=コミット
dlgSgCommitIndexNoFilesFound.fur=Neither staged files nor locally changed files were found.
dlgSgCommitIndexNoFilesFound.hdl=There is nothing to commit.
dlgSgCommitIndexNoFilesFound.tle=コミット
dlgSgCommitNoFilesFoundNotAllowEmpty.fur=Neither staged files nor locally changed files were found.
dlgSgCommitNoFilesFoundNotAllowEmpty.hdl=There is nothing to commit.
dlgSgCommitNoFilesFoundNotAllowEmpty.tle=コミット
dlgSgCommitSelectMessageFromLog.btn"Branches"=ブランチ
dlgSgCommitSelectMessageFromLog.btn"Select"=選択
dlgSgCommitSelectMessageFromLog.chk"Add 'fixup!' prefix for easier automatic squashing using Interactive Rebase"=\
 Add 'fixup!' prefix for easier automatic squashing using Interactive Rebase
dlgSgCommitSelectMessageFromLog.hdl=Select a commit
dlgSgCommitSelectMessageFromLog.inf=メッセージを使用するコミットを選択します。
dlgSgCommitSelectMessageFromLog.mni"Author"=Author
dlgSgCommitSelectMessageFromLog.mni"Branches and Tags"=ブランチとタグ
dlgSgCommitSelectMessageFromLog.mni"Committer"=コミッタ
dlgSgCommitSelectMessageFromLog.mni"Copy ID"=IDをコピー
dlgSgCommitSelectMessageFromLog.mni"Copy Message"=メッセージをコピー
dlgSgCommitSelectMessageFromLog.mni"File Content \(very expensive\)"=File Content \(very expensive\)
dlgSgCommitSelectMessageFromLog.mni"File \(expensive\)"=File \(expensive\)
dlgSgCommitSelectMessageFromLog.mni"Forget Pattern"=Forget Pattern
dlgSgCommitSelectMessageFromLog.mni"ID"=ID
dlgSgCommitSelectMessageFromLog.mni"Message"=メッセージ
dlgSgCommitSelectMessageFromLog.mni"Refresh"=更新
dlgSgCommitSelectMessageFromLog.mni"Regular Expressions"=Regular Expressions
dlgSgCommitSelectMessageFromLog.mni"Remember Pattern"=Remember Pattern
dlgSgCommitSelectMessageFromLog.tle=Select Commit Message
dlgSgCommitSingleOrAllWorkingTreeChanges.btn"Commit All Changes"=Commit All Changes
dlgSgCommitSingleOrAllWorkingTreeChanges.btn"Commit File"=Commit File
dlgSgCommitSingleOrAllWorkingTreeChanges.fur=You either can commit the single selected file or all changed files.
dlgSgCommitSingleOrAllWorkingTreeChanges.hdl=What do you want to commit?
dlgSgCommitSingleOrAllWorkingTreeChanges.tle=コミット
dlgSgCommitToDetachedHead.btn"Commit Anyway"=Commit Anyway
dlgSgCommitToDetachedHead.fur=リポジトリの HEAD は現在、ブランチを指しておらず、コミット(SHA)を直接参照しています。コミットする際に、新しく作成したコミットはSHAでしか到達できないため、簡単に見失ってしまう可能性があります。今すぐコミットするのではなく、まず現在のHEADにブランチを作成し、その後にコミットしてください。
dlgSgCommitToDetachedHead.hdl=Do you want to commit to a detached HEAD?
dlgSgCommitToDetachedHead.tle=コミット
dlgSgCompareTwoFiles.btn"Compare with Each Other"=ファイル同士の比較
dlgSgCompareTwoFiles.btn"Compare with Repository"=リポジトリとの比較
dlgSgCompareTwoFiles.fur=ファイルはリポジトリの内容と比較したり、ファイル同士で比較することができます。
dlgSgCompareTwoFiles.hdl=選択された2つのファイルを比較しますか？
dlgSgCompareTwoFiles.tle=比較
dlgSgConflictSolverMarkResolved.btn"Leave Conflicted"=Leave Conflicted
dlgSgConflictSolverMarkResolved.btn"Mark Resolved"=Mark Resolved
dlgSgConflictSolverMarkResolved.fur=To complete a conflict resolution, the file needs to be marked as resolved \(git stage\). Until marked as resolved, the file remains in conflicted state and you can try other conflict resolutions.
dlgSgConflictSolverMarkResolved.hdl=Do you want to mark the file as resolved?
dlgSgConflictSolverMarkResolved.tle=Mark Resolved
dlgSgConflictSolverStageForCommit.btn"Don't Stage"=Don't Stage
dlgSgConflictSolverStageForCommit.btn"Stage"=ステージ
dlgSgConflictSolverStageForCommit.fur=Staging is necessary to resolve the file's conflict status.
dlgSgConflictSolverStageForCommit.hdl=Do you want to stage the file for commit now?
dlgSgConflictSolverStageForCommit.tle=Stage for Commit
dlgSgCustomizeProjectUi.btn"Add"=追加
dlgSgCustomizeProjectUi.btn"Assign"=割り当て
dlgSgCustomizeProjectUi.btn"Clear"=クリア
dlgSgCustomizeProjectUi.btn"Remove"=除去
dlgSgCustomizeProjectUi.btn"Reset"=リセット
dlgSgCustomizeProjectUi.chk"Show text below icon"=Show text below icon
dlgSgCustomizeProjectUi.col"Accelerator"=Accelerator
dlgSgCustomizeProjectUi.col"Available"=利用可能
dlgSgCustomizeProjectUi.col"Default"=デフォルト
dlgSgCustomizeProjectUi.col"Menu Item"=Menu Item
dlgSgCustomizeProjectUi.col"Selected"=Selected
dlgSgCustomizeProjectUi.edt"Accelerator"=Accelerator
dlgSgCustomizeProjectUi.mni"Regular Expressions"=Regular Expressions
dlgSgCustomizeProjectUi.tab"Accelerators"=Accelerators
dlgSgCustomizeProjectUi.tab"Toolbar"=ツールバー
dlgSgCustomizeProjectUi.tle=カスタマイズ
dlgSgDeleteFileTrash.hdl%1='$1'を削除しますか？
dlgSgDeleteFilesTrash.hdl%1=選択した$1個のファイルを削除しますか？
dlgSgDiscard.btn"Discard to Stash"=Discard to Stash
dlgSgDiscard.btn"Discard"=破棄
dlgSgDiscard.col"Directory"=ディレクトリ
dlgSgDiscard.col"Name"=名前
dlgSgDiscard.edt"Revert to"=次の状態に戻す
dlgSgDiscard.hdl=ローカルまたはステージングされた変更を破棄する
dlgSgDiscard.inf=変更を破棄するファイルと、インデックスとHEADのどちらの状態に戻すかを選択します。
dlgSgDiscard.rbt"HEAD"=HEAD
dlgSgDiscard.rbt"Index"=Index
dlgSgDiscard.tle=破棄
dlgSgDiscardNoFilesFound.fur=Neither staged files nor locally changed files were found.
dlgSgDiscardNoFilesFound.hdl=There is nothing to discard.
dlgSgDiscardNoFilesFound.tle=破棄
dlgSgDiscardRevertToHead.hdl%1=Do you want to reset $1 files back to their HEAD state?
dlgSgDiscardRevertToIndex.hdl%1=Do you want to reset $1 files back to their Index state?
dlgSgDiscardRevertTo(Head|Index).btn"Discard"=破棄
dlgSgDiscardRevertTo(Head|Index).fur=The content might be hard to restore!
dlgSgDiscardRevertTo(Head|Index).tle=破棄
dlgSgErrorUtilsClientException.fur"Commit '$1' was not found in repository."=\
 Commit '$1' was not found in repository.
dlgSgErrorUtilsClientException.fur"Could not determine URL for submodule $1. Is it correctly initialized?"=\
 Could not determine URL for submodule $1. Is it correctly initialized?
dlgSgErrorUtilsClientException.fur"Repository '$1' is not valid."=Repository '$1' is not valid.
dlgSgErrorUtilsClientException.fur"svn: $1"=svn: $1
dlgSgErrorUtilsClientException.fur%1=GIT_DIR for repository at '$1' does not exist.
dlgSgErrorUtilsClientException.hdl=コマンドの実行に失敗しました。
dlgSgErrorUtilsClientException.tle=コマンドの失敗
dlgSgExitConfirmation.btn"Exit Now"=終了する
dlgSgExitConfirmation.chk=次回から表示しない
dlgSgExitConfirmation.fur=最後のウィンドウを閉じることで、SmartGitが終了します。
dlgSgExitConfirmation.hdl=SmartGitを終了しますか？
dlgSgExitConfirmation.tle=終了
dlgSgFileCompareNoChanges.btn"Open"=開く
dlgSgFileCompareNoChanges.chk=次回から表示しない
dlgSgFileCompareNoChanges.fur=ファイルの内容を確認するには、「開く」をクリックしてください。
dlgSgFileCompareNoChanges.hdl=Open the file compare though no changes will be shown?
dlgSgFileCompareNoChanges.tle=ファイルの比較
dlgSgFindObject.edt"Repository Path, Commit ID or Ref"=\
 Repository Path, Commit ID or Ref
dlgSgFindObject.tle=オブジェクトを検索
dlgSgFlowBranchDivergedHandlerFastForward.btn"Fast-Forward"=Fast-Forward
dlgSgFlowBranchDivergedHandlerFastForward.fur%3=The local branch '$1' is behind its tracked branch '$2'. You may fast-forward now or do it manually later, e.g. by checking out the branch '$3'.
dlgSgFlowBranchDivergedHandlerFastForward.hdl%2=Should branch '$1' be fast-forwarded to '$2'?
dlgSgFlowBranchDivergedHandlerFastForward.tle=Start Feature
dlgSgFlowBranchDivergedHandlerReplaceRemote.btn"Replace"=置換
dlgSgFlowBranchDivergedHandlerReplaceRemote.fur%2=The local branch '$1' seems to contain more recent but rewritten commits of remote branch '$2'.\n\nIf you are not sure whether the local branch is actually more recent than the remote branch, you should better cancel this operation and investigate local and remote changes in more detail.
dlgSgFlowBranchDivergedHandlerReplaceRemote.hdl%2=Should branch '$1' replace remote branch '$2'?
dlgSgFlowBranchDivergedHandlerReplaceRemote.tle=Finish Feature
dlgSgFlowBranchDivergedHandlerResetToRemote.btn"Reset"=リセット
dlgSgFlowBranchDivergedHandlerResetToRemote.fur%2=The remote branch '$1' seems to contain more recent but rewritten commits of local branch '$2'.\n\nIf you are not sure whether the remote branch is actually more recent than the local branch, you should better cancel this operation and investigate local and remote changes in more detail.
dlgSgFlowBranchDivergedHandlerResetToRemote.hdl%2=Should branch '$1' be reset to remote branch '$2'?
dlgSgFlowBranchDivergedHandlerResetToRemote.tle=Finish Feature
dlgSgFlowConfigure.btn"Reset to Defaults"=デフォルトにリセット
dlgSgFlowConfigure.edt"Develop Branch"=Develop ブランチ
dlgSgFlowConfigure.edt"Feature Branches"=Feature Branches
dlgSgFlowConfigure.edt"Git-Flow Type"=Git-Flow Type
dlgSgFlowConfigure.edt"Hot-Fix Branches"=Hot-Fix Branches
dlgSgFlowConfigure.edt"Main Development Branch"=Main Development Branch
dlgSgFlowConfigure.edt"Master Branch"=Master Branch
dlgSgFlowConfigure.edt"Prefix for Feature Branches"=Prefix for Feature Branches
dlgSgFlowConfigure.edt"Release Branches"=Release Branches
dlgSgFlowConfigure.edt"Remote"=リモート
dlgSgFlowConfigure.edt"Support Branches"=Support ブランチ
dlgSgFlowConfigure.edt"Version Tags"=Version Tags
dlgSgFlowConfigure.hdl=Configure the branch naming scheme
dlgSgFlowConfigure.inf=Configure how your feature, release and hotfix branches should be named.
dlgSgFlowConfigure.rbt"Full \(feature, release, hotfix, support branches\)"=\
 Full \(feature, release, hotfix, support branches\)
dlgSgFlowConfigure.rbt"Light \(just feature branches\)"=Light \(just feature branches\)
dlgSgFlowConfigure.tle=Git-Flowの設定
dlgSgFlowConfigureChangeOrSwitchOff.btn"Change Configuration"=構成を変更する
dlgSgFlowConfigureChangeOrSwitchOff.btn"Switch-Off Git-Flow"=Switch-Off Git-Flow
dlgSgFlowConfigureChangeOrSwitchOff.fur=Git-Flow is already configured for this repository. You may change the Git-Flow configuration or switch-off the Git-Flow features. In both cases, the file ~/.git/config will be modified accordingly.
dlgSgFlowConfigureChangeOrSwitchOff.hdl=Do you want to change or switch-off the Git-Flow configuration?
dlgSgFlowConfigureChangeOrSwitchOff.tle=Git-Flowの設定
dlgSgFlowFeatureFinish.btn"Finish"=完了
dlgSgFlowFeatureFinish.btn"Select from Log"=ログから選択
dlgSgFlowFeatureFinish.btn"Select"=選択
dlgSgFlowFeatureFinish.chk"Delete feature branch"=feature ブランチを削除
dlgSgFlowFeatureFinish.chk"Fetch latest commits and remove remote feature branch"=\
 Fetch latest commits and remove remote feature branch
dlgSgFlowFeatureFinish.edt"Commit Message"=コミットメッセージ
dlgSgFlowFeatureFinish.hdl=Finish current feature
dlgSgFlowFeatureFinish.inf"Choose how to finish the current feature. This operation will integrate the feature into the '$1' branch."=\
 Choose how to finish the current feature. This operation will integrate the feature into the '$1' branch.
dlgSgFlowFeatureFinish.inf"Choose how to finish the feature branch '$1'. This operation will integrate the feature into the '$2' branch."=\
 Choose how to finish the feature branch '$1'. This operation will integrate the feature into the '$2' branch.
dlgSgFlowFeatureFinish.mni"JIRA"=JIRA
dlgSgFlowFeatureFinish.mni"Log"=ログ
dlgSgFlowFeatureFinish.rbt"Create merge commit"=マージコミットを作成
dlgSgFlowFeatureFinish.rbt"Create simple commit \(squash\)"=Create simple commit \(squash\)
dlgSgFlowFeatureFinish.rbt"Rebase onto '$1'"=Rebase onto '$1'
dlgSgFlowFeatureFinish.tle=Finish Feature
dlgSgFlowFeatureStart.btn"Start"=開始
dlgSgFlowFeatureStart.edt"Base"=ベース
dlgSgFlowFeatureStart.edt"Feature Name"=Feature Name
dlgSgFlowFeatureStart.err"A feature with this name already exists. Choose a different name."=\
 この名前のfeatureはすでに存在しています。別の名前を選択してください。
dlgSgFlowFeatureStart.err"Invalid feature name: The name must not end with a slash or dot."=\
 Invalid feature name: The name must not end with a slash or dot.
dlgSgFlowFeatureStart.hdl=Start a new feature
dlgSgFlowFeatureStart.inf%1=Enter the name of the new feature branch. This operation will fork a new branch from the '$1' branch.
dlgSgFlowFeatureStart.lbl"Resulting Branch: $1"=Resulting Branch: $1
dlgSgFlowFeatureStart.tle=Start Feature
dlgSgFlowHotfixFinish.btn"Finish"=完了
dlgSgFlowHotfixFinish.btn"Select from Log"=ログから選択
dlgSgFlowHotfixFinish.chk"Create version tag"=Create version tag
dlgSgFlowHotfixFinish.chk"Create version tag:"=Create version tag:
dlgSgFlowHotfixFinish.chk"Delete hotfix branch"=hotfix ブランチを削除
dlgSgFlowHotfixFinish.chk"Fetch latest '$1' commits"=Fetch latest '$1' commits
dlgSgFlowHotfixFinish.chk"Merge to develop"=develop にマージする
dlgSgFlowHotfixFinish.chk"Push results and remove remote hotfix branch"=\
 Push results and remove remote hotfix branch
dlgSgFlowHotfixFinish.edt"Commit Message"=コミットメッセージ
dlgSgFlowHotfixFinish.hdl=Finish a hotfix
dlgSgFlowHotfixFinish.inf"Choose how to finish the current hotfix. This operation will merge the hotfix into the '$1' and '$2' branches."=\
 Choose how to finish the current hotfix. This operation will merge the hotfix into the '$1' and '$2' branches.
dlgSgFlowHotfixFinish.inf"Choose how to finish the hotfix branch '$1'. This operation will merge the hotfix into the '$2' and '$3' branches."=\
 Choose how to finish the hotfix branch '$1'. This operation will merge the hotfix into the '$2' and '$3' branches.
dlgSgFlowHotfixFinish.inf"Choose how to finish the hotfix branch '$1'."=\
 Choose how to finish the hotfix branch '$1'.
dlgSgFlowHotfixFinish.tle=Finish Hotfix
dlgSgFlowHotfixStart.btn"Start"=開始
dlgSgFlowHotfixStart.chk"Fetch from '$1' branch"=Fetch from '$1' branch
dlgSgFlowHotfixStart.chk"Fetch from base branch"=Fetch from base branch
dlgSgFlowHotfixStart.edt"Base"=ベース
dlgSgFlowHotfixStart.edt"Hotfix Name"=Hotfix Name
dlgSgFlowHotfixStart.hdl=Start a new hotfix
dlgSgFlowHotfixStart.inf%1=Enter the name of the new hotfix branch. This operation will fork a new branch from the '$1' branch.
dlgSgFlowHotfixStart.lbl"Resulting Branch: $1"=Resulting Branch: $1
dlgSgFlowHotfixStart.tle=Start Hotfix
dlgSgFlowIntegrateDevelop.btn"Integrate"=Integrate
dlgSgFlowIntegrateDevelop.chk"Fetch latest '$1' commits from remote repository"=\
 Fetch latest '$1' commits from remote repository
dlgSgFlowIntegrateDevelop.hdl%1=Integrate commits from '$1'
dlgSgFlowIntegrateDevelop.inf"Merge or rebase commits from the main development line to the current feature."=\
 Merge or rebase commits from the main development line to the current feature.
dlgSgFlowIntegrateDevelop.inf"Merge or rebase commits from the main development line to the feature branch '$1'."=\
 Merge or rebase commits from the main development line to the feature branch '$1'.
dlgSgFlowIntegrateDevelop.rbt"Merge from '$1'"='$1' からマージ
dlgSgFlowIntegrateDevelop.rbt"Rebase current feature onto '$1'"=Rebase current feature onto '$1'
dlgSgFlowIntegrateDevelop.tle=Integrate Develop
dlgSgFlowReleaseFinish.btn"Finish"=完了
dlgSgFlowReleaseFinish.btn"Select from Log"=ログから選択
dlgSgFlowReleaseFinish.chk"Create version tag"=Create version tag
dlgSgFlowReleaseFinish.chk"Create version tag:"=Create version tag:
dlgSgFlowReleaseFinish.chk"Delete release branch"=release ブランチを削除
dlgSgFlowReleaseFinish.chk"Fetch latest '$1' and '$2' commits"=\
 Fetch latest '$1' and '$2' commits
dlgSgFlowReleaseFinish.chk"Push results and remove remote release branch"=\
 Push results and remove remote release branch
dlgSgFlowReleaseFinish.edt"Commit Message"=コミットメッセージ
dlgSgFlowReleaseFinish.hdl=Finish a release
dlgSgFlowReleaseFinish.inf"Choose how to finish the release branch '$1'. This operation will merge the current release into the '$2' and '$3' branches."=\
 Choose how to finish the release branch '$1'. This operation will merge the current release into the '$2' and '$3' branches.
dlgSgFlowReleaseFinish.inf"Choose how to finish the release branch '$1'."=\
 Choose how to finish the release branch '$1'.
dlgSgFlowReleaseFinish.tle=Finish Release
dlgSgFlowReleaseStart.btn"Start"=開始
dlgSgFlowReleaseStart.chk"Fetch from base branch"=Fetch from base branch
dlgSgFlowReleaseStart.edt"Base"=ベース
dlgSgFlowReleaseStart.edt"Release Name"=Release Name
dlgSgFlowReleaseStart.hdl=Start a new release
dlgSgFlowReleaseStart.inf%1=Enter the name of the new release branch. This operation will fork a new branch from the '$1' branch.
dlgSgFlowReleaseStart.lbl"Resulting Branch: $1"=Resulting Branch: $1
dlgSgFlowReleaseStart.tle=Start Release
dlgSgGarbageCollector.btn"Run Garbage Collector"=ガベージコレクタ
dlgSgGarbageCollector.chk"Also prune recently created objects"=最近作成されたオブジェクトのプルーニングも実施
dlgSgGarbageCollector.chk"Expire reflog now \(will also delete stashes!\)"=\
 今すぐ'reflog'を失効させる（スタッシュも削除されます）
dlgSgGarbageCollector.chk"Optimize repository more aggressively \(may take a while\)"=\
 リポジトリの最適化をより積極的に行う \(時間がかかる可能性あり\)
dlgSgGarbageCollector.hdl=ガベージコレクタ
dlgSgGarbageCollector.inf=Gitガベージコレクタを実行すると、到達できないオブジェクトが削除され、ローカルリポジトリが最適化されます。\rディスク消費量が削減され、パフォーマンスが向上します。
dlgSgGarbageCollector.tle=ガベージコレクタ
dlgSgGitHubGenerateToken.btn"Authenticate"=Authenticate
dlgSgGitHubGenerateToken.edt"Account"=アカウント
dlgSgGitHubGenerateToken.edt"Code"=コード
dlgSgGitHubGenerateToken.edt"Link"=リンク
dlgSgGitHubGenerateToken.edt"Password"=パスワード
dlgSgGitHubGenerateToken.hdl=GitHub用の新しいAPIトークンの生成
dlgSgGitHubGenerateToken.inf=OAuthまたは認証情報を用いてGitHubで認証します。
dlgSgGitHubGenerateToken.lbl"Your browser should have opened automatically, let you authenticate with your preferred account at GitHub and grant access to SmartGit. If this didn't happen, manually open following link:"=\
 ブラウザが自動的に起動し、GitHubのアカウントで認証され、SmartGitへのアクセスが許可されるはずです。認証されなかった場合は、手動で以下のリンクを開いてください。
dlgSgGitHubGenerateToken.rbt"Authenticate using OAuth \(recommended\)"=OAuthによる認証\(推奨\)
dlgSgGitHubGenerateToken.rbt"Authenticate with your GitHub account and password"=\
 GitHubのアカウントとパスワードで認証
dlgSgGitHubGenerateToken.tle=APIトークンを生成
dlgSgGitHubPullRequestCreate.btn"Create"=作成
dlgSgGitHubPullRequestCreate.chk"Draft \(don\'t notify code owners yet\)"=\
 Draft \(don\'t notify code owners yet\)
dlgSgGitHubPullRequestCreate.edt"$1 \u21d2"=$1 \u21d2
dlgSgGitHubPullRequestCreate.edt"Title and Description"=タイトルと説明
dlgSgGitHubPullRequestCreate.hdl=プルリクエストを作成
dlgSgGitHubPullRequestCreate.inf=別のリポジトリやブランチにプルリクエストを送信します。
dlgSgGitHubPullRequestCreate.tle=プルリクエストを作成
dlgSgGitHubPullRequestMerge.btn"Merge"=マージ
dlgSgGitHubPullRequestMerge.btn"Select from Log"=ログから選択
dlgSgGitHubPullRequestMerge.edt"Commit Message"=コミットメッセージ
dlgSgGitHubPullRequestMerge.hdl=Merge a Pull Request
dlgSgGitHubPullRequestMerge.inf=選択したプルリクエストをどのようにマージしますか?
dlgSgGitHubPullRequestMerge.lbl"If you have integrated the Pull Request manually, choose this option to close the Pull Request on the server."=\
 If you have integrated the Pull Request manually, choose this option to close the Pull Request on the server.
dlgSgGitHubPullRequestMerge.lbl"If your are fine with the Pull Request changes, choose this option to perform the merge directly on the GitHub server."=\
 If your are fine with the Pull Request changes, choose this option to perform the merge directly on the GitHub server.
dlgSgGitHubPullRequestMerge.lbl"To locally check how a Pull Request integrates with the latest commits, choose this option."=\
 プルリクエストが最新のコミットとどのように統合されるかをローカルで確認するには、このオプションを選択します。
dlgSgGitHubPullRequestMerge.rbt"Mark as merged on GitHub Server"=\
 Mark as merged on GitHub Server
dlgSgGitHubPullRequestMerge.rbt"Merge on GitHub Server"=GitHub Serverでマージ
dlgSgGitHubPullRequestMerge.rbt"Merge to Local Repository"=ローカルリポジトリにマージ
dlgSgGitHubPullRequestMerge.tle=Merge Pull Request
dlgSgGitLabGenerateToken.edt"Code"=コード
dlgSgGitLabGenerateToken.edt"Link"=リンク
dlgSgGitLabGenerateToken.edt"Token"=トークン
dlgSgGitLabGenerateToken.hdl=Enter the generated token
dlgSgGitLabGenerateToken.inf=GitLabで認証し、生成されたトークンを入力します。
dlgSgGitLabGenerateToken.lbl"Your browser should have opened automatically, let you authenticate with your preferred account at GitLab and grant access to SmartGit. If this didn't happen, manually open following link:"=\
 ブラウザが自動的に起動し、GitLabのアカウントで認証され、SmartGitへのアクセスが許可されるはずです。認証されなかった場合は、手動で次のリンクを開いてください。
dlgSgGitLabGenerateToken.tle=Request Access Token
dlgSgGitLabMergeRequestCreate.btn"Create"=作成
dlgSgGitLabMergeRequestCreate.edt"$1 \u21d2"=$1 \u21d2
dlgSgGitLabMergeRequestCreate.edt"Title and Description"=タイトルと説明
dlgSgGitLabMergeRequestCreate.hdl=マージリクエストを作成
dlgSgGitLabMergeRequestCreate.inf=別のリポジトリやブランチにマージリクエストを送信します。
dlgSgGitLabMergeRequestCreate.tle=マージリクエストを作成
dlgSgGitLabSettingsInvalidToken.fur=GitLabアカウントのPersonal Access Tokenを使用します。
dlgSgGitLabSettingsInvalidToken.hdl=Please enter a Personal Access Token for your GitLab account.
dlgSgGitLabSettingsInvalidToken.tle=Input Validation
dlgSgHeadMessageListenerReplaceMessage.btn"Don't Replace"=置換しない
dlgSgHeadMessageListenerReplaceMessage.btn"Replace This Time"=置換する
dlgSgHeadMessageListenerReplaceMessage.chk=メッセージがすでに入力されている場合は、決して置き換えない
dlgSgHeadMessageListenerReplaceMessage.fur=コミットメッセージの入力欄が空の場合は、HEADのコミットメッセージが自動的に再利用されます。
dlgSgHeadMessageListenerReplaceMessage.hdl=入力されたコミットメッセージをHEADコミットのメッセージに置換しますか？
dlgSgHeadMessageListenerReplaceMessage.tle=コミット
dlgSgHistoryEditAuthor.btn"Set Author"=作者を設定
dlgSgHistoryEditAuthor.edt"Email"=電子メール
dlgSgHistoryEditAuthor.edt"User Name"=ユーザ名
dlgSgHistoryEditAuthor.hdl=Authorを編集
dlgSgHistoryEditAuthor.inf=新しいコミットの作者とそのメールアドレスを入力します。
dlgSgHistoryEditAuthor.tle=Autherを編集
dlgSgHistoryEditMessage.btn"JIRA"=JIRA
dlgSgHistoryEditMessage.btn"Select from Log"=ログから選択
dlgSgHistoryEditMessage.btn"Select"=選択
dlgSgHistoryEditMessage.btn"Set Message"=メッセージをセットする
dlgSgHistoryEditMessage.edt"Commit Message"=コミットメッセージ
dlgSgHistoryEditMessage.hdl=コミットメッセージを編集
dlgSgHistoryEditMessage.inf=新しいコミットメッセージを入力します。
dlgSgHistoryEditMessage.mni"JIRA"=JIRA
dlgSgHistoryEditMessage.mni"Log"=ログ
dlgSgHistoryEditMessage.tle=コミットメッセージを編集
dlgSgHistoryModifySplitConfirm.btn"Modify"=変更
dlgSgHistoryModifySplitConfirm.btn"Split"=Split
dlgSgHistoryModifySplitConfirm.fur='Modify' will stop after the commit.\n\n'Split' will put the changes into the Index. You may discard some changes that should go into the second commit.\n\nAfter you've done the changes, process the remaining commits by continuing the rebase.
dlgSgHistoryModifySplitConfirm.hdl%1=コミットした $1 を修正又は分割しますか?
dlgSgHistoryModifySplitConfirm.tle=Modify or Split Commit
dlgSgHistoryPushCommitsReplaceRemoteBranch.btn"Force Push"=強制プッシュ
dlgSgHistoryPushCommitsReplaceRemoteBranch.fur=リモートブランチへのプッシュは fast-forward できないので、強制的にプッシュする必要があります。リモートブランチでのコミットは失われます。
dlgSgHistoryPushCommitsReplaceRemoteBranch.hdl%1=Do you want to replace the remote branch by commit $1?
dlgSgHistoryPushCommitsReplaceRemoteBranch.tle=Push Up To
dlgSgHistoryPushCommitsUpToCommit.btn"Push"=プッシュ
dlgSgHistoryPushCommitsUpToCommit.fur=選択したコミットまでのすべてのコミットが、リモートリポジトリにプッシュされます。
dlgSgHistoryPushCommitsUpToCommit.hdl%1=Do you want to push changes up to commit $1?
dlgSgHistoryPushCommitsUpToCommit.tle=Push Up To
dlgSgHistoryPushedCommitsModifyPushedCommits.btn"Modify Pushed Commits"=既にプッシュされたコミットを修正する
dlgSgHistoryPushedCommitsModifyPushedCommits.fur=既にプッシュされているコミットは、他のユーザーにも知られており、そのユーザーが自分のコミットを構築する際に使用されている可能性があります。\rこのようなコミットを変更すると、後で予期せぬ衝突が起こる可能性があります。
dlgSgHistoryPushedCommitsModifyPushedCommits.hdl=既にプッシュされているコミットを修正しますか?
dlgSgHistoryPushedCommitsModifyPushedCommits.tle=Journal
dlgSgHistorySquash.btn"JIRA"=JIRA
dlgSgHistorySquash.btn"Select from Log"=ログから選択
dlgSgHistorySquash.btn"Select"=選択
dlgSgHistorySquash.btn"Squash Commits"=Squash Commits
dlgSgHistorySquash.edt"Authorship"=Authorship
dlgSgHistorySquash.edt"Commit Message"=コミットメッセージ
dlgSgHistorySquash.hdl=Squash multiple commits
dlgSgHistorySquash.inf=The selected commits will be replaced by one squashed commit containing all changes of the individual commits.
dlgSgHistorySquash.mni"JIRA"=JIRA
dlgSgHistorySquash.mni"Log"=ログ
dlgSgHistorySquash.tle=Squash Commits
dlgSgHostingProviderAdd.btn"Add"=追加
dlgSgHostingProviderAdd.btn"Generate API Token"=APIトークンを生成
dlgSgHostingProviderAdd.btn"Generate Token"=トークンを生成
dlgSgHostingProviderAdd.chk"Use OAuth token for repository authentication \(instead of password\)"=\
 リポジトリの認証に（パスワードではなく）OAuthトークンを使用する
dlgSgHostingProviderAdd.chk"Use SSH instead of HTTPS to access repositories"=\
 リポジトリへのアクセスにHTTPSではなくSSHを使用する
dlgSgHostingProviderAdd.chk"Use SSL client certificates \(usually not required\)"=\
 SSLクライアント証明書の使用（通常は必要ありません）
dlgSgHostingProviderAdd.chk"Use a GitHub Enterprise instance"=GitHub Enterpriseインスタンスの使用
dlgSgHostingProviderAdd.chk"Use a custom Azure DevOps server"=\
 カスタムAzure DevOpsサーバーの使用
dlgSgHostingProviderAdd.chk"Use a custom GitLab server"=カスタムGitLabサーバーの使用
dlgSgHostingProviderAdd.edt"Account"=アカウント
dlgSgHostingProviderAdd.edt"Certificate Password"=証明書のパスワード
dlgSgHostingProviderAdd.edt"Client Certificate"=クライアント証明書
dlgSgHostingProviderAdd.edt"Domain"=Domain
dlgSgHostingProviderAdd.edt"Password"=パスワード
dlgSgHostingProviderAdd.edt"Server URL \(including collection\)"=Server URL \(including collection\)
dlgSgHostingProviderAdd.edt"Server URL"=サーバURL
dlgSgHostingProviderAdd.edt"Token"=トークン
dlgSgHostingProviderAdd.edt"User Name"=ユーザ名
dlgSgHostingProviderAdd.hdl=ホスティングプロバイダーの新規アカウント設定
dlgSgHostingProviderAdd.inf=新規アカウントを設定するホスティングプロバイダーを選択します。
dlgSgHostingProviderAdd.lbl"For example: https://azure.devops.server/DefaultCollection"=例: https://azure.devops.server/DefaultCollection
dlgSgHostingProviderAdd.lbl"The \(API\) token is a special auto-generated credential which SmartGit will use to authenticate at GitHub. It adds another layer of security, as you can easily revoke access by removing the token from the GitHub front-end."=\
 APIトークンとは、SmartGitがGitHubでの認証に使用する、自動生成された特別なクレデンシャルです。\rこのトークンを GitHub のフロントエンドから削除すれば、簡単にアクセスを取り消すことができるので、もうひとつのセキュリティ層となります。
dlgSgHostingProviderAdd.lbl"The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your Azure DevOps account settings."=\
 トークンは、自動生成されたOAuthトークン（下記の「トークンの生成」を使用）か、Azure DevOpsのアカウント設定で自分で生成できる「パーソナルアクセストークン」のどちらかを使用します。
dlgSgHostingProviderAdd.lbl"The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitHub account settings."=\
 トークンには、自動生成された OAuth トークン (以下の 'トークンを生成' を使用します) か、あるいは GitHub のアカウント設定で自分で生成した 'personal access token' を使用します。
dlgSgHostingProviderAdd.lbl"The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitLab account settings."=\
 トークンには、自動生成された OAuth トークン (以下の 'トークンを生成' を使用します) か、あるいは GitLab のアカウント設定で自分で生成した 'personal access token' を使用します。
dlgSgHostingProviderAdd.lbl"Use the same login information as for the assembla website."=\
 Use the same login information as for the assembla website.
dlgSgHostingProviderAdd.lbl"Use the same login information as for the beanstalk website and make sure that for 'My Profile' - 'Account' - 'Account Settings' - 'Developer API' is enabled."=\
 Use the same login information as for the beanstalk website and make sure that for 'My Profile' - 'Account' - 'Account Settings' - 'Developer API' is enabled.
dlgSgHostingProviderAdd.lbl"Use the same login information as for the codebasehq website."=\
 Use the same login information as for the codebasehq website.
dlgSgHostingProviderAdd.lbl"Use the same login information as for the unfuddle website."=\
 Use the same login information as for the unfuddle website.
dlgSgHostingProviderAdd.tle=ホスティングプロバイダーを追加
dlgSgHostingProviderEdit.btn"Generate API Token"=APIトークンを生成
dlgSgHostingProviderEdit.btn"Generate Token"=トークンを生成
dlgSgHostingProviderEdit.chk"Use OAuth token for repository authentication \(instead of password\)"=\
 リポジトリの認証に（パスワードではなく）OAuthトークンを使用する
dlgSgHostingProviderEdit.chk"Use SSH instead of HTTPS to access repositories"=\
 リポジトリへのアクセスにHTTPSではなくSSHを使用する
dlgSgHostingProviderEdit.chk"Use a GitHub Enterprise instance"=GitHub Enterpriseインスタンスの使用
dlgSgHostingProviderEdit.chk"Use a custom GitLab server"=カスタムGitLabサーバーの使用
dlgSgHostingProviderEdit.edt"Certificate Password"=証明書のパスワード
dlgSgHostingProviderEdit.edt"Client Certificate"=クライアント証明書
dlgSgHostingProviderEdit.edt"Name"=名前
dlgSgHostingProviderEdit.edt"Server URL"=サーバURL
dlgSgHostingProviderEdit.edt"Token"=トークン
dlgSgHostingProviderEdit.err"Please enter a Personal Access Token for your GitLab account."=\
 Please enter a Personal Access Token for your GitLab account.
dlgSgHostingProviderEdit.err"Please enter an OAuth 'refresh' token."=\
 Please enter an OAuth 'refresh' token.
dlgSgHostingProviderEdit.err"Please enter the API token."=Please enter the API token.
dlgSgHostingProviderEdit.err"Please specify the private key file."=\
 秘密鍵ファイルを指定してください。
dlgSgHostingProviderEdit.hdl%1=Configure $1 account
dlgSgHostingProviderEdit.inf%1=$1 に接続するための認証情報を指定してください。
dlgSgHostingProviderEdit.lbl"The \(API\) token is a special auto-generated credential which SmartGit will use to authenticate at GitHub. It adds another layer of security, as you can easily revoke access by removing the token from the GitHub front-end."=\
 APIトークンとは、SmartGitがGitHubでの認証に使用する、自動生成された特別なクレデンシャルです。\rこのトークンを GitHub のフロントエンドから削除すれば、簡単にアクセスを取り消すことができるので、もうひとつのセキュリティ層となります。
dlgSgHostingProviderEdit.lbl"The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitHub account settings."=\
 トークンには、自動生成された OAuth トークン (以下の 'トークンを生成' を使用します) か、あるいは GitHub のアカウント設定で自分で生成した 'personal access token' を使用します。
dlgSgHostingProviderEdit.lbl"The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitLab account settings."=\
 トークンには、自動生成された OAuth トークン (以下の 'トークンを生成' を使用します) か、あるいは GitLab のアカウント設定で自分で生成した 'personal access token' を使用します。
dlgSgHostingProviderEdit.tle=GitLab
dlgSgHostingProviderSelectRepository.btn"Select"=選択
dlgSgHostingProviderSelectRepository.col"Name"=名前
dlgSgHostingProviderSelectRepository.col"Namespace"=Namespace
dlgSgHostingProviderSelectRepository.col"Repository"=リポジトリ
dlgSgHostingProviderSelectRepository.tle=GitHub Projects
dlgSgHttpPasswordAuthenticationFailedCause1.fur%3=The OAuth-access token could not be requested. Most likely your $1 configuration has changed and SmartGit's stored OAuth credentials are invalid.\n\nTo resolve, recreate the $2 hosting provider in the Preferences.\n\nDetails:\n\n$3
dlgSgHttpPasswordAuthenticationFailedCause1.hdl%1=$1 OAuth認証に失敗しました
dlgSgHttpPasswordAuthenticationFailedCause1.tle=HTTP authentication
dlgSgHttpPasswordCredentials.btn"Login"=ログイン
dlgSgHttpPasswordCredentials.chk"Store password"=パスワードの保存
dlgSgHttpPasswordCredentials.edt"Password"=パスワード
dlgSgHttpPasswordCredentials.edt"User Name"=ユーザ名
dlgSgHttpPasswordCredentials.hdl%1=Login to '$1'
dlgSgHttpPasswordCredentials.inf=リポジトリに認証するためのユーザー名とパスワードを入力します。
dlgSgHttpPasswordCredentials.tle=ログイン
dlgSgIgnoreChanged.btn"Discard Changes"=Discard Changes
dlgSgIgnoreChanged.fur=The changes will be discarded when proceeding!
dlgSgIgnoreChanged.hdl=本当に変更されたファイルを削除しますか?
dlgSgIgnoreChanged.tle=無視
dlgSgIgnoreDirectoryConfirm.btn"Ignore"=無視
dlgSgIgnoreDirectoryConfirm.edt"Ignore File"=Ignore File
dlgSgIgnoreDirectoryConfirm.fur=このディレクトリ名は、.ignore ファイルに追加されます。 .ignore ファイルが存在しない場合は、作成されます。
dlgSgIgnoreDirectoryConfirm.hdl%1=ディレクトリ'$1'を無視しますか？
dlgSgIgnoreDirectoryConfirm.tle=無視
dlgSgIgnoreEdit.btn"Edit"=編集
dlgSgIgnoreEdit.hdl=Edit Git ignore file
dlgSgIgnoreEdit.inf=Select the Git ignore file to edit.
dlgSgIgnoreEdit.mni"Copy Path"=パスをコピー
dlgSgIgnoreEdit.mni"Reveal"=Reveal
dlgSgIgnoreEdit.tle=無視リストを編集
dlgSgIgnoreFile.btn"Ignore"=無視
dlgSgIgnoreFile.btn"Remove && Ignore"=Remove && Ignore
dlgSgIgnoreFile.edt"Ignore File"=Ignore File
dlgSgIgnoreFile.err"The pattern must match all selected file names. For instance, '$1' is not matched."=\
 The pattern must match all selected file names. For instance, '$1' is not matched.
dlgSgIgnoreFile.hdl=無視するファイルを指定する
dlgSgIgnoreFile.inf=選択したファイルだけを無視するか、指定したパターンに一致するすべてのファイルを無視するかを選択します。\r追跡されたファイルは以降のバージョン管理の対象から除外されます。
dlgSgIgnoreFile.lbl"Use ? to match a single or \* to match multiple arbitrary characters. The pattern will be saved in the .gitignore file of the same directory."=\
 単一の文字にマッチする場合は ? を、複数の任意の文字にマッチする場合は * を使用します。このパターンは、同じディレクトリの .gitignore ファイルに保存されます。
dlgSgIgnoreFile.rbt"Ignore as pattern \(e.g. '\*.obj'\):"=パターンで無視する \(例：\*.obj\):
dlgSgIgnoreFile.rbt"Ignore explicitly \(e.g. 'Makefile'\)"=明示的に無視する \(例：'Makefile'\)
dlgSgIgnoreFile.tle=無視
dlgSgIndexEditorSaveOrDiscard.btn"Discard"=破棄
dlgSgIndexEditorSaveOrDiscard.btn"Save"=保存
dlgSgIndexEditorSaveOrDiscard.fur=Your changes will be lost, if you don't save them now.
dlgSgIndexEditorSaveOrDiscard.hdl=変更内容を保存しますか？
dlgSgIndexEditorSaveOrDiscard.tle=閉じる
dlgSgJournalFormCommitCantBeModified.fur=Not part of your head's primary-parent history
dlgSgJournalFormCommitCantBeModified.hdl=At least one selected commit can't be modified.
dlgSgJournalFormCommitCantBeModified.tle=Autherを編集
dlgSgLfsInstallConfirm.btn"Install"=インストール
dlgSgLfsInstallConfirm.fur=This will configure hooks and filters required for LFS.
dlgSgLfsInstallConfirm.hdl=Would you like to initialize this repository for Large File Support \(LFS\)?
dlgSgLfsInstallConfirm.tle=LFS Install
dlgSgLfsTrack.edt"Pattern"=Pattern
dlgSgLfsTrack.err"File '$1' does not match the specified pattern."=\
 File '$1' does not match the specified pattern.
dlgSgLfsTrack.hdl=Mark a file or pattern as tracked
dlgSgLfsTrack.inf=Large File Support\(LFS\)で扱うファイル名のパターンを指定します。
dlgSgLfsTrack.tle=LFS Track
dlgSgLocalChangesFormTakeBlockListenerRevertWorkingTreeFile.btn"Revert"=Revert
dlgSgLocalChangesFormTakeBlockListenerRevertWorkingTreeFile.fur%1=You are about to apply lines from the Index to the working tree file '$1'. The modifications will be saved immediately.
dlgSgLocalChangesFormTakeBlockListenerRevertWorkingTreeFile.hdl=Do you really want to revert changes in the working tree file?
dlgSgLocalChangesFormTakeBlockListenerRevertWorkingTreeFile.tle=Revert Working Tree File
dlgSgLogCheckoutFileAs.btn"Save After"=Save After
dlgSgLogCheckoutFileAs.btn"Save Before"=Save Before
dlgSgLogCheckoutFileAs.edt"Target File"=ターゲットファイル
dlgSgLogCheckoutFileAs.hdl=リポジトリファイルの保存
dlgSgLogCheckoutFileAs.inf"Select the local file to saved to."=\
 Select the local file to saved to.
dlgSgLogCheckoutFileAs.inf"Select whether to save the file state Before or After the selected commit."=\
 Select whether to save the file state Before or After the selected commit.
dlgSgLogCheckoutFileAs.tle=ファイルを別名で保存
dlgSgLogCommentDeleteConfirm.hdl%1=本当にコメント'$1'を削除しますか？
dlgSgLogComment(|s)DeleteConfirm.btn"Delete Comment"=コミットを削除
dlgSgLogComment(|s)DeleteConfirm.fur=削除したコメントは元に戻せません。
dlgSgLogComment(|s)DeleteConfirm.tle=コミットを削除
dlgSgLogCommentsDeleteConfirm.hdl%1=$1のコメントを本当に削除しますか？
dlgSgLogCompareSelectedFilesAgainstEachOther.btn"Compare Separately"=Compare Separately
dlgSgLogCompareSelectedFilesAgainstEachOther.btn"Compare With Each Other"=ファイル同士の比較
dlgSgLogCompareSelectedFilesAgainstEachOther.fur=You may compare the selected files against each other or open up two separate compares for each file against its previous state.
dlgSgLogCompareSelectedFilesAgainstEachOther.hdl=Do you want to compare the selected files against each other?
dlgSgLogCompareSelectedFilesAgainstEachOther.tle=比較
dlgSgLogCompareWithWorkingTree.btn"Compare After"=後と比較
dlgSgLogCompareWithWorkingTree.btn"Compare Before"=前と比較
dlgSgLogCompareWithWorkingTree.edt"Working Tree File"=ワーキングツリーファイル
dlgSgLogCompareWithWorkingTree.hdl=リポジトリファイルとローカルファイルの比較
dlgSgLogCompareWithWorkingTree.inf=選択したコミットの前または後の状態のリポジトリファイルと比較するかどうかを選択します。
dlgSgLogCompareWithWorkingTree.tle=Compare with Working Tree
dlgSgLogGraphRootSwitch.chk"Include tracked remote branches"=Include tracked remote branches
dlgSgLogGraphRootSwitch.hdl=Select shown branches
dlgSgLogGraphRootSwitch.inf=Select the branches for which to show commits in the graph.
dlgSgLogGraphRootSwitch.tle=Select Branches
dlgSgLogOpenFailedRepository.fur=Is the repository still valid?
dlgSgLogOpenFailedRepository.hdl=Repository could not be opened.
dlgSgLogOpenFailedRepository.tle=ログ
dlgSgLogOpenFailedSubmodule.fur=Is the repository still valid?
dlgSgLogOpenFailedSubmodule.hdl=サブモジュールを開くことができませんでした。
dlgSgLogOpenFailedSubmodule.tle=ログ
dlgSgLogOpenNewWindow.btn"Existing Window"=既存のウィンドウ
dlgSgLogOpenNewWindow.btn"New Window"=新しいウィンドウ
dlgSgLogOpenNewWindow.fur=There is already an existing Log window which can be revealed.
dlgSgLogOpenNewWindow.hdl=Do you want to open a new Log window?
dlgSgLogOpenNewWindow.tle=ログ
dlgSgLogOpenSubmoduleLinkOrRepository.btn"History of Updates"=History of Updates
dlgSgLogOpenSubmoduleLinkOrRepository.btn"Submodule Log"=サブモジュールログ
dlgSgLogOpenSubmoduleLinkOrRepository.fur=サブモジュールの更新履歴には、親リポジトリから見たサブモジュールリンク ('GITLINK') の変更が表示されます。サブモジュールリポジトリのログには、サブモジュールリポジトリ自身で発生したすべてのコミットが表示されます。
dlgSgLogOpenSubmoduleLinkOrRepository.hdl=Do you want to show the history of submodule updates or the Log for the submodule repository?
dlgSgLogOpenSubmoduleLinkOrRepository.tle=ログを開く
dlgSgLogRefActionsDeleteConfirm.btn"Delete Branch"=ブランチを削除
dlgSgLogRefActionsDeleteConfirm.fur=プッシュされていない変更が失われたり、ブランチの復元が複雑になったりする可能性があります。
dlgSgLogRefActionsDeleteConfirm.hdl%1=本当にローカルブランチ'$1'を削除しますか？
dlgSgLogRefActionsDeleteConfirm.tle=ローカルブランチを削除
dlgSgLogRefreshRepositoryInvalid.btn"Close Repository"=リポジトリを閉じる
dlgSgLogRefreshRepositoryInvalid.btn"Remove Repository"=Remove Repository
dlgSgLogRefreshRepositoryInvalid.fur%1=This could mean that the repository at\n\n$1was removed or renamed outside SmartGit.
dlgSgLogRefreshRepositoryInvalid.hdl%1=The opened repository '$1' became invalid.
dlgSgLogRefreshRepositoryInvalid.tle=更新
dlgSgMerge.btn"Branches"=ブランチ
dlgSgMerge.btn"Create Merge-Commit"=マージリクエストを作成
dlgSgMerge.btn"Merge to Working Tree"=作業ツリーへマージ
dlgSgMerge.hdl=マージ
dlgSgMerge.inf=マージするブランチやコミットを選択し、それらをどのように作業ツリーにマージするかを決定します。
dlgSgMerge.tle=マージ
dlgSgMergeHowToMerge.btn"Create Merge-Commit"=マージリクエストを作成
dlgSgMergeHowToMerge.btn"Fast-Forward"=Fast-Forward
dlgSgMergeHowToMerge.btn"Merge to Working Tree"=作業ツリーへマージ
dlgSgMergeHowToMerge.btn"Squash-Merge"=Squash-Merge
dlgSgMergeHowToMerge.fur=Fast-forward merge は、現在のブランチ (HEAD) を選択されたコミットに進めることを意味します。\r別の方法として、マージコミットを作成したり、作業ツリーにマージしたりすることもできます。\r後者の場合、変更内容を確認し、後でマージコミットや通常の\(squash\)コミットを作成することができます。
dlgSgMergeHowToMerge.hdl%1=ブランチ '$1' からどのようにマージしますか?
dlgSgMergeHowToMerge.tle=マージ
dlgSgOpenRepository.edt"Repository"=リポジトリ
dlgSgOpenRepository.err"Please specify the root directory of a Git or Mercurial repository."=\
 Git または Mercurial リポジトリのルートディレクトリを指定してください。
dlgSgOpenRepository.err"Please specify the root directory of a Git repository."=\
 Please specify the root directory of a Git repository.
dlgSgOpenRepository.hdl=既存のリポジトリを追加、または新しいリポジトリを作成
dlgSgOpenRepository.inf=既存のリポジトリを追加する場合はローカルのGitまたはMercurialリポジトリを指定します。\r新規にリポジトリを作成する場合は、空のディレクトリを指定します。
dlgSgOpenRepository.tle=リポジトリの追加又は作成
dlgSgOpenRepositoryInitializeChooseVcs.btn"Git"=Git
dlgSgOpenRepositoryInitializeChooseVcs.btn"Mercurial"=Mercurial
dlgSgOpenRepositoryInitializeChooseVcs.fur=The specified directory does not appear to be a valid Git or Mercurial repository.
dlgSgOpenRepositoryInitializeChooseVcs.hdl=What VCS should be used to initialize 'swt'?
dlgSgOpenRepositoryInitializeChooseVcs.tle=リポジトリの追加又は作成
dlgSgOpenRepositoryInitializeGit.btn"Initialize"=Initialize
dlgSgOpenRepositoryInitializeGit.fur=The specified directory does not appear to be a valid Git repository.
dlgSgOpenRepositoryInitializeGit.hdl%1=Should '$1' be initialized as a new Git repository?
dlgSgOpenRepositoryInitializeGit.tle=リポジトリの追加又は作成
dlgSgOutput.chk"Don't show again for these $1 warnings"=\
 Don't show again for these $1 warnings
dlgSgOutput.chk"Don't show again for this warning"=\
 Don't show again for this warning
dlgSgOutput.chk"Show automatically for failed command"=Show automatically for failed command
dlgSgOutput.lbl"Branches need merging first."=ブランチはまずマージする必要があります。
dlgSgOutput.lbl"If in question, please ask your repository administrator."=\
 If in question, please ask your repository administrator.
dlgSgOutput.tle"Command Failed"=コマンドの失敗
dlgSgOutput.tle"Command Output"=コマンド出力
dlgSgOutput.tle"Command Succeeded"=コマンドが成功しました
dlgSgOutput.tle"Output"=Output
dlgSgPingRepositoryFailed.fur%1=Please check the repository URL.\n\n$1
dlgSgPingRepositoryFailed.hdl%1=Could not connect to the repository '$1'.
dlgSgPingRepositoryFailed.tle=クローン
dlgSgPreferences.btn"Add"=追加
dlgSgPreferences.btn"Assign"=割り当て
dlgSgPreferences.btn"Change Master Password"=マスターパスワードの変更
dlgSgPreferences.btn"Clear Cache"=キャッシュをクリア
dlgSgPreferences.btn"Clear"=クリア
dlgSgPreferences.btn"Copy"=コピー
dlgSgPreferences.btn"Edit"=編集
dlgSgPreferences.btn"Export"=エクスポート
dlgSgPreferences.btn"I accept the risk!"=リスクを受け入れて続行する
dlgSgPreferences.btn"Import"=インポート
dlgSgPreferences.btn"Move Down"=下へ
dlgSgPreferences.btn"Move Up"=上へ
dlgSgPreferences.btn"Re-Add Defaults"=Re-Add Defaults
dlgSgPreferences.btn"Remove All"=全て削除
dlgSgPreferences.btn"Remove"=除去
dlgSgPreferences.btn"Reset to Defaults"=デフォルトにリセット
dlgSgPreferences.btn"Reset"=リセット
dlgSgPreferences.btn"Show Password"=パスワードを表示
dlgSgPreferences.cdl"Authentication"=認証
dlgSgPreferences.cdl"Background Commands"=バックグラウンド処理
dlgSgPreferences.cdl"Built-in Text Editors"=内蔵テキストエディタ
dlgSgPreferences.cdl"Commands"=コマンド
dlgSgPreferences.cdl"Conflict Solvers"=コンフリクトソルバー
dlgSgPreferences.cdl"Diff Tools"=Diffツール
dlgSgPreferences.cdl"Executables"=Executables
dlgSgPreferences.cdl"Git Config"=Git Config
dlgSgPreferences.cdl"Git Executable"=Git 実行ファイル
dlgSgPreferences.cdl"Hosting Providers"=ホスティングプロバイダ
dlgSgPreferences.cdl"Keyboard Shortcuts"=キーボード ショートカット
dlgSgPreferences.cdl"Log and Working Tree window"=ログとワーキングツリーウィンドウ
dlgSgPreferences.cdl"Log"=ログ
dlgSgPreferences.cdl"Low-level Properties"=ローレベルプロパティ
dlgSgPreferences.cdl"Privacy"=プライバシー
dlgSgPreferences.cdl"Proxy"=プロキシ
dlgSgPreferences.cdl"Refresh"=更新
dlgSgPreferences.cdl"SmartGit Updates"=SmartGitの更新
dlgSgPreferences.cdl"Spell Checker"=スペルチェッカー
dlgSgPreferences.cdl"Standard Window"=スタンダードウィンドウ
dlgSgPreferences.cdl"Tools"=ツール
dlgSgPreferences.cdl"User Interface"=ユーザインタフェース
dlgSgPreferences.chk"Add untracked files"=追跡されていないファイルの追加
dlgSgPreferences.chk"Allow all commands on stash and pull request commits"=\
 スタッシュとプルリクエストのコミットにすべてのコマンドを許可する
dlgSgPreferences.chk"Allow modifying pushed commits \(e.g. forced-push\)"=\
 プッシュされたコミットの修正を許可する (例: force-push)
dlgSgPreferences.chk"Allow to open multiple Log windows for the same repository/file"=\
 同一のリポジトリ/ファイルに対して複数のログウィンドウを開くことを許可する
dlgSgPreferences.chk"Also detect renames for untracked and missing files"=\
 トラックされていないファイルや行方不明のファイルのリネームも検出します。
dlgSgPreferences.chk"Always fetch new commits, tags and branches from submodule"=\
 サブモジュールから常に新しいコミット、タグ、ブランチを取得する
dlgSgPreferences.chk"Ask for master password on startup"=\
 起動時にマスターパスワードの入力を求める
dlgSgPreferences.chk"Autoindent new lines"=改行時のオートインデント
dlgSgPreferences.chk"Automatically save stash on common commands, if they fail due to local changes"=\
 一般的なコマンドがローカルの変更により失敗した場合、自動的にstashで変更内容を退避する
dlgSgPreferences.chk"Automatically send 'crash footprints' after an internal error has occurred"=\
 内部エラー発生後、自動的に「クラッシュフットプリント」を送信
dlgSgPreferences.chk"Automatically set up tracking for new branches \(requires push.default to be unset\)"=\
 新しいブランチのトラッキングを自動的に設定する\(push.defaultが未設定の必要があります。\）
dlgSgPreferences.chk"Automatically set up tracking for new branches"=\
 新規ブランチの追跡を自動的に設定
dlgSgPreferences.chk"Begin of line: jump to first non-whitespace character"=\
 行頭：最初の非ホワイトスペース文字にジャンプする
dlgSgPreferences.chk"Closed 'favorite' repositories"=閉じた「お気に入り」リポジトリ
dlgSgPreferences.chk"Compare with working tree, even if all changes are staged"=\
 すべての変更がステージングされていても、作業ツリーと比較する
dlgSgPreferences.chk"Detect local changes in closed 'favorite' repositories"=\
 閉じた「お気に入り」リポジトリのローカルな変更の検出
dlgSgPreferences.chk"Detect remote changes"=リモートの変更の検出
dlgSgPreferences.chk"Detect renames \(for added and removed files, as command line Git does\)"=\
 リネームの検出（コマンドラインGitと同様に、追加されたファイルと削除されたファイルの検出）
dlgSgPreferences.chk"Distinguish between content and EOL-only changes \(slightly more expensive\)"=\
 コンテンツとEOLのみの変更を区別する（やや高コストな処理）
dlgSgPreferences.chk"Enable integration for configured hosting providers \(pull requests, comments\)"=\
 設定済みのホスティングプロバイダーの統合を可能にする（プルリクエスト、コメント）
dlgSgPreferences.chk"Focus next change after accepting change \(Take Left/Take Right\)"=\
 変更を確認した後、次の変更点にフォーカスする \(左に移動/右に移動\)
dlgSgPreferences.chk"For Preview versions, automatically download the latest build"=\
 プレビューバージョンの場合、最新のビルドを自動的にダウンロードします。
dlgSgPreferences.chk"For ambiguous protocols like 'https', show dialog to choose between Git and SVN clone"=\
 http のような曖昧なプロトコルでは、GitとSVNのクローンを選択するダイアログを表示します。
dlgSgPreferences.chk"Highlight current line in text content"=\
 現在の行をハイライトする
dlgSgPreferences.chk"Home and end: operate on line, not the document"=\
 Home , End キー : ドキュメントではなく、行に対して操作する
dlgSgPreferences.chk"Include untracked files"=追跡されていないファイルの追加
dlgSgPreferences.chk"Initialize new submodules"=新しいサブモジュールを初期化
dlgSgPreferences.chk"Left and right cursor moves: limit to current line"=\
 左右のカーソル移動：現在の行に制限
dlgSgPreferences.chk"Open repositories when idle"=アイドル時にリポジトリを開く \(Open repositories when idle\)
dlgSgPreferences.chk"Open the last used repositories"=最後に使ったリポジトリを開く
dlgSgPreferences.chk"Periodically invoke Git's garbage collection when idle"=\
 アイドル時にGitのガベージコレクションを定期的に呼び出す
dlgSgPreferences.chk"Preselect 'Staged' if files are staged, even if a file without staged changes is selected"=\
 ファイルがステージングされている場合、ステージングされていない変更のないファイルが選択されていても、「ステージング」を事前に選択する。
dlgSgPreferences.chk"Proxy requires authentication"=プロキシに認証が必要
dlgSgPreferences.chk"Prune obsolete remote tracked branches"=不要になったリモートトラッキングブランチを整理
dlgSgPreferences.chk"Push all tags"=全てのタグをプッシュ
dlgSgPreferences.chk"Refresh file system also while SmartGit is in background"=\
 SmartGit がバックグラウンド動作している間、ファイルシステムを更新する
dlgSgPreferences.chk"Remember from last used single Log or Working Tree window"=\
 最後に使用したウィンドウタイプ(ロググラフ or ワーキングツリー)を記憶する
dlgSgPreferences.chk"Remove leading and trailing whitespace from commit message"=\
 コミットメッセージから先頭と末尾のホワイトスペースを削除する
dlgSgPreferences.chk"Remove missing files"=見つからないファイルの削除
dlgSgPreferences.chk"Restore all confirmation dialogs"=すべての確認ダイアログを復元する
dlgSgPreferences.chk"Send 'crash footprints' after an internal error has occurred"=\
 内部エラー発生後、「クラッシュフットプリント」を送信
dlgSgPreferences.chk"Send usage statistics"=使用状況の統計情報の送信
dlgSgPreferences.chk"Show also the resolve dialog for external conflict solvers"=\
 外部のコンフリクトソルバーの解決ダイアログも表示する
dlgSgPreferences.chk"Show chooser dialog if multiple entries match"=\
 複数のエントリーが一致した場合、選択ダイアログを表示
dlgSgPreferences.chk"Show line length guides \(only useful for monospaced-font\)"=\
 コミットメッセージ入力欄に行の長さのガイドを表示する（等幅フォントの場合に有用）
dlgSgPreferences.chk"Show verbose date for last days, e.g. Yesterday"=\
 過去の日の詳細な日付を表示する（例：Yesterday
dlgSgPreferences.chk"Show welcome dialog if no repository has been reopened"=\
 リポジトリが再オープンされていない場合、ウェルカムダイアログを表示する。
dlgSgPreferences.chk"Sign all commits"=すべてのコミットに署名する
dlgSgPreferences.chk"Swap 'ours' and 'theirs' on Rebase conflicts for easier understanding"=\
 リベースの競合で'ours'と'theirs'を入れ替えて理解しやすくする。
dlgSgPreferences.chk"Tab enters and Backspace deletes multiple leading spaces"=\
 Tabキーで複数のスペースを入力し、Backspaceキーで先頭の複数個のスペースを削除する
dlgSgPreferences.chk"Trim whitespace"=空白を削除する
dlgSgPreferences.chk"Update registered submodules"=登録されたサブモジュールの更新
dlgSgPreferences.chk"Use gravatar.com to show images for the users"=\
 gravatar.comを使用してユーザーアイコンを表示する
dlgSgPreferences.chk"Use indentation from previous non-empty line"=\
 空白でない前の行のインデントを使用
dlgSgPreferences.chk"Use pre-installed \(\"system\"\) Git-Flow\*"=プリインストールされた\("system"\) Git-Flowの使用\*
dlgSgPreferences.chk"Warn for slow rename detection"=リネームの検出に時間がかかる場合は警告する
dlgSgPreferences.col"Accelerator"=Accelerator
dlgSgPreferences.col"Account"=アカウント
dlgSgPreferences.col"Applies To"=適用対象
dlgSgPreferences.col"Arguments"=引数
dlgSgPreferences.col"Command + Arguments"=コマンドと引数
dlgSgPreferences.col"Command"=コマンド
dlgSgPreferences.col"Default"=デフォルト
dlgSgPreferences.col"Details"=詳細
dlgSgPreferences.col"Dictionary File"=辞書ファイル
dlgSgPreferences.col"File Pattern"=ファイルパターン
dlgSgPreferences.col"Key"=キー
dlgSgPreferences.col"Language"=言語
dlgSgPreferences.col"Name"=名前
dlgSgPreferences.col"Patterns"=パターン
dlgSgPreferences.col"Repository"=リポジトリ
dlgSgPreferences.col"Shortcut"=ショートカット
dlgSgPreferences.col"Value"=値
dlgSgPreferences.edt"Date Format\*"=日付形式\*
dlgSgPreferences.edt"Email"=電子メール
dlgSgPreferences.edt"Example"=例
dlgSgPreferences.edt"Fetch"=フェッチ
dlgSgPreferences.edt"File Name Matches\*"=ファイル名の一致\*
dlgSgPreferences.edt"Font Family"=Font Family
dlgSgPreferences.edt"Font Size"=Font Size
dlgSgPreferences.edt"Functionality\*"=Functionality\*
dlgSgPreferences.edt"GPG Program"=GPG Program
dlgSgPreferences.edt"Git Executable"=Git 実行ファイル
dlgSgPreferences.edt"Group Patterns"=グループパターン
dlgSgPreferences.edt"Hg Executable"=Hg Executable
dlgSgPreferences.edt"Host"=ホスト
dlgSgPreferences.edt"Known credentials"=Known credentials
dlgSgPreferences.edt"Language\*"=言語\*
dlgSgPreferences.edt"Name"=名前
dlgSgPreferences.edt"On startup"=起動時
dlgSgPreferences.edt"Password"=パスワード
dlgSgPreferences.edt"Port"=ポート
dlgSgPreferences.edt"Prefer"=Prefer
dlgSgPreferences.edt"Preview"=プレビュー
dlgSgPreferences.edt"Shortcut"=ショートカット
dlgSgPreferences.edt"Signing Key"=署名キー
dlgSgPreferences.edt"Single Patterns"=シングルパターン
dlgSgPreferences.edt"Startup Window"=スタートアップウィンドウ
dlgSgPreferences.edt"Submodule handling\*"=サブモジュールの取り扱い\*
dlgSgPreferences.edt"Suggest to"=提案する
dlgSgPreferences.edt"Text File Encoding"=テキストファイルのエンコーディング
dlgSgPreferences.edt"Theme"=テーマ
dlgSgPreferences.edt"Theme\*"=テーマ\*
dlgSgPreferences.edt"Time Format\*"=時間形式\*
dlgSgPreferences.edt"Username"=ユーザ名
dlgSgPreferences.hnt"Search"=検索
dlgSgPreferences.lbl"Changing these low-level properties can be harmful to the stability or performance of SmartGit. You should only continue if you are sure of what you are doing. Changed properties with a trailing \* need a restart to be applied."=\
 ローレベルのプロパティを変更すると、SmartGitの安定性や性能に悪影響を及ぼす可能性があります。\r自分が何をしているのか確信が持てる場合のみ、作業を続行するべきです。\r変更したプロパティの末尾に\*が付いている場合は、再起動が必要です。
dlgSgPreferences.lbl"Define external tools which will show up in the Tools menu. Those marked with a leading \* in front of the name can be used by the Open command."=\
 ツールメニューに表示される外部ツールを定義します。名前の前に「\*」が付いているものは、「開く」コマンドで使用できます。
dlgSgPreferences.lbl"Here you can edit your account's 'gitconfig' which contains the defaults for all repositories."=\
 ここでは、あなたのアカウントの 'gitconfig' を編集することができます。この設定には、すべてのリポジトリのデフォルト値が含まれています。
dlgSgPreferences.lbl"Here you can view your account's 'gitconfig'. Because it contains 'include'-sections you need to edit it manually."=\
 Here you can view your account's 'gitconfig'. Because it contains 'include'-sections you need to edit it manually.
dlgSgPreferences.lbl"If you are using SSH to connect to other Git repositories, select what SSH client to use."=\
 SSHを使って他のGitリポジトリに接続する場合は、使用するSSHクライアントを選択します。
dlgSgPreferences.lbl"In order to use all SmartGit functionality, you need to have command line Git installed on your system. Provide here the full path to the installed 'git' executable."=\
 SmartGitのすべての機能を使用するには、システムにコマンドラインGitがインストールされている必要があります。インストールした'git'実行ファイルのフルパスを入力してください。
dlgSgPreferences.lbl"In order to use all SmartGit functionality, you need to have command line Git or Mercurial installed on your system. Provide here the full path to the installed 'git' or 'hg' executable."=\
 In order to use all SmartGit functionality, you need to have command line Git or Mercurial installed on your system. Provide here the full path to the installed 'git' or 'hg' executable.
dlgSgPreferences.lbl"Note: The password will be stored in plain text in SmartGit's configuration area!"=\
 注：パスワードは、SmartGitの設定領域にプレーンテキストで保存されます。
dlgSgPreferences.lbl"Please help to improve SmartGit's quality by automatically sending 'crash footprints' which do not contain any sensitive information. You can change this option later in the preferences.\n\nA 'crash footprint' contains details about your machine \(e.g. version of operating system\), SmartGit's version/build number, the JVM state and where the internal error occurred.\n\nIt contains NO POTENTIALLY SENSITIVE INFORMATION like user names, email addresses, file contents, file paths or server names."=\
 SmartGitの品質向上のために、機密情報を含まない「クラッシュフットプリント」を自動的に送信してください。クラッシュフットプリント」には、お使いのマシンの詳細（オペレーティングシステムのバージョンなど）、SmartGitのバージョン/ビルド番号、JVMの状態、内部エラーが発生した場所などが含まれますが、ユーザー名、メールアドレス、ファイルの内容、ファイルパス、サーバー名などの機密情報は一切含まれません。
dlgSgPreferences.lbl"Tags, branches and other refs matched by this configuration will be grouped in the File Log and show up in the Commit details. It will also be used for grouping the 'Tags'-category of the Branches view."=\
 この設定で一致したタグ、ブランチ、その他の参照は、ファイルログにまとめられ、コミットの詳細に表示されます。この設定は、ブランチ ビューの"Tags"カテゴリのグループ化にも使用されます。
dlgSgPreferences.lbl"The proxy is primarily used for the Check for New Version. It will also be used for Git HTTP\(s\) connections if no reasonable system proxy configuration seems to be present already \(see documentation for details\)."=\
 このプロキシは、主に「新しいバージョンの確認」に使用されます。\rシステムのプロキシ設定が適切でない場合には、Git HTTP\(S\)の接続にも使用されます。(詳細はドキュメントを参照してください)
dlgSgPreferences.lbl"When comparing files, this list is searched from top to bottom to find a matching diff tool. If none is found, the built-in file compare is used for text files."=\
 ファイルを比較する際には、このリストを上から下に向かって検索し、一致する 比較 ツールを探します。\r見つからない場合は、テキスト ファイルの場合は内蔵のファイル比較が使用されます。
dlgSgPreferences.lbl"When invoking the Conflict Solver feature, this list is searched from top to bottom to find a matching entry. If none is found, the built-in Conflict Solver is used for text files."=\
 コンフリクトソルバー機能を呼び出すと、このリストを上から下へ検索し、一致するエントリーを探します。\r見つからない場合は、テキストファイル用の組み込みのコンフリクトソルバーが使用されます。
dlgSgPreferences.lbl"You may configure hosting provider accounts to simplify accessing your hosted repositories or to enable the GitHub pull request and comment features."=\
 ホスティングプロバイダーのアカウントを設定して、ホストされているリポジトリへのアクセスを簡素化したり、GitHubのプルリクエストやコメント機能を有効にしたりすることができます。
dlgSgPreferences.lbl"\*\) these options require an application restart to be applied"=\
 \*\) これらのオプションを適用するには、アプリケーションの再起動が必要です
dlgSgPreferences.lbl"\*\) this option requires an application restart to be applied"=\
 \*\) このオプションを適用するには、アプリケーションの再起動が必要です
dlgSgPreferences.mni"Copy Key"=キーをコピー
dlgSgPreferences.mni"Edit"=編集
dlgSgPreferences.mni"Reset"=リセット
dlgSgPreferences.rbt"Advanced \(merge, rebase, ignore, stashes, tags, history modifications\)"=\
 Advanced \(マージ、リベース、無視、スタッシュ、タグ、履歴の修正\)
dlgSgPreferences.rbt"Auto-detect the system proxy"=システムプロキシを自動検出
dlgSgPreferences.rbt"Automatically download and install updates"=アップデートを自動的にダウンロードしてインストールする
dlgSgPreferences.rbt"Basic \(for simple workflows\)"=Basic \(シンプルなワークフロー向け\)
dlgSgPreferences.rbt"Check and report new updates"=新しいアップデートの確認と通知
dlgSgPreferences.rbt"Dark"=ダーク
dlgSgPreferences.rbt"Do not check for new updates"=\
 アップデートを確認しない
dlgSgPreferences.rbt"Don't use a proxy"=プロキシを使わない
dlgSgPreferences.rbt"Exact case \('Foo' will match 'Foo', but not 'foo'\)"=\
 大文字小文字を区別する
dlgSgPreferences.rbt"Ignore case \('Foo' will match 'Foo' and 'foo'\)"=\
 大文字小文字を区別しない
dlgSgPreferences.rbt"Light"=Light
dlgSgPreferences.rbt"Log Graph"=ロググラフ
dlgSgPreferences.rbt"Log graph \(commit oriented\)"=ロググラフ \(コミット中心\)
dlgSgPreferences.rbt"Prefer light-weight updates stored in home directory"=\
 ホームディレクトリに保存される軽量なアップデート
dlgSgPreferences.rbt"Smart upper case \('FoB' will match 'FooBar', but neither 'foobar' nor 'Fob'\)"=\
 Smart upper case \('FoB' will match 'FooBar', but neither 'foobar' nor 'Fob'\)
dlgSgPreferences.rbt"Standard \(workflow oriented\)"=スタンダード\(ワークフロー中心\)
dlgSgPreferences.rbt"Update SmartGit application in-place \(may require administrator permissions\)"=\
 インプレースでSmartGitを更新する \(管理者権限が必要な場合があります\)
dlgSgPreferences.rbt"Use SmartGit as SSH client"=SmartGitをSSHクライアントとして使用
dlgSgPreferences.rbt"Use following proxy"=以下のプロキシを使用
dlgSgPreferences.rbt"Use system SSH client"=システムSSHクライアントの使用
dlgSgPreferences.rbt"Working Tree"=ワーキングツリー
dlgSgPreferences.rbt"Working tree \(file oriented\)"=作業ツリー \(ファイル中心\)
dlgSgPreferences.tab"Behavior"=動作
dlgSgPreferences.tab"Colors"=色
dlgSgPreferences.tab"Encoding"=エンコーディング
dlgSgPreferences.tab"Font"=フォント
dlgSgPreferences.tab"Languages"=言語
dlgSgPreferences.tab"Pull"=プル
dlgSgPreferences.tab"Push"=プッシュ
dlgSgPreferences.tab"Signing"=署名
dlgSgPreferences.tab"Tag-Grouping"=タグ-グルーピング
dlgSgPreferences.tab"User"=ユーザー
dlgSgPreferences.tle=環境設定
dlgSgProcessKiller.btn"Exit Process"=プロセスを終了
dlgSgProcessKiller.btn"Wait"=Wait
dlgSgProcessKiller.lbl"This usually happens when SmartGit is configured to use the system SSH client, which needs to ask for credentials. Due to technical issues, SmartGit can't read the SSH client's input request and hence hangs.\n\nIf you think the process is hanging, click the Exit Process button, otherwise Wait."=\
 This usually happens when SmartGit is configured to use the system SSH client, which needs to ask for credentials. Due to technical issues, SmartGit can't read the SSH client's input request and hence hangs.\n\nIf you think the process is hanging, click the Exit Process button, otherwise Wait.
dlgSgProcessKiller.tle=Process Not Responding
dlgSgProviderPullRequestCreateNoTargetRepositories.fur=The repository is no GitHub-fork and there are no other remotes which are forks of this repository.
dlgSgProviderPullRequestCreateNoTargetRepositories.hdl=No target repositories found.
dlgSgProviderPullRequestCreateNoTargetRepositories.tle=プルリクエストを作成
dlgSgProviderPullRequestDropConfirmMr.btn"Drop"=Drop
dlgSgProviderPullRequestDropConfirmMr.fur=The merge request itself will not be deleted on the server.
dlgSgProviderPullRequestDropConfirmMr.hdl%1=本当にマージリクエスト$1のローカルコミットを削除しますか?
dlgSgProviderPullRequestDropConfirmMr.tle=Drop Merge Request
dlgSgProviderPullRequestDropConfirmPr.btn"Drop"=Drop
dlgSgProviderPullRequestDropConfirmPr.fur=The pull request itself will not be deleted on the server.
dlgSgProviderPullRequestDropConfirmPr.hdl%1=Do you really want to drop the local commits of pull request $1?
dlgSgProviderPullRequestDropConfirmPr.tle=Drop Pull Request
dlgSgProviderPullRequestRetractMr.btn"Retract"=Retract
dlgSgProviderPullRequestRetractMr.edt"Comment"=コメント
dlgSgProviderPullRequestRetractMr.hdl=マージリクエストの撤回
dlgSgProviderPullRequestRetractMr.inf=Enter the comment which will be logged with the closed merge request.
dlgSgProviderPullRequestRetractMr.tle=マージリクエストの撤回
dlgSgProviderPullRequestRetractPr.btn"Retract"=Retract
dlgSgProviderPullRequestRetractPr.edt"Comment"=コメント
dlgSgProviderPullRequestRetractPr.hdl=プルリクエストの撤回
dlgSgProviderPullRequestRetractPr.inf=Enter the comment which will be logged with the closed pull request.
dlgSgProviderPullRequestRetractPr.tle=プルリクエストの撤回
dlgSgPull.btn"Fetch Only"=フェッチのみ
dlgSgPull.btn"Pull"=プル
dlgSgPull.chk"Fetch from all remotes"=すべてのリモートからフェッチする
dlgSgPull.chk"More Options"=追加のオプション
dlgSgPull.chk"Remember as default for repository"=リポジトリのデフォルトとして記憶する
dlgSgPull.chk"Update existing and fetch new tags"=\
 既存のタグの更新と新しいタグの取得
dlgSgPull.edt"Fetch From"=フェッチ元
dlgSgPull.hdl=リモートリポジトリからコミットをプル
dlgSgPull.inf"In contrast to Fetch Only, Pull will also incorporate the fetched changes \(expand the options below to configure\)."=\
 「フェッチのみ」と対照的に、「プル」ではフェッチされた変更点も取り込まれます。
dlgSgPull.inf"Select the remote repository to pull. In contrast to Fetch Only, Pull will also incorporate the fetched changes \(expand the options below to configure\)."=\
 Select the remote repository to pull. In contrast to Fetch Only, Pull will also incorporate the fetched changes \(expand the options below to configure\).
dlgSgPull.lbl"More Options"=追加のオプション
dlgSgPull.rbt"Merge fetched remote changes"=取得したリモートの変更をマージ
dlgSgPull.rbt"Rebase local branch onto fetched changes"=\
 取得した変更点に合わせてローカルブランチをリベース
dlgSgPull.tle=プル
dlgSgPullConfiguration.btn"Configure"=設定
dlgSgPullConfiguration.chk"Remember as default for other repositories"=\
 Remember as default for other repositories
dlgSgPullConfiguration.hdl=Configure how to pull
dlgSgPullConfiguration.inf=Specify whether to merge or rebase on Pull for the current repository.
dlgSgPullConfiguration.lbl"Merging produces additional 'merge'-commits and is not recommended. It might however be a convention of your repository \(ask the maintainer to find out\)."=\
 Merging produces additional 'merge'-commits and is not recommended. It might however be a convention of your repository \(ask the maintainer to find out\).
dlgSgPullConfiguration.lbl"Rebasing gives a clean linear history and is recommended in general."=\
 Rebasing gives a clean linear history and is recommended in general.
dlgSgPullConfiguration.rbt"Merge"=マージ
dlgSgPullConfiguration.rbt"Rebase"=リベース
dlgSgPullConfiguration.tle=プル設定
dlgSgPullMergeInsteadOfRebase.btn"Merge"=マージ
dlgSgPullMergeInsteadOfRebase.btn"Rebase"=リベース
dlgSgPullMergeInsteadOfRebase.fur%1=リベースの対象となる変更の中に、マージコミット $1 があります。マージコミットをリベースすると、簡単にトラブルが発生します。
dlgSgPullMergeInsteadOfRebase.hdl=Do you want to merge your local changes instead of rebasing?
dlgSgPullMergeInsteadOfRebase.tle=プル
dlgSgPullNoRemoteRepository.btn"Add Remote"=リモートを追加
dlgSgPullNoRemoteRepository.fur=You first need to add a remote repository to pull from.
dlgSgPullNoRemoteRepository.hdl=No remote repository has been found.
dlgSgPullNoRemoteRepository.tle=プル
dlgSgPullOrJustFetch.btn"Fetch"=フェッチ
dlgSgPullOrJustFetch.btn"Pull"=プル
dlgSgPullOrJustFetch.chk"Fetch from all remotes"=すべてのリモートからフェッチする
dlgSgPullOrJustFetch.chk"Update existing and fetch new tags"=\
 既存のタグの更新と新しいタグの取得
dlgSgPullOrJustFetch.fur=You can change the Pull behavior in the Repository Settings.
dlgSgPullOrJustFetch.hdl%1=Do you want to pull or just fetch $1 repositories?
dlgSgPullOrJustFetch.tle=プル
dlgSgPushConfirmSingleBranch.btn"Push"=プッシュ
dlgSgPushConfirmSingleBranch.chk=次回から表示しない
dlgSgPushConfirmSingleBranch.fur%1=1つのブランチが'$1'にプッシュされます。
dlgSgPushConfirmSingleBranch.hdl%1=ブランチ'$1'をプッシュしますか？
dlgSgPushConfirmSingleBranch.tle=プッシュ
dlgSgPushForced.btn"Force Push"=強制プッシュ
dlgSgPushForced.fur=リモートブランチへのプッシュは fast-forward できないので、強制的にプッシュする必要があります。リモートブランチでのコミットは失われます。
dlgSgPushForced.hdl=リモートブランチを強制プッシュ（置き換え）しますか？
dlgSgPushForced.tle=プッシュ
dlgSgPushForcedSvn.btn"Force Push"=強制プッシュ
dlgSgPushForcedSvn.fur=You are about to replace the remote branch. Revisions of that branch might not be \(easily\) accessible anymore.
dlgSgPushForcedSvn.hdl=リモートブランチを強制プッシュ（置き換え）しますか？
dlgSgPushForcedSvn.tle=プッシュ
dlgSgPushOverwriteRemoteBranchConfirm.btn"Push"=プッシュ
dlgSgPushOverwriteRemoteBranchConfirm.chk=Overwrite remote changes
dlgSgPushOverwriteRemoteBranchConfirm.fur=You are about to replace the remote branch, which contains commits that you haven't seen at all. Maybe you want to merge/rebase onto the remote changes before?
dlgSgPushOverwriteRemoteBranchConfirm.hdl=本当にリモートブランチを上書きしますか?
dlgSgPushOverwriteRemoteBranchConfirm.tle=プッシュ
dlgSgPushToNoTagsOrLocalBranches.fur=You can only push tags or local branches.
dlgSgPushToNoTagsOrLocalBranches.hdl=No tags or local branches to push.
dlgSgPushToNoTagsOrLocalBranches.tle=プッシュ先
dlgSgPushToRef.btn"Push"=プッシュ
dlgSgPushToRef.chk"Force pushing \(even if it's not fast-forward\)"=\
 強制プッシュ (fast-forwardでなくても)
dlgSgPushToRef.edt"Push To"=プッシュ先
dlgSgPushToRef.edt"Target Repository"=ターゲットリポジトリ
dlgSgPushToRef.err"Enter the remote location to which the commits of the current branch should be pushed to."=\
 Enter the remote location to which the commits of the current branch should be pushed to.
dlgSgPushToRef.err"Please specify a valid Git ref."=\
 有効なGit refを指定してください。
dlgSgPushToRef.hdl"Push '$1' to a remote repository"=\
 リモートリポジトリに '$1' をプッシュ
dlgSgPushToRef.hdl"Push '$1' to remote '$2'"=Push '$1' to remote '$2'
dlgSgPushToRef.inf=Select the target repository where to push the ref\(s\).
dlgSgPushToRef.rbt"Custom Ref:"=指定のブランチ:
dlgSgPushToRef.rbt"Tracked or matching branch"=追跡中または一致するブランチ
dlgSgPushToRef.tle=プッシュ先
dlgSgPushToRemote.btn"Push"=プッシュ
dlgSgPushToRemote.chk"Force pushing \(even if it's not fast-forward\)"=\
 強制プッシュ (fast-forwardでなくても)
dlgSgPushToRemote.chk"Remove remote branches which don't have a local counterpart"=\
 ローカルと対応するブランチがないリモートブランチを削除する
dlgSgPushToRemote.edt"Target Repository"=ターゲットリポジトリ
dlgSgPushToRemote.hdl%1=別のリモートに '$1' ブランチをプッシュする
dlgSgPushToRemote.inf%1='$1' のすべてのブランチがターゲットリポジトリにプッシュされます。\r\(リモートにローカルと対応するブランチが作成されます。\)
dlgSgPushToRemote.tle=プッシュ先
dlgSgPushToRemoteRemoveTargetBranches.btn"Remove"=除去
dlgSgPushToRemoteRemoveTargetBranches.fur=Removed branches and their commits in the target remote which will be lost afterwards.
dlgSgPushToRemoteRemoveTargetBranches.hdl=本当にターゲットのリモートブランチを削除しますか?
dlgSgPushToRemoteRemoveTargetBranches.tle=プッシュ先
dlgSgPushToRemoteResetTargetBranches.btn"Force Push"=強制プッシュ
dlgSgPushToRemoteResetTargetBranches.fur=Forcing push will overwrite branches and their commits in the target remote which will be lost afterwards.
dlgSgPushToRemoteResetTargetBranches.hdl=Do you really want to reset the target remote branches?
dlgSgPushToRemoteResetTargetBranches.tle=プッシュ先
dlgSgPushTrackingConfigureSingle.btn"Configure"=設定
dlgSgPushTrackingConfigureSingle.btn"Skip"=スキップ
dlgSgPushTrackingConfigureSingle.fur=For your current branch tracking \(its corresponding remote branch\) has not been configured yet. Configuring tracking will keep your local branches in sync with the remote branches.
dlgSgPushTrackingConfigureSingle.hdl%1=Do you want to configure tracking for '$1' branch?
dlgSgPushTrackingConfigureSingle.tle=プッシュ
dlgSgRebase.btn"Branches"=ブランチ
dlgSgRebase.btn"Rebase HEAD to"=Rebase HEAD to
dlgSgRebase.hdl=Rebase HEAD to
dlgSgRebase.inf=Select the commit to which the HEAD commits should be rebased.
dlgSgRebase.tle=リベース
dlgSgRebaseContinueAfterSplittingCommit.btn"Continue"=続ける
dlgSgRebaseContinueAfterSplittingCommit.fur%1=The splitting of commit $1 still is in progress and all changes of this commit have been applied.
dlgSgRebaseContinueAfterSplittingCommit.hdl=Do you want to continue after splitting the commit?
dlgSgRebaseContinueAfterSplittingCommit.tle=リベース
dlgSgRebaseContinueConfirm.btn"Continue Rebase"=Continue Rebase
dlgSgRebaseContinueConfirm.fur=Continue the rebase operation after having resolved all conflicts.
dlgSgRebaseContinueConfirm.hdl=Do you want to continue the rebase?
dlgSgRebaseContinueConfirm.tle=リベース
dlgSgRebaseContinueNothingToCommitContinue.btn"Continue Rebase"=Continue Rebase
dlgSgRebaseContinueNothingToCommitContinue.fur=The repository is in 'rebasing' state, but there is nothing to commit, so you may just continue the Rebase.
dlgSgRebaseContinueNothingToCommitContinue.hdl=Do you want to continue the rebase?
dlgSgRebaseContinueNothingToCommitContinue.tle=リベース
dlgSgRebaseContinueNothingToCommitSkip.btn"Skip Commit"=Skip Commit
dlgSgRebaseContinueNothingToCommitSkip.fur=The repository is in 'rebasing' state, but there is nothing to commit, so you may just skip this rebased commit.
dlgSgRebaseContinueNothingToCommitSkip.hdl=Do you want to skip this rebased commit?
dlgSgRebaseContinueNothingToCommitSkip.tle=リベース
dlgSgRebaseContinuePreserveUntrackedFiles.btn"Commit"=コミット
dlgSgRebaseContinuePreserveUntrackedFiles.btn"Preserve"=Preserve
dlgSgRebaseContinuePreserveUntrackedFiles.fur=Your working tree contains untracked files. You may either choose to preserve them in the working tree or include them for the rebased commit.
dlgSgRebaseContinuePreserveUntrackedFiles.hdl=Do you want to preserve untracked files in your working tree?
dlgSgRebaseContinuePreserveUntrackedFiles.tle=リベース
dlgSgRebaseContinueWithoutApplyingAllChanges.btn"Continue Anyway"=Continue Anyway
dlgSgRebaseContinueWithoutApplyingAllChanges.btn"Put Changes into Index"=Put Changes into Index
dlgSgRebaseContinueWithoutApplyingAllChanges.fur%1=The splitting of commit $1 still is in progress, but not all changes of this commit have been applied.\n\nIf this is intentional, you can continue. Otherwise, you should click 'Put Changes into Index' and review your changes.
dlgSgRebaseContinueWithoutApplyingAllChanges.hdl=Do you want to continue splitting the commit without applying all changes?
dlgSgRebaseContinueWithoutApplyingAllChanges.tle=リベース
dlgSgRebaseHeadToCommitConfirmBc.fur%1=This will apply all commits from the working tree branch '$1' \(HEAD\) onto the selected commit.
dlgSgRebaseHeadToCommitConfirmBc.hdl%1='$1' を選択したコミットにリベースしますか？
dlgSgRebaseHeadToCommitConfirmBr.fur%2=This will apply all commits from the working tree branch '$1' \(HEAD\) to '$2'.
dlgSgRebaseHeadToCommitConfirmBr.hdl%2='$1' を '$2' にリベースしますか？
dlgSgRebaseHeadToCommitConfirm(Br|Bc|Hr|Hc).btn"Rebase HEAD to"=Rebase HEAD to
dlgSgRebaseHeadToCommitConfirm(Br|Bc|Hr|Hc).btn"Rebase Interactively"=Rebase Interactively
dlgSgRebaseHeadToCommitConfirm(Br|Bc|Hr|Hc).tle=Rebase HEAD to Selected Commit
dlgSgRebaseInteractive.btn"Auto-Squash"=自動スカッシュ
dlgSgRebaseInteractive.btn"Edit Message"=メッセージの編集
dlgSgRebaseInteractive.btn"Edit"=編集
dlgSgRebaseInteractive.btn"Move Down"=下へ
dlgSgRebaseInteractive.btn"Move Up"=上へ
dlgSgRebaseInteractive.btn"Rebase"=リベース
dlgSgRebaseInteractive.btn"Remove"=除去
dlgSgRebaseInteractive.btn"Squash"=Squash
dlgSgRebaseInteractive.col"IDs"=IDs
dlgSgRebaseInteractive.col"Message"=メッセージ
dlgSgRebaseInteractive.hdl=Rewrite History
dlgSgRebaseInteractive.inf=Reorder or squash commits according to your needs.
dlgSgRebaseInteractive.mni"Neighboring Commits"=Neighboring Commits
dlgSgRebaseInteractive.mni"To Bottom Commit"=To Bottom Commit
dlgSgRebaseInteractive.mni"To Top Commit"=To Top Commit
dlgSgRebaseInteractive.tle=Rebase Interactive
dlgSgRebaseInteractiveMessage.edt"Commit Message"=コミットメッセージ
dlgSgRebaseInteractiveMessage.hdl=コミットメッセージを編集
dlgSgRebaseInteractiveMessage.inf=Provide the new message for the commit.
dlgSgRebaseInteractiveMessage.tle=メッセージの編集
dlgSgRebaseInteractiveRemoveCommit.btn"Remove"=除去
dlgSgRebaseInteractiveRemoveCommit.fur=It might become hard or impossible to recover the commit again.
dlgSgRebaseInteractiveRemoveCommit.hdl%1=Do you want to remove the selected commit $1?
dlgSgRebaseInteractiveRemoveCommit.tle=Remove Commit
dlgSgRebaseTagCommit.btn"Add Tag"=タグを追加
dlgSgRebaseTagCommit.btn"Skip Tag"=Skip Tag
dlgSgRebaseTagCommit.fur=After the rebase, the remaining commit won't be reachable anymore.
dlgSgRebaseTagCommit.hdl%1=Should commit $1 be tagged?
dlgSgRebaseTagCommit.tle=リベース
dlgSgRebasingAbortConfirm.btn"Abort Rebase"=リベースを中断
dlgSgRebasingAbortConfirm.fur=Your working tree is in 'rebasing' state. You may abort rebasing; if you just want to skip the current patch, use Branch \| Rebase \| Rebase HEAD To instead.\n\nAborting will clean any local modification \(by invoking 'git reset --hard'\)!
dlgSgRebasingAbortConfirm.hdl=Do you want to abort the rebasing?
dlgSgRebasingAbortConfirm.tle=リベース
dlgSgRecursiveStage.btn"Stage"=ステージ
dlgSgRecursiveStage.hdl=作業ツリーの変更をインデックスに保存し、後でコミットできるようにする。
dlgSgRecursiveStage.inf=Select the files to stage to the Index.
dlgSgRecursiveStage.tle=ステージ
dlgSgRecursiveUnstage.btn"Unstage"=アンステージ
dlgSgRecursiveUnstage.hdl=Revert staged changes from the Index to the working tree
dlgSgRecursiveUnstage.inf=Select the files to unstage from the Index.
dlgSgRecursiveUnstage.tle=アンステージ
dlgSgRecursive(Stage|Unstage).col"Directory"=ディレクトリ
dlgSgRecursive(Stage|Unstage).col"Name"=名前
dlgSgRemoteDeleteConfirm.btn"Delete"=削除
dlgSgRemoteDeleteConfirm.fur=This will just delete the link to the remote repository.
dlgSgRemoteDeleteConfirm.hdl%1=リモートリポジトリ'$1'を削除しますか？
dlgSgRemoteDeleteConfirm.tle=リモートリポジトリを削除
dlgSgRemoteFetchMore.btn"Fetch"=フェッチ
dlgSgRemoteFetchMore.col"Branch"=ブランチ
dlgSgRemoteFetchMore.hdl=リモートブランチの取得
dlgSgRemoteFetchMore.inf=リモートリポジトリからフェッチするブランチを選択します。
dlgSgRemoteFetchMore.tle=Fetch More
dlgSgRemoteFetchMoreNoMoreBranches.fur=リモートリポジトリに存在するすべてのブランチは、すでにローカルにも存在します。
dlgSgRemoteFetchMoreNoMoreBranches.hdl=There are no more remote branches to fetch.
dlgSgRemoteFetchMoreNoMoreBranches.tle=Fetch More
dlgSgRemoteProperties.chk"Perform background Poll or Fetch"=バックグラウンドでポールまたはフェッチを実行する
dlgSgRemoteProperties.edt"URL or Path"=URL or Path
dlgSgRemoteProperties.hdl=リモートプロパティの設定
dlgSgRemoteProperties.inf=リモートのURLやその他のプロパティを変更します
dlgSgRemoteProperties.tle=Remote Properties
dlgSgRemoteSelect.edt"Remote"=リモート
dlgSgRemoteSelect.hdl=Initialize remote review database
dlgSgRemoteSelect.inf=Select the remote repository for which you want to initialize the review database.
dlgSgRemoteSelect.tle=Initialize Remote
dlgSgRemoteSetDepth.btn"Set Depth"=深さを設定
dlgSgRemoteSetDepth.edt"Depth"=深さ
dlgSgRemoteSetDepth.hdl=リポジトリの深さを設定
dlgSgRemoteSetDepth.inf=深さを無制限に設定する場合は、大きな数値\(例:100000\)を使用します。
dlgSgRemoteSetDepth.tle=深さの設定
dlgSgRemotesAdd.btn"Add"=追加
dlgSgRemotesAdd.chk"Verify repository connection"=Verify repository connection
dlgSgRemotesAdd.edt"Name"=名前
dlgSgRemotesAdd.edt"URL or Path"=URL or Path
dlgSgRemotesAdd.hdl=リモートリポジトリの追加
dlgSgRemotesAdd.inf=Enter the URL and a short name for the remote repository.
dlgSgRemotesAdd.tle=リモートリポジトリを追加
dlgSgRemove.btn"Remove"=除去
dlgSgRemove.chk"Delete local files"=ローカルファイルの削除(消去)
dlgSgRemove.col"Directory"=ディレクトリ
dlgSgRemove.col"Name"=名前
dlgSgRemove.hdl=リポジトリからをファイル削除
dlgSgRemove.inf=リポジトリや作業ツリーから削除したい（追跡を停止したい）ファイルを選択します。
dlgSgRemove.tle=除去
dlgSgRenameBranch.btn"Rename"=リネーム
dlgSgRenameBranch.edt"Name"=名前
dlgSgRenameBranch.hdl=ブランチの名前を変更する
dlgSgRenameBranch.inf%1=ブランチの新しい名前 '$1' を入力してください。
dlgSgRenameBranch.tle=リネーム
dlgSgRenameFile.btn"Rename"=リネーム
dlgSgRenameFile.edt"Path"=パス
dlgSgRenameFile.hdl=ファイル名を変更する
dlgSgRenameFile.inf=新しいパスとファイル名を入力してください。
dlgSgRenameFile.tle=リネーム
dlgSgRenameRemote.btn"Rename"=リネーム
dlgSgRenameRemote.edt"Name"=名前
dlgSgRenameRemote.hdl=既存のリモートの名前を変更する
dlgSgRenameRemote.inf=選択したリモートの新しい名前を入力します。
dlgSgRenameRemote.tle=リモートリポジトリの名前を変更する
dlgSgRenameRepository.btn"Rename"=リネーム
dlgSgRenameRepository.edt"Name"=名前
dlgSgRenameRepository.hdl=リポジトリの名前を変更する
dlgSgRenameRepository.inf=リポジトリの新しい名前を指定します。リポジトリディレクトリの名前は変更されません。
dlgSgRenameRepository.tle=リネーム
dlgSgRepositoriesSearch.btn"Start Search"=検索
dlgSgRepositoriesSearch.col"Path"=パス
dlgSgRepositoriesSearch.edt"Found repository \(selected ones will be remembered\)"=\
 発見されたリポジトリ\(選択されたものは記憶されます\)
dlgSgRepositoriesSearch.edt"Search In"=Search In
dlgSgRepositoriesSearch.hdl=既存のローカルリポジトリの検索
dlgSgRepositoriesSearch.inf=検索対象のルートディレクトリを指定し、「検索」をクリックします。
dlgSgRepositoriesSearch.tle=リポジトリの検索
dlgSgRepositoryAddGroup.btn"Add"=追加
dlgSgRepositoryAddGroup.edt"Group Name"=グループ名
dlgSgRepositoryAddGroup.hdl=グループ名を入力してください
dlgSgRepositoryAddGroup.inf=グループ作成後は、その中でリポジトリを移動させることができます。
dlgSgRepositoryAddGroup.tle=グループを作成
dlgSgRepositoryClose.btn"Force Close"=Force Close
dlgSgRepositoryClose.fur=現在実行中のGitプロセスは中断されない可能性があることに注意してください。
dlgSgRepositoryClose.hdl=本当に今すぐ閉じますか？
dlgSgRepositoryClose.tle=閉じる
dlgSgRepositoryFrameCloseWithoutPush.btn"Close Now"=今すぐ閉じる
dlgSgRepositoryFrameCloseWithoutPush.chk=次回から表示しない
dlgSgRepositoryFrameCloseWithoutPush.fur=プッシュ可能なコミットがあります。このウィンドウを閉じる前にプッシュする必要はありませんか?
dlgSgRepositoryFrameCloseWithoutPush.hdl=コミットをプッシュせずに終了しますか？
dlgSgRepositoryFrameCloseWithoutPush.tle=閉じる
dlgSgRepositoryOpen.btn"Remove"=除去
dlgSgRepositoryOpen.fur=移動した場合は、削除して新しい場所を追加してください。
dlgSgRepositoryOpen.hdl%1=見つからないリポジトリ'$1'を削除しますか？
dlgSgRepositoryOpen.tle=Repository Opening
dlgSgRepositoryRemoveMultiGroup.fur=Repositories inside a removed group will be moved out of the group.
dlgSgRepositoryRemoveMultiGroup.hdl%1=グループ'$1'を削除しますか？
dlgSgRepositoryRemoveMultiRepo.fur=This will keep the repositories on disk, but just let SmartGit forget about them.
dlgSgRepositoryRemoveMultiRepo.hdl%1=リポジトリ'$1'を削除しますか？
dlgSgRepositoryRemoveMultiRepoMultiGroup.fur=これにより、ディスク上のリポジトリは維持されますが、SmartGitはそのことを忘れてしまいます。削除されたグループの中にあるリポジトリは、グループの外に移動されます。
dlgSgRepositoryRemoveMultiRepoMultiGroup.hdl%2=リポジトリ'$1'とグループ'$2'を削除しますか？
dlgSgRepositoryRemoveMultiRepoSingleGroup.fur=これにより、ディスク上のリポジトリは維持されますが、SmartGitはそのことを忘れてしまいます。削除されたグループの中にあるリポジトリは、グループの外に移動されます。
dlgSgRepositoryRemoveMultiRepoSingleGroup.hdl%2=リポジトリ'$1'とグループ'$2'を削除しますか？
dlgSgRepositoryRemoveSingleGroup.fur=Repositories inside a removed group will be moved out of the group.
dlgSgRepositoryRemoveSingleGroup.hdl%1=グループ'$1'を削除しますか？
dlgSgRepositoryRemoveSingleRepo.fur=This will keep the repositories on disk, but just let SmartGit forget about them.
dlgSgRepositoryRemoveSingleRepo.hdl%1=Do you want to remove the repository "$1"?
dlgSgRepositoryRemoveSingleRepoMultiGroup.fur=これにより、ディスク上のリポジトリは維持されますが、SmartGitはそのことを忘れてしまいます。削除されたグループの中にあるリポジトリは、グループの外に移動されます。
dlgSgRepositoryRemoveSingleRepoMultiGroup.hdl%2=Do you want to remove the repository "$1" and $2 groups?
dlgSgRepositoryRemoveSingleRepoSingleGroup.fur=これにより、ディスク上のリポジトリは維持されますが、SmartGitはそのことを忘れてしまいます。削除されたグループの中にあるリポジトリは、グループの外に移動されます。
dlgSgRepositoryRemoveSingleRepoSingleGroup.hdl%2=Do you want to remove the repository "$1" and the group "$2"?
dlgSgRepositorySettings.chk"Always fetch new commits, tags and branches from submodule"=\
 サブモジュールから常に新しいコミット、タグ、ブランチを取得する
dlgSgRepositorySettings.chk"Initialize new submodules"=新しいサブモジュールを初期化
dlgSgRepositorySettings.chk"Prune obsolete remote tracked branches"=不要になったリモートトラッキングブランチを整理
dlgSgRepositorySettings.chk"Remember as default"=デフォルトとして記憶する
dlgSgRepositorySettings.chk"Sign all commits"=すべてのコミットに署名する
dlgSgRepositorySettings.chk"Update registered submodules"=登録されたサブモジュールを更新する
dlgSgRepositorySettings.edt"Email"=電子メール
dlgSgRepositorySettings.edt"GPG Program"=GPG Program
dlgSgRepositorySettings.edt"Group Patterns"=グループパターン
dlgSgRepositorySettings.edt"Name"=名前
dlgSgRepositorySettings.edt"Signing Key"=署名キー
dlgSgRepositorySettings.edt"Single Patterns"=シングルパターン
dlgSgRepositorySettings.edt"Submodule handling\*"=サブモジュールの取り扱い\*
dlgSgRepositorySettings.edt"Text File Encoding"=テキストファイルのエンコーディング
dlgSgRepositorySettings.err"Please enter a valid, comma-separated list of regular expressions."=\
 Please enter a valid, comma-separated list of regular expressions.
dlgSgRepositorySettings.hdl=効果的なリポジトリ設定の編集
dlgSgRepositorySettings.inf=ここでは、ユーザー設定ファイルとリポジトリに対する効果的なGit設定を確認・編集することができます。\rオプションをユーザー設定として保存するには、「デフォルトとして記憶する」を選択します。
dlgSgRepositorySettings.lbl"Tags, branches and other refs matched by this configuration will be grouped in the File Log and show up in the Commit details. It will also be used for grouping the 'Tags'-category of the Branches view."=\
 この設定で一致したタグ、ブランチ、その他の参照は、ファイルログにまとめられ、コミットの詳細に表示されます。この設定は、ブランチ ビューの"Tags"カテゴリのグループ化にも使用されます。
dlgSgRepositorySettings.tab"Encoding"=エンコーディング
dlgSgRepositorySettings.tab"Pull"=プル
dlgSgRepositorySettings.tab"Push"=プッシュ
dlgSgRepositorySettings.tab"Signing"=署名
dlgSgRepositorySettings.tab"Tag-Grouping"=タグ-グルーピング
dlgSgRepositorySettings.tab"User & Encoding"=ユーザーとエンコーディング
dlgSgRepositorySettings.tab"User"=ユーザー
dlgSgRepositorySettings.tle=リポジトリの設定
dlgSgRepositorySettings.wrn"The name should not contain an email address."=\
 The name should not contain an email address.
dlgSgResetAdv.btn"Reset"=リセット
dlgSgResetAdv.chk"Thoroughly fix line endings according to .gitattributes"=\
 .gitattributesに従い改行コードを修正する
dlgSgResetAdv.chk"Thoroughly fix line-endings according to .gitattributes"=\
 Thoroughly fix line-endings according to .gitattributes
dlgSgResetAdv.hdl%1=コミット $1 にリセット
dlgSgResetAdv.inf=現在のブランチのHEADを選択したコミットにリセットし、オプションでインデックスと作業ツリーを更新します。
dlgSgResetAdv.rbt"Don't touch the Index nor the working tree - 'soft'"=\
 インデックスにもワーキングツリーにも触れない - 'soft'
dlgSgResetAdv.rbt"Reset the Index and the working tree - 'hard'"=\
 インデックスと作業ツリーをリセットする  - 'hard'
dlgSgResetAdv.rbt"Reset the Index and the working tree, skipping modified files - 'keep'"=\
 インデックスと作業ツリーをリセットし、変更されたファイルをスキップする - 'keep'
dlgSgResetAdv.rbt"Reset the Index and the working tree, skipping working tree modified files - 'merge'"=\
 インデックスと作業ツリーをリセットし、作業ツリーの修正ファイルをスキップする - 'merge'
dlgSgResetAdv.rbt"Reset the Index but not the working tree - 'mixed'"=\
 インデックスをリセットするが、作業ツリーはリセットしない - 'mixed'
dlgSgResetAdv.tle=リセット
dlgSgResetConfirm.btn"Reset"=リセット
dlgSgResetConfirm.fur=現在のステージング領域とローカルの変更は失われます
dlgSgResetConfirm.hdl%1=HEADを コミット'$1' にリセットしますか？
dlgSgResetConfirm.tle=リセット
dlgSgResolve.btn"Resolve"=Resolve
dlgSgResolve.chk"Stage file \(reset conflict state\)"=ファイルをステージ \(競合状態のリセット\)
dlgSgResolve.edt"Content"=Content
dlgSgResolve.hdl=Resolve Conflict
dlgSgResolve.inf=Select which content to use for the resolved file\(s\).
dlgSgResolve.rbt"Leave as is"=Leave as is
dlgSgResolve.rbt"Open Conflict Solver"=Open Conflict Solver
dlgSgResolve.rbt"Set to $1 \(\"ours\", $2\)"=Set to $1 \("ours", $2\)
dlgSgResolve.rbt"Set to $1 \(\"theirs\", $2\)"=Set to $1 \("theirs", $2\)
dlgSgResolve.rbt"Set to rebase target \(\"theirs\", $1\)"=\
 Set to rebase target \("theirs", $1\)
dlgSgResolve.rbt"Set to rebased branch '$1' \(\"ours\", $2\)"=\
 Set to rebased branch '$1' \("ours", $2\)
dlgSgResolve.tle=Resolve
dlgSgResolveManuallyModifiedSingle.btn"Overwrite"=Overwrite
dlgSgResolveManuallyModifiedSingle.fur%1=$1 seems to contain manual conflict resolutions. They will be lost when continuing.
dlgSgResolveManuallyModifiedSingle.hdl=Do you want to overwrite your manual conflict resolution?
dlgSgResolveManuallyModifiedSingle.tle=Resolve
dlgSgResolveSubmodule.btn"Resolve"=Resolve
dlgSgResolveSubmodule.hdl=Resolve Conflict
dlgSgResolveSubmodule.inf=Select to which submodule commit you want to resolve.
dlgSgResolveSubmodule.rbt"Check out and set submodule pointer to 'theirs' version"=\
 Check out and set submodule pointer to 'theirs' version
dlgSgResolveSubmodule.rbt"Leave submodule pointer as is"=Leave submodule pointer as is
dlgSgResolveSubmodule.tle=Resolve
dlgSgRevealCommitLocalOrTracked.btn"Reveal Local"=ローカルを表示
dlgSgRevealCommitLocalOrTracked.btn"Reveal Tracked"=追跡ブランチを表示
dlgSgRevealCommitLocalOrTracked.chk=常にローカルブランチを表示する
dlgSgRevealCommitLocalOrTracked.fur%2=どちらを表示するかを選択してください。\r'$1'\r'$2'
dlgSgRevealCommitLocalOrTracked.hdl=ローカルと追跡されたブランチのどちらを表示しますか？
dlgSgRevealCommitLocalOrTracked.tle=コミットを表示する
dlgSgRevertAndCommitConfirmSingle.btn"Revert && Commit"=Revert && Commit
dlgSgRevertAndCommitConfirmSingle.btn"Revert"=Revert
dlgSgRevertAndCommitConfirmSingle.fur=This will undo the changes introduced with the selected commit.
dlgSgRevertAndCommitConfirmSingle.hdl=Do you want to revert the selected commit?
dlgSgRevertAndCommitConfirmSingle.tle=Revert
dlgSgRevertInProgress.fur=You have to finish the Revert before you can continue. To finish the Revert use Commit, to abort use Discard.
dlgSgRevertInProgress.hdl=There is currently a Revert in progress.
dlgSgRevertInProgress.tle=Revert
dlgSgRevertNotAllConflictsResolved.chk=次回から表示しない
dlgSgRevertNotAllConflictsResolved.fur=You may need to resolve the conflicts before proceeding.
dlgSgRevertNotAllConflictsResolved.hdl=Reverting failed because of conflicts.
dlgSgRevertNotAllConflictsResolved.tle=Revert
dlgSgReviewCommentAdd.btn"Add"=追加
dlgSgReviewCommentAdd.hdl=コメントの追加
dlgSgReviewCommentAdd.tle=コメントを追加
dlgSgReviewCommentEdit.btn"Edit"=編集
dlgSgReviewCommentEdit.hdl=Edit comment
dlgSgReviewCommentEdit.tle=Edit Comment
dlgSgReviewCommentReply.btn"Reply"=返信
dlgSgReviewCommentReply.hdl=Reply to selected comment
dlgSgReviewCommentReply.tle=Reply To Comment
dlgSgReviewComment(Add|Edit|Reply).edt"Text"=テキスト
dlgSgReviewComment(Add|Edit|Reply).inf=Enter the text of the comment.
dlgSgReviewConfigureDisposeDatabase.btn"Dispose"=Dispose
dlgSgReviewConfigureDisposeDatabase.fur=This will disable the Reviewing system and unpushed local data will be lost.
dlgSgReviewConfigureDisposeDatabase.hdl=本当にローカルレビューのデータをすべて廃棄しますか？
dlgSgReviewConfigureDisposeDatabase.tle=Dispose Database
dlgSgReviewConfigureIntializeNew.btn"Initialize"=初期化
dlgSgReviewConfigureIntializeNew.fur=これにより、現在のリポジトリに新しい レビューデータベースが作成され、後で他のリモートにプッシュされる可能性があります。
dlgSgReviewConfigureIntializeNew.hdl=新しいレビューデータベースを初期化しますか？
dlgSgReviewConfigureIntializeNew.tle=レビューシステムの設定
dlgSgReviewConfigureWhat.btn"Dispose Database"=Dispose Database
dlgSgReviewConfigureWhat.btn"Edit Users"=ユーザーの編集
dlgSgReviewConfigureWhat.btn"Initialize a Remote"=Initialize a Remote
dlgSgReviewConfigureWhat.fur=ユーザーデータベースでは、エイリアス（@mikeなど）を定義することができ、レビューコメントの中でチームメイトに声をかけやすくなります。
dlgSgReviewConfigureWhat.hdl=設定したい内容を選択してください。
dlgSgReviewConfigureWhat.tle=レビューデータベースの設定
dlgSgReviewPullRequestClose.edt"Comment"=コメント
dlgSgReviewPullRequestClose.hdl=プルリクエストを閉じる
dlgSgReviewPullRequestClose.inf=Enter the comment which will be logged when closing the pull request.
dlgSgReviewPullRequestClose.tle=プルリクエストを閉じる
dlgSgReviewPullRequestCreate.btn"Create"=作成
dlgSgReviewPullRequestCreate.edt"Assignees"=Assignees
dlgSgReviewPullRequestCreate.edt"Message"=メッセージ
dlgSgReviewPullRequestCreate.err"Unknown user '$1'."=不明なユーザー '$1'
dlgSgReviewPullRequestCreate.hdl=プルリクエストを作成
dlgSgReviewPullRequestCreate.inf=プルリクエストは、あるブランチを別のブランチに統合することを提案するものです。
dlgSgReviewPullRequestCreate.lbl"The message will be displayed for the pull request node and will be the default commit message when integrating the pull request."=\
 The message will be displayed for the pull request node and will be the default commit message when integrating the pull request.
dlgSgReviewPullRequestCreate.lbl"The pull request will be highlighted to those users which are listed as assignees."=\
 プルリクエストは、担当者としてリストされているユーザーに対してハイライト表示されます。
dlgSgReviewPullRequestCreate.tle=プルリクエストを作成
dlgSgReviewPullRequestState.btn"Assign"=割り当て
dlgSgReviewPullRequestState.edt"Assignees"=Assignees
dlgSgReviewPullRequestState.edt"Comment"=コメント
dlgSgReviewPullRequestState.err"Unknown user '$1'."=不明なユーザー '$1'
dlgSgReviewPullRequestState.hdl=Assign Pull Request
dlgSgReviewPullRequestState.inf=Enter the user\(s\) to which the Pull Request should be assigned to.
dlgSgReviewPullRequestState.tle=割り当て
dlgSgReviewUserAddEdit.edt"Aliases"=エイリアス
dlgSgReviewUserAddEdit.edt"Contact URI"=連絡先URI
dlgSgReviewUserAddEdit.edt"Email"=電子メール
dlgSgReviewUserAddEdit.edt"Name"=名前
dlgSgReviewUserAddEdit.err"Email address is not valid."=Email address is not valid.
dlgSgReviewUserAddEdit.err"Enter at least one alias."=Enter at least one alias.
dlgSgReviewUserAddEdit.hdl=ユーザの編集
dlgSgReviewUserAddEdit.inf=ユーザーの名前とメールアドレス（Gitで使用されているもの）、スペースまたはカンマで区切られた1つ以上のエイリアス、およびオプションの連絡先情報を入力します。
dlgSgReviewUserAddEdit.lbl"Aliases have to be alphanumeric and can be used in comments, like '@bob please check'."=\
 エイリアスは英数字でなければなりません。"@bob please check" のようにコメントに使用することができます。
dlgSgReviewUserAddEdit.lbl"Contact URIs are the primary way to contact users through SmartGit, e.g. 'mailto:bob@office.com' or 'skype:bob?chat'."=\
 連絡先URIは、SmartGitを通じてユーザーに連絡を取るための主要な手段です。例:'mailto:bob@office.com'   'skype:bob?chat'
dlgSgReviewUserAddEdit.tle=編集
dlgSgReviewUsersEdit.btn"Add"=追加
dlgSgReviewUsersEdit.btn"Edit"=編集
dlgSgReviewUsersEdit.btn"Import"=インポート
dlgSgReviewUsersEdit.btn"Remove"=除去
dlgSgReviewUsersEdit.col"Aliases"=エイリアス
dlgSgReviewUsersEdit.col"Email"=電子メール
dlgSgReviewUsersEdit.col"Name"=名前
dlgSgReviewUsersEdit.hdl=レビューデータベースのユーザー設定
dlgSgReviewUsersEdit.inf=ユーザーは、コメント文に使用されるエイリアスを持つことができ、オプションで連絡先情報を持つことができます。
dlgSgReviewUsersEdit.tle=Users設定
dlgSgSelectBranch.edt"Tracked Branch"=追跡されたブランチ
dlgSgSelectBranch.hdl=Select tracked branch
dlgSgSelectBranch.inf%1='$1' で追跡するブランチを選択します。
dlgSgSelectBranch.tle=追跡ブランチの設定
dlgSgSetup.btn"Configure Proxy"=プロキシ設定
dlgSgSetup.btn"Exit"=終了
dlgSgSetup.chk"Automatically send 'crash footprints' after an internal error has occurred"=\
 内部エラー発生後、自動的に「クラッシュフットプリント」を送信
dlgSgSetup.chk"I understand and agree to all terms and conditions of the"=\
 すべての条件を理解し、同意します。
dlgSgSetup.chk"Register existing license"=既存のライセンスを登録する
dlgSgSetup.chk"Send 'crash footprints' after an internal error has occurred"=\
 Send 'crash footprints' after an internal error has occurred
dlgSgSetup.chk"Send usage statistics"=使用状況の統計情報の送信
dlgSgSetup.chk"Use gravatar.com to show images for the users"=\
 gravatar.comを使用してユーザーアイコンを表示する
dlgSgSetup.edt"Email"=電子メール
dlgSgSetup.edt"Git Executable"=Git 実行ファイル
dlgSgSetup.edt"Hg Executable"=Hg Executable
dlgSgSetup.edt"License File"=ライセンスファイル
dlgSgSetup.edt"Repository search"=Repository search
dlgSgSetup.edt"User Name"=ユーザ名
dlgSgSetup.inf"Decide what SmartGit window you prefer. You can change this option later in the preferences."=\
 SmartGitのどのウィンドウを使用するかを決めます。このオプションは、後で環境設定で変更することができます。
dlgSgSetup.inf"If you are using SSH to connect to other Git repositories, select what SSH client to use. You can change it later in the Preferences."=\
 SSHを使って他のGitリポジトリに接続する場合は、使用するSSHクライアントを選択します。この設定は後から「環境設定」で変更できます。
dlgSgSetup.inf"Please review the following privacy options. You can change them later in the preferences."=\
 以下のプライバシーに関するオプションをご確認ください。後で環境設定で変更することができます。
dlgSgSetup.inf"Please wait a few moments while searching for a Git installation."=\
 Please wait a few moments while searching for a Git or Hg installation.
dlgSgSetup.inf"SmartGit requires compatible Git installations on your system. Please specify the paths to your 'git' executable."=\
 SmartGitは、お使いのシステムに互換性のあるGitがインストールされている必要があります。'git'の実行ファイルのパスを指定してください。
dlgSgSetup.inf"User name and email will be stored as part of your commits. Here you can configure the default values which are stored in .gitconfig."=\
 ユーザー名とメールアドレスは、コミットの一部として保存されます。ここでは、.gitconfig に保存されるデフォルト値を設定することができます。
dlgSgSetup.inf"Welcome to SmartGit! Please confirm that you are accepting the license agreement."=\
 SmartGitへようこそ! 使用許諾契約に同意されることをご確認ください。
dlgSgSetup.lbl"Please help to improve SmartGit's quality by automatically sending 'crash footprints' which do not contain any sensitive information. You can change this option later in the preferences.\n\nA 'crash footprint' contains details about your machine \(e.g. version of operating system\), SmartGit's version/build number, the JVM state and where the internal error occurred.\n\nIt contains NO POTENTIALLY SENSITIVE INFORMATION like user names, email addresses, file contents, file paths or server names."=\
 SmartGitの品質向上のために、機密情報を含まない「クラッシュフットプリント」を自動的に送信してください。クラッシュフットプリント」には、お使いのマシンの詳細（オペレーティングシステムのバージョンなど）、SmartGitのバージョン/ビルド番号、JVMの状態、内部エラーが発生した場所などが含まれますが、ユーザー名、メールアドレス、ファイルの内容、ファイルパス、サーバー名などの機密情報は一切含まれません。
dlgSgSetup.lbl"You confirm that you will use SmartGit solely for non-commercial purposes."=\
 お客様は、SmartGitを非商業的な目的でのみ使用することを確認します。
dlgSgSetup.lbl"You have purchased a SmartGit license and are eligible to use SmartGit for both commercial and non-commercial purposes."=\
 お客様は、SmartGitのライセンスを購入し、商用・非商用を問わず、SmartGitを使用することができます。
dlgSgSetup.lbl"You may try SmartGit free of charge for 30 days."=\
 You may try SmartGit free of charge for 30 days.
dlgSgSetup.rbt"Commits \(Log History\)"=Commits \(Log History\)
dlgSgSetup.rbt"Free SmartGit evaluation for commercial use"=\
 Free SmartGit evaluation for commercial use
dlgSgSetup.rbt"Log Graph \(commit oriented\)"=ロググラフ \(コミット中心\)
dlgSgSetup.rbt"Non-commercial use only \(most features, no support\)"=\
 Non-commercial use only \(most features, no support\)
dlgSgSetup.rbt"Registered user, commercial use \(all features, support\)"=\
 Registered user, commercial use \(all features, support\)
dlgSgSetup.rbt"Standard \(workflow oriented\)"=スタンダード\(ワークフロー中心\)
dlgSgSetup.rbt"Undecided"=Undecided
dlgSgSetup.rbt"Use SmartGit as SSH client"=SmartGitをSSHクライアントとして使用
dlgSgSetup.rbt"Use system SSH client"=システムSSHクライアントの使用
dlgSgSetup.rbt"Working tree \(file oriented\)"=作業ツリー \(ファイル中心\)
dlgSgSetup.tle=Setup SmartGit
dlgSgShowLocalChanges.btn"Compare"=比較
dlgSgShowLocalChanges.hdl=File preview.html.erb modified in Index and working tree
dlgSgShowLocalChanges.inf=Select the file states to compare.
dlgSgShowLocalChanges.rbt"HEAD vs. Index"=HEAD vs. Index
dlgSgShowLocalChanges.rbt"HEAD vs. Working Tree"=HEAD vs. Working Tree
dlgSgShowLocalChanges.rbt"Index vs. Working Tree"=Index vs. Working Tree
dlgSgShowLocalChanges.tle=比較する
dlgSgSplitOffFiles.btn"JIRA"=JIRA
dlgSgSplitOffFiles.btn"Split Off"=Split Off
dlgSgSplitOffFiles.edt"Commit Message"=コミットメッセージ
dlgSgSplitOffFiles.hdl=Move files to a second commit
dlgSgSplitOffFiles.inf=Provide the message for the second commit that should contain the changes from the selected files.
dlgSgSplitOffFiles.tle=Split Off Files
dlgSgSshCredentials.btn"Login"=ログイン
dlgSgSshCredentials.chk"Store passphrase"=パスフレーズを保存する
dlgSgSshCredentials.chk"Store password"=パスワードの保存
dlgSgSshCredentials.edt"Authentication Type"=認証タイプ
dlgSgSshCredentials.edt"Passphrase"=パスフレーズ
dlgSgSshCredentials.edt"Password"=パスワード
dlgSgSshCredentials.edt"Private Key File"=秘密鍵ファイル
dlgSgSshCredentials.hdl=SSH Credentials
dlgSgSshCredentials.inf=ユーザー「root」としてSSHサーバー「git」を認証するための認証情報を入力します。
dlgSgSshCredentials.rbt"Password"=パスワード
dlgSgSshCredentials.rbt"Private Key"=秘密鍵
dlgSgSshCredentials.tle=SSH認証
dlgSgSshCredentials.wrn"$1"=$1
dlgSgStageNoFilesFound.fur=Could not find files with modified working tree, untracked or missing files.
dlgSgStageNoFilesFound.hdl=No files found that could be staged.
dlgSgStageNoFilesFound.tle=ステージ
dlgSgStashAll.btn"+ Keep Index"=+ インデックスを残す
dlgSgStashAll.btn"+ Keep Working Tree"=+ ワーキングツリーを残す
dlgSgStashAll.btn"Stash All"=すべての変更を隠す
dlgSgStashAll.btn"Stash Selection"=選択した変更を隠す
dlgSgStashAll.edt"Message"=メッセージ
dlgSgStashAll.hdl=インデックスとワーキングツリーの変更をスタッシュ
dlgSgStashAll.inf=保存されたスタッシュは後で適用することができます。デフォルトでは、インデックスとワーキングツリーがクリーンアップされますが、インデックスを残すか、両方を残すこともできます。
dlgSgStashAll.tle=スタッシュに保存
dlgSgStashApply.btn"Apply && Drop"=適用してドロップ
dlgSgStashApply.btn"Apply"=適用
dlgSgStashApply.chk"Restore Index"=インデックスを復元
dlgSgStashApply.hdl"Apply a previously saved stash"=以前に保存したスタッシュを適用
dlgSgStashApply.hdl"Apply the latest saved stash"=最新の保存されたスタッシュを適用する
dlgSgStashApply.inf=Decide how to apply the stash to the Index or working tree.
dlgSgStashApply.tle=スタッシュを適用
dlgSgStashApplyWithoutRestoringIndex.btn"Try Without Restoring Index"=Try Without Restoring Index
dlgSgStashApplyWithoutRestoringIndex.fur=Restoring the index failed while applying the patch.
dlgSgStashApplyWithoutRestoringIndex.hdl=Should the stash been applied without restoring the index?
dlgSgStashApplyWithoutRestoringIndex.tle=スタッシュを適用
dlgSgStashOnDemandConfirmation.btn"Discard"=破棄
dlgSgStashOnDemandConfirmation.btn"Save Stash"=スタッシュに保存
dlgSgStashOnDemandConfirmation.chk=自動的にスタッシュを保存
dlgSgStashOnDemandConfirmation.fur=後で手動で再適用するためのに変更をスタッシュに退避するか、変更を廃棄するか選択してください。
dlgSgStashOnDemandConfirmation.hdl=ワーキングツリー/Indexの変更をどのようにしますか？
dlgSgStashOnDemandConfirmation.tle=リセット
dlgSgStashOnDemandLocalChangesCantBeReapplied.fur=Once you have concluded the Pull, you should manually apply the latest stash to get your local changes back into the working tree.
dlgSgStashOnDemandLocalChangesCantBeReapplied.hdl=Your local changes have been stashed away, but could not be reapplied.
dlgSgStashOnDemandLocalChangesCantBeReapplied.tle=プル
dlgSgStashRename.btn"Rename"=リネーム
dlgSgStashRename.edt"Message"=メッセージ
dlgSgStashRename.hdl=リネーム
dlgSgStashRename.inf=スタッシュの新しいメッセージを入力してください
dlgSgStashRename.tle=リネーム
dlgSgStashesDropConfirm.btn"Drop Stash"=スタッシュを削除
dlgSgStashesDropConfirm.fur=スタッシュに保存された変更内容は失われます。
dlgSgStashesDropConfirm.hdl=選択したスタッシュを削除しますか？
dlgSgStashesDropConfirm.tle=スタッシュを削除
dlgSgSubmoduleAdd.chk"Map SVN trunk, tags and branches to Git"=\
 Map SVN trunk, tags and branches to Git
dlgSgSubmoduleAdd.edt"Branch"=ブランチ
dlgSgSubmoduleAdd.edt"Local Directory"=Local Directory
dlgSgSubmoduleAdd.edt"Local Path"=Local Path
dlgSgSubmoduleAdd.edt"Repository URL"=リポジトリ URL
dlgSgSubmoduleAdd.edt"URL"=URL
dlgSgSubmoduleAdd.inf"Provide the path where the submodule should be added relative to the outer repository root directory."=\
 Provide the path where the submodule should be added relative to the outer repository root directory.
dlgSgSubmoduleAdd.inf"Specify the repository to clone as submodule."=\
 サブモジュールとしてクローンするリポジトリを指定します。
dlgSgSubmoduleAdd.rbt"Local repository"=ローカルリポジトリ
dlgSgSubmoduleAdd.rbt"Remote repository"=リモートリポジトリ
dlgSgSubmoduleAdd.tle=サブモジュールを追加
dlgSgSubmoduleDeinitConfirm.btn"Deinit"=Deinit
dlgSgSubmoduleDeinitConfirm.fur=The submodule will be skipped from the working tree. To get rid from the \(remote\) repository, you have to use Unregister instead.
dlgSgSubmoduleDeinitConfirm.hdl%1=Do you want to deinit submodule '$1'?
dlgSgSubmoduleDeinitConfirm.tle=Deinit Submodule
dlgSgSubmoduleResetConfirm.btn"Reset"=リセット
dlgSgSubmoduleResetConfirm.fur=The corresponding commit will be checked out, so the submodule content will match the content of the registered commit.
dlgSgSubmoduleResetConfirm.hdl%1=Do you want to reset submodule '$1' to the commit registered in the repository?
dlgSgSubmoduleResetConfirm.tle=Reset Submodule
dlgSgSvnClientCertificate.btn"Login"=ログイン
dlgSgSvnClientCertificate.chk"Store passphrase"=パスフレーズを保存する
dlgSgSvnClientCertificate.edt"Certificate"=証明書
dlgSgSvnClientCertificate.edt"Passphrase"=パスフレーズ
dlgSgSvnClientCertificate.hdl=クライアント証明書
dlgSgSvnClientCertificate.inf%1=SVNリポジトリ'$1'への認証用クライアント証明書を提供します。
dlgSgSvnClientCertificate.tle=SVN認証
dlgSgSvnClientCertificate.wrn"Authentication to the SVN repository '$1' failed with error: $2"=\
 SVN リポジトリ '$1' への認証に失敗し、次のエラーが発生しました: '$2'
dlgSgSvnSslFingerprintChanged.btn"Accept"=Accept
dlgSgSvnSslFingerprintChanged.btn"Reject"=Reject
dlgSgSvnSslFingerprintChanged.edt"MD5 fingerprint"=MD5 fingerprint
dlgSgSvnSslFingerprintChanged.edt"SHA fingerprint"=SHA フィンガープリント
dlgSgSvnSslFingerprintChanged.edt"Server"=サーバ
dlgSgSvnSslFingerprintChanged.lbl"The server fingerprint has changed! Is the change correct?"=\
 サーバーのフィンガープリントが変更されました!この変更は正しいですか？
dlgSgSvnSslFingerprintChanged.lbl"This might indicate a security problem! When in doubt, contact your server administrator."=\
 This might indicate a security problem! When in doubt, contact your server administrator.
dlgSgSvnSslFingerprintChanged.tle=SVN認証
dlgSgSyncConfirm.btn"Synchronize"=同期
dlgSgSyncConfirm.chk=次回から表示しない
dlgSgSyncConfirm.fur=まず、ローカルの変更がプッシュされ、次に可能性のあるリモートの変更がプルされます。\r通常のプッシュに比べて優れているのは、リモートの変更が原因で失敗した場合、それらが自動的にプルされることです。
dlgSgSyncConfirm.hdl=同期を実行しますか？
dlgSgSyncConfirm.tle=同期
dlgSgTagAdd.btn"Add Tag && Push"=タグを追加してプッシュ
dlgSgTagAdd.btn"Add Tag"=タグを追加
dlgSgTagAdd.edt"Annotated Tag Message"=注釈付きタグメッセージ
dlgSgTagAdd.edt"Tag"=タグ
dlgSgTagAdd.err"The name must not end with a slash or dot."=\
 The name must not end with a slash or dot.
dlgSgTagAdd.hdl=現在のHEADコミットにタグを追加
dlgSgTagAdd.inf=Enter the name of the tag to create. If entering a message, an annotated tag is created.
dlgSgTagAdd.tle=タグを追加
dlgSgTagAddOverwrite.btn"Overwrite"=上書き
dlgSgTagAddOverwrite.fur='キャンセル'をクリックすると、別のタグ名を選択できます。
dlgSgTagAddOverwrite.hdl%1=The tag '$1' already exists. Do you want to overwrite it?
dlgSgTagAddOverwrite.tle=タグを追加
dlgSgTagDeleteConfirmSingle.btn"Delete"=削除
dlgSgTagDeleteConfirmSingle.chk%1=リモート '$1' から削除
dlgSgTagDeleteConfirmSingle.fur=You will not be able to restore it.
dlgSgTagDeleteConfirmSingle.hdl%1=タグ'$1'を削除しますか？
dlgSgTagDeleteConfirmSingle.tle=削除
dlgSgToolAdd.edt"Keyboard Shortcut"=キーボード ショートカット
dlgSgToolAdd.hdl=外部ツールの追加
dlgSgToolAdd.mni"2nd Commit ID or Ref"=2nd Commit ID or Ref
dlgSgToolAdd.tle=追加
dlgSgToolEdit.edt"Keyboard Shortcut"=キーボード ショートカット
dlgSgToolEdit.err"Please enter the name for this command."=\
 Please enter the name for this command.
dlgSgToolEdit.hdl=外部ツールの編集
dlgSgToolEdit.tle=編集
dlgSgTool(Add|Edit).btn"Clear"=クリア
dlgSgTool(Add|Edit).chk"Can be used by the Open command"=\
 「開く」コマンドで使用可能
dlgSgTool(Add|Edit).chk"Request confirmation before invoking:"=起動する前に確認を求める
dlgSgTool(Add|Edit).chk"Show output and wait until finished"=\
 出力を表示し、終了するまで待機する
dlgSgTool(Add|Edit).edt"Accelerator"=Accelerator
dlgSgTool(Add|Edit).edt"Applies To"=適用対象
dlgSgTool(Add|Edit).edt"Arguments"=引数
dlgSgTool(Add|Edit).edt"Command"=コマンド
dlgSgTool(Add|Edit).edt"Handles"=対象
dlgSgTool(Add|Edit).edt"Menu Item Name"=メニュー項目名
dlgSgTool(Add|Edit).inf=ツールメニューの項目名、実行するコマンド、その引数を定義します。\r引数は、そのツールをどの選択項目に対して使用するかを定義します。
dlgSgTool(Add|Edit).lbl"Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html"=\
 有効なワイルドカードは下記のとおりです。複数のパターンはコンマで区切ります。\r例：*.txt,*.html \r ? (任意の1文字) \r * (任意の数の任意の文字)
dlgSgTool(Add|Edit).mni"2nd Commit ID or Ref \(optional\)"=\
 2番目のコミットIDまたはRef \(オプション\)
dlgSgTool(Add|Edit).mni"Commit ID or Ref"=コミットIDまたはRef
dlgSgTool(Add|Edit).mni"Configured Text File Encoding"=設定されたテキストファイルのエンコーディング
dlgSgTool(Add|Edit).mni"File or Directory Name"=ファイル名またはディレクトリ名
dlgSgTool(Add|Edit).mni"File or Directory Path"=ファイルまたはディレクトリのパス
dlgSgTool(Add|Edit).mni"File or Directory URI"=ファイルまたはディレクトリのURI
dlgSgTool(Add|Edit).mni"Git Executable"=Git 実行ファイル
dlgSgTool(Add|Edit).mni"Git Installation"=Git のインストール先
dlgSgTool(Add|Edit).mni"Hg Executable"=Hg 実行ファイル
dlgSgTool(Add|Edit).mni"Hg Installation"=Hg のインストール先
dlgSgTool(Add|Edit).mni"Remote \(Push\) URL"=リモート \(Push\) URL
dlgSgTool(Add|Edit).mni"Repository Root Path"=リポジトリルートパス
dlgSgTool(Add|Edit).mni"Selection File"=選択されたファイル
dlgSgTool(Add|Edit).mni"Show Directory Selection Dialog"=ディレクトリ選択ダイアログを表示する
dlgSgTool(Add|Edit).mni"Show Open File Dialog"=ファイルを開くダイアログを表示する
dlgSgTool(Add|Edit).mni"Show Save File Dialog"=ファイル保存ダイアログを表示する
dlgSgTool(Add|Edit).mni"SmartGit Installation"=SmartGitのインストール先
dlgSgTool(Add|Edit).rbt"Both"=両方
dlgSgTool(Add|Edit).rbt"Directories"=ディレクトリ
dlgSgTool(Add|Edit).rbt"Files"=ファイル
dlgSgTool(Add|Edit).rbt"Refs"=Refs
dlgSgTool(Add|Edit).rbt"SHAs"=SHAs
dlgSgUndoLastCommitConfirm.btn"Undo"=取り消し\(Undo\)
dlgSgUndoLastCommitConfirm.fur"Message: $1"=Message: $1
dlgSgUndoLastCommitConfirm.fur"Undoing an already pushed commit might cause serious problems!\n\nMessage: $1"=\
 Undoing an already pushed commit might cause serious problems!\n\nMessage: $1
dlgSgUndoLastCommitConfirm.hdl=Do you want to undo the last local commit?
dlgSgUndoLastCommitConfirm.tle=直前のコミットを元に戻す
dlgSgUnstageNoFilesFound.fur=Could not find files with staged changes.
dlgSgUnstageNoFilesFound.hdl=No files found that could be unstaged.
dlgSgUnstageNoFilesFound.tle=アンステージ
dlgSgWelcome.chk"Show this dialog if no repository was opened"=\
 リポジトリが開かれていない場合にこのダイアログを表示する
dlgSgWelcome.hdl=何をしますか？
dlgSgWelcome.inf=新規のローカルリポジトリを開くか、リモートリポジトリをクローンするか、既存のリポジトリを開くかを選択します。
dlgSgWelcome.rbt"Add an existing local or create a new repository"=\
 既存のローカルリポジトリの追加又は新しいリポジトリを作成する
dlgSgWelcome.rbt"Clone existing repository"=既存のリポジトリをクローンする
dlgSgWelcome.rbt"Reopen previously used repository:"=以前使用していたリポジトリを開く
dlgSgWelcome.tle=SmartGitへようこそ
dlgSgWorktreeAdd.edt"Branch"=ブランチ
dlgSgWorktreeAdd.edt"Directory"=ディレクトリ
dlgSgWorktreeAdd.hdl=Create another worktree from this repository
dlgSgWorktreeAdd.inf=Select the branch and directory to use for the new worktree.
dlgSgWorktreeAdd.tle=ワークツリーを追加
dlgSgWorktreePruneNoWorktree.fur=All your worktrees are still available.
dlgSgWorktreePruneNoWorktree.hdl=No worktree to prune.
dlgSgWorktreePruneNoWorktree.tle=廃止されたワークツリーを整理する
dlgShPushTrackingLocalSvnBranches.btn"Push as New"=Push as New
dlgShPushTrackingLocalSvnBranches.btn"Push onto Existing"=Push onto Existing
dlgShPushTrackingLocalSvnBranches.fur=You are going to push local branches back to the SVN repository. These branches may either be pushed as new branches or onto their existing SVN counterparts \(recommended in most cases\).
dlgShPushTrackingLocalSvnBranches.hdl=Do you want to push local branches as new SVN branches?
dlgShPushTrackingLocalSvnBranches.tle=プッシュ
dlg(SgDeleteFileTrash|SgDeleteFilesTrash).btn"Delete"=削除
dlg(SgDeleteFileTrash|SgDeleteFilesTrash).btn"Move to Trash"=ゴミ箱へ移動
dlg(SgDeleteFileTrash|SgDeleteFilesTrash).fur=「削除」をクリックすると、削除されたファイルを復元するためにファイル復元ツールが必要になる場合があります。
dlg(SgDeleteFileTrash|SgDeleteFilesTrash).tle=削除
dlg(SgRepositoryRemoveMultiGroup|SgRepositoryRemoveMultiRepo|SgRepositoryRemoveMultiRepoMultiGroup|SgRepositoryRemoveMultiRepoSingleGroup|SgRepositoryRemoveSingleGroup|SgRepositoryRemoveSingleRepo|SgRepositoryRemoveSingleRepoMultiGroup|SgRepositoryRemoveSingleRepoSingleGroup).btn"Remove"=除去
dlg(SgRepositoryRemoveMultiGroup|SgRepositoryRemoveMultiRepo|SgRepositoryRemoveMultiRepoMultiGroup|SgRepositoryRemoveMultiRepoSingleGroup|SgRepositoryRemoveSingleGroup|SgRepositoryRemoveSingleRepo|SgRepositoryRemoveSingleRepoMultiGroup|SgRepositoryRemoveSingleRepoSingleGroup).chk=次回から表示しない
dlg(SgRepositoryRemoveMultiGroup|SgRepositoryRemoveMultiRepo|SgRepositoryRemoveMultiRepoMultiGroup|SgRepositoryRemoveMultiRepoSingleGroup|SgRepositoryRemoveSingleGroup|SgRepositoryRemoveSingleRepo|SgRepositoryRemoveSingleRepoMultiGroup|SgRepositoryRemoveSingleRepoSingleGroup).tle=除去
edt"Search For"=Search For
pop"$1 succeeded."=$1 が成功しました。
pop"Command $1 has been aborted."=コマンド$1が中断されました。
pop"Modify the previous commit and commit."=\
 前回のコミットを修正し、コミットする。
pop"No more changes."=No more changes.
pop"Select the remote to fetch from."=\
 Select the remote to fetch from.
pop"Select the remote to rename."=Select the remote to rename.
pop"Select the stash to rename."=Select the stash to rename.
pop"There are no obsolete repositories."=There are no obsolete repositories.
pop"There is no action available for this drop operation."=\
 There is no action available for this drop operation.
pop"Unstage unwanted changes for the 1st commit, and commit."=\
 1回目のコミットで不要な変更をアンステージし、コミットします。
wndAnnotate.edt"Commit"=コミット
wndAnnotate.edt"Highlight"=ハイライト
wndAnnotate.edt"View Commit"=View Commit
wndAnnotate.mniCommit-first=Go to First Commit
wndAnnotate.mniCommit-last=Go to Last Commit
wndAnnotate.mniCommit-next=次のコミットに進む
wndAnnotate.mniCommit-preceding-line=Go to Preceding Commit
wndAnnotate.mniCommit-previous=前のコミットに移動
wndAnnotate.mniCompare=比較する
wndAnnotate.mniCustomize=カスタマイズ
wndAnnotate.mniEdit-copy=コピー
wndAnnotate.mniFile-close=閉じる
wndAnnotate.mniGoto-line=指定の行へ移動
wndAnnotate.mniLog=ログを開く
wndAnnotate.mniSearch-find=検索
wndAnnotate.mniSearch-next=次を検索
wndAnnotate.mniSearch-previous=前を検索
wndAnnotate.mniSet-syntax=Syntax Language
wndAnnotate.mniShowChanges=比較する
wndAnnotate.mniUndo-goto=Undo Go To
wndAnnotate.mniView-settings=設定
wndAnnotate.mniWindowHideView=ビューを隠す
wndAnnotate.mniWindowLineHistory=Line History
wndAnnotate.mnu"Edit"=編集
wndAnnotate.mnu"File"=ファイル
wndAnnotate.mnu"Go To"=移動
wndAnnotate.mnu"View"=表示
wndAnnotate.rbt"Commit Index"=Commit Index
wndAnnotate.rbt"Time"=Time
wndAnnotate.tab"Document"=Document
wndAnnotate.tab"History of current line"=History of current line
wndCompare.mniRefresh=再読込
wndCompare.mniView-layout-left-beside-right=左右に並べて表示
wndCompare.mniView-layout-left-over-right=上下に並べて表示\(上にLeft,下にRight\)
wndCompare.tbtGoto-next-diff=次の変更点に進みます。
wndConflictSolver.mni"Apply Inner-line Difference to Middle"=行内の差分を中央に適用
wndConflictSolver.mni"Apply Line to Middle"=行の差分を中央に適用
wndConflictSolver.mni"Apply Selection to Middle"=選択範囲を中央に適用
wndConflictSolver.mniView-layout-all=全て
wndConflictSolver.mniView-layout-left-merge=Left and Merge
wndConflictSolver.mniView-layout-left-right-above-merge=Left and Right Above Merge
wndConflictSolver.mniView-layout-right-merge=Merge and Right
wndConflictSolver.tbr"All"=全て
wndConflictSolver.tbr"Base Changes"=Base Changes
wndConflictSolver.tbr"Left + Merge"=Left + Merge
wndConflictSolver.tbr"Merge + Right"=Merge + Right
wndConflictSolver.tbr"Merge Below"=Merge Below
wndConflictSolver.tbr"Next Conflict"=次の競合
wndConflictSolver.tbr"Prev. Conflict"=前の競合
wndConflictSolver.tbr"Take Left, Right"=Take Left, Right
wndConflictSolver.tbr"Take Right, Left"=Take Right, Left
wndConflictSolver.tbtFile-open-base=Open the left and right changes from the common base file.
wndConflictSolver.tbtFile-save=ファイルの変更を保存します。
wndConflictSolver.tbtGoto-next-conflict=次の競合に進む
wndConflictSolver.tbtGoto-next-diff=Go to next change.
wndConflictSolver.tbtView-layout-left-right-above-merge=Show the left and right files above the merge file.
wndDeepgit.btn"Go Deeper"=Go Deeper
wndDeepgit.col"File"=ファイル
wndDeepgit.col"Modifications"=変更点
wndDeepgit.mni"Open File Log"=Open File Log
wndDeepgit.mni"Open Repository Log"=Open Repository Log
wndDeepgit.mniAbout=DeepGitについて
wndDeepgit.mniBack=Go Back
wndDeepgit.mniConfigureRefGroups=タグ-グルーピング
wndDeepgit.mniEdit-copy=コピー
wndDeepgit.mniExtendLineToBlock=Extend Lines To Blocks
wndDeepgit.mniFile-close=閉じる
wndDeepgit.mniFilterAddSelection=選択フィルタを追加
wndDeepgit.mniFilterReset=Reset Filter
wndDeepgit.mniFilterSetSelection=Set Selection as Filter
wndDeepgit.mniFollowRenames=Follow Renames
wndDeepgit.mniForward=Go Forward
wndDeepgit.mniGoto-line=指定の行へ移動
wndDeepgit.mniGoto-next-diff=次の変更
wndDeepgit.mniGoto-previous-diff=前の変更
wndDeepgit.mniHighlightBlameChanges=現在のBlameコミットの変更をハイライト
wndDeepgit.mniHighlightOriginChanges=現在のOriginコミットの変更をハイライト
wndDeepgit.mniIgnoreWhitespaceOnlyChanges=Ignore Whitespace Changes
wndDeepgit.mniLicenseAgreement=ライセンス契約
wndDeepgit.mniNextChange=次の変更
wndDeepgit.mniOpenFileLog=ファイルログを開く
wndDeepgit.mniOpenRepositoryLog=リポジトリログを開く
wndDeepgit.mniOptimizeCreationOrigins=Optimize 'Appeared Here' Origins
wndDeepgit.mniPerspectiveBlameOrigin=Blame+Origins Perspective
wndDeepgit.mniPerspectiveBlameSimple=Blame Perspective
wndDeepgit.mniPerspectiveCommit=Log Perspective
wndDeepgit.mniPerspectiveHistory=Diff Perspective
wndDeepgit.mniPerspectiveOrigins=Origins Perspective
wndDeepgit.mniPreviousChange=前の変更
wndDeepgit.mniResetInlineHelp=Reshow All Inline Help
wndDeepgit.mniSearch-find=検索
wndDeepgit.mniSearch-next=次を検索
wndDeepgit.mniSearch-previous=前を検索
wndDeepgit.mniSetEncoding=エンコーディング
wndDeepgit.mniShowLinePrefixes=Show Line Prefixes
wndDeepgit.mniShowOnRefs=Show On Refs in Navigation
wndDeepgit.mniToggleLineHistory=Line History
wndDeepgit.mniViewToolbar=ツールバーを表示
wndDeepgit.mniWindowHorizontalLayout=Horizontal Blame + Origins Layout
wndDeepgit.mniWindowVerticalLayout=Vertical Blame + Origins Layout
wndDeepgit.mnu"Edit"=編集
wndDeepgit.mnu"File"=ファイル
wndDeepgit.mnu"Go To"=移動
wndDeepgit.mnu"Help"=ヘルプ
wndDeepgit.mnu"View"=表示
wndDeepgit.tbr"Back"=戻る
wndDeepgit.tbr"Blame"=ブレーム
wndDeepgit.tbr"Blame+Origins"=Blame+Origins
wndDeepgit.tbr"Diff"=Diff
wndDeepgit.tbr"Forward"=進む
wndDeepgit.tbr"Log"=ログ
wndDeepgit.tbr"Origins"=Origins
wndDeepgit.tbtPerspectiveBlameOrigin=Find where the line originates from in cases where you need to choose from one of possible Origins.
wndDeepgit.tbtPerspectiveBlameSimple=Find where the line originates from in simple cases when there are no alternative Origins.
wndDeepgit.tbtPerspectiveCommit=Investigate Log.
wndDeepgit.tbtPerspectiveOrigins=Find out what else happened where the line originates from.\n\nIn order to inspect available Origins, they have to be evaluated first. First, select the file you want to investigate using File\|Open and select a line in it. Then wait until the calculation of possible Origins has finished.
wndEditor.mni"CR \(classic macOS\)"=CR \(classic macOS\)
wndEditor.mni"CR+LF \(Windows\)"=CR+LF \(Windows\)
wndEditor.mni"LF \(Unix, macOS\)"=LF \(Unix, macOS\)
wndEditor.mniEdit-undo=取り消し\(Undo\)
wndEditor.mniEofEnforceLineEnding=ファイル終端での改行を強制する
wndEditor.mniReplaceTabsWithSpaces=タブをスペースに置き換える
wndEditor.mniView-remember-as-default=デフォルトとして記憶する
wndEditor.mniView-settings=設定
wndGit.indexEditor.mni"Discard Inner-line Change"=Discard Inner-line Change
wndGit.indexEditor.mni"Discard Line"=Discard Line
wndGit.indexEditor.mni"Discard Selection"=Discard Selection
wndGit.indexEditor.mni"Unstage Inner-line Change"=行内の変更をアンステージ
wndGit.indexEditor.mni"Unstage Line"=行をアンステージ
wndGit.indexEditor.mni"Unstage Selection"=選択範囲をアンステージ
wndGit.indexEditor.mniView-layout-all=全て
wndGit.indexEditor.mniView-layout-head-index=HEAD と Index
wndGit.indexEditor.mniView-layout-head-index-wt=全て
wndGit.indexEditor.mniView-layout-head-wt-above-index=HEAD and Working Tree Above Index
wndGit.indexEditor.mniView-layout-index-wt=Index と Working Tree
wndGit.indexEditor.mniView-layout-left-merge=HEAD と Index
wndGit.indexEditor.mniView-layout-left-right-above-merge=HEAD and Working Tree Above Index
wndGit.indexEditor.mniView-layout-right-merge=Index と Working Tree
wndGit.indexEditor.tbtEdit-take-left=Take the left block to the merge result. Depending on the left block, this will insert, replace or delete at the merge result.
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std).lblStatusBarMessage"Ready"=準備完了
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std).mniWindow-fullScreen=フルスクリーン
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std).mniWindow-maximizeMaximize=最大化
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std).mniWindow-maximizeRestore=最大化を解除する
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std).mniWindow-minimize=最小化
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std).mniWindowMaximizeRestore"Maximize View"=ビューを最大化
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std).mniWindowMaximizeRestore"Restore Maximized View"=最大化したビューを元に戻す
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std).mnu"< No Windows >"=< No Windows >
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std).mnu"Window"=ウィンドウ
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-take-left=左のブロックを採用
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-take-left-right=Take Left, then Right Block
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-take-right=右のブロックを採用
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-take-right-left=Take Right, then Left Block
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-undo=取り消し\(Undo\)
wnd(Compare|ConflictSolver|Git.indexEditor).mniFile-export-html=HTMLファイルとしてエクスポート
wnd(Compare|ConflictSolver|Git.indexEditor).mniFile-open-base=Open Base File Changes
wnd(Compare|ConflictSolver|Git.indexEditor).mniGoto-next-conflict=次の競合
wnd(Compare|ConflictSolver|Git.indexEditor).mniGoto-next-diff=次の変更
wnd(Compare|ConflictSolver|Git.indexEditor).mniGoto-previous-conflict=前の競合
wnd(Compare|ConflictSolver|Git.indexEditor).mniGoto-previous-diff=前の変更
wnd(Compare|ConflictSolver|Git.indexEditor).mniShow-line-numbers=行番号の表示
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-ignore-whitespaces-all=行比較で空白をすべて無視する
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-ignore-whitespaces-leading-trailing=行比較で先頭と行末の空白を無視する
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-ignore-whitespaces-none=行比較で空白を無視しない
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-refresh=再読込
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-remember-as-default=デフォルトとして記憶する
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-settings=設定
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-show-current-line-control=現在の行を長いテキストボックスで表示
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-synchronize-scrolling=スクロールを同期する
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Next Change"=次の変更
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Prev. Change"=前の変更
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Reload"=再読込
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Take Left"=左を採用
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Take Right"=右を採用
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mni"Copy Selection"=選択範囲をコピー
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniCustomize=カスタマイズ
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-copy=コピー
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-cut=切り取り
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-ignore-case-changes=行比較で大文字小文字を区別しない
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-paste=貼り付け
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-redo=やり直し\(Redo\)
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniFile-close=閉じる
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniFile-save=保存
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniGoto-line=指定の行へ移動
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSearch-find=検索
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSearch-next=次を検索
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSearch-previous=前を検索
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSearch-replace=検索と置換
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSet-syntax=Syntax Language
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mnu"Edit"=編集
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mnu"File"=ファイル
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mnu"Go To"=移動
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mnu"View"=表示
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).tbr"Save"=保存
wnd(Log|Project|Std)."Abort"=中断
wnd(Log|Project|Std)."Commit"=コミット
wnd(Log|Project|Std)."Conflict Solver"=Conflict Solver
wnd(Log|Project|Std)."Continue"=続ける
wnd(Log|Project|Std)."Mark HEAD as Bad"=Mark HEAD as Bad
wnd(Log|Project|Std)."Mark HEAD as Good"=Mark HEAD as Good
wnd(Log|Project|Std)."Mark Resolved"=Mark Resolved
wnd(Log|Project|Std)."Recreate Conflict"=Recreate Conflict
wnd(Log|Project|Std)."Rerun Thoroughly"=Rerun Thoroughly
wnd(Log|Project|Std)."Reset"=リセット
wnd(Log|Project|Std)."Reveal"=Reveal
wnd(Log|Project|Std)."Show Local Changes"=ローカルの変更を表示
wnd(Log|Project|Std)."Step"=ステップ
wnd(Log|Project|Std)."Swap"=入れ替え
wnd(Log|Project|Std)."Take Ours"=Take Ours
wnd(Log|Project|Std)."Take Theirs"=Take Theirs
wnd(Log|Project|Std).btn"Abort"=中断
wnd(Log|Project|Std).btn"Commit"=コミット
wnd(Log|Project|Std).btn"Conflict Solver"=コンフリクトソルバー
wnd(Log|Project|Std).btn"Continue"=続ける
wnd(Log|Project|Std).btn"Mark HEAD as Bad"=Mark HEAD as Bad
wnd(Log|Project|Std).btn"Mark HEAD as Good"=Mark HEAD as Good
wnd(Log|Project|Std).btn"Mark Resolved"=Mark Resolved
wnd(Log|Project|Std).btn"Recreate Conflict"=Recreate Conflict
wnd(Log|Project|Std).btn"Rerun Thoroughly"=Rerun Thoroughly
wnd(Log|Project|Std).btn"Reset"=リセット
wnd(Log|Project|Std).btn"Reveal"=Reveal
wnd(Log|Project|Std).btn"Show Local Changes"=ローカルの変更を表示
wnd(Log|Project|Std).btn"Stage"=ステージ
wnd(Log|Project|Std).btn"Step"=ステップ
wnd(Log|Project|Std).btn"Swap"=入れ替え
wnd(Log|Project|Std).btn"Take Ours"=Take Ours
wnd(Log|Project|Std).btn"Take Theirs"=Take Theirs
wnd(Log|Project|Std).chk"Add 'Signed-off-by' signature"=コミットメッセージにSigned-off-by 署名を追加する
wnd(Log|Project|Std).chk"Amend last commit instead of creating new one"=\
 新規にコミットせず、前回のコミットを修正する
wnd(Log|Project|Std).chk"Amend last commit"=前回のコミットを修正
wnd(Log|Project|Std).chk"Bypass commit hook"=コミットフックをバイパスする
wnd(Log|Project|Std).chk"Create simple commit \('squash'\)"=Create simple commit \('squash'\)
wnd(Log|Project|Std).chk"Push"=プッシュ
wnd(Log|Project|Std).col"Assignee"=Assignee
wnd(Log|Project|Std).col"Author"=Author
wnd(Log|Project|Std).col"Branch"=ブランチ
wnd(Log|Project|Std).col"Copied From"=Copied From
wnd(Log|Project|Std).col"Copied from"=Copied from
wnd(Log|Project|Std).col"Date"=Date
wnd(Log|Project|Std).col"Entry"=Entry
wnd(Log|Project|Std).col"Ext."=Ext.
wnd(Log|Project|Std).col"Index State"=Index State
wnd(Log|Project|Std).col"Last Changed On"=Last Changed On
wnd(Log|Project|Std).col"Modification"=変更
wnd(Log|Project|Std).col"Name"=名前
wnd(Log|Project|Std).col"Path"=パス
wnd(Log|Project|Std).col"Relative Directory"=相対ディレクトリ
wnd(Log|Project|Std).col"Relative Path"=相対パス
wnd(Log|Project|Std).col"Renamed Path"=Renamed Path
wnd(Log|Project|Std).col"Size"=サイズ
wnd(Log|Project|Std).col"State"=状態
wnd(Log|Project|Std).col"Submodule"=サブモジュール
wnd(Log|Project|Std).col"Text"=テキスト
wnd(Log|Project|Std).col"Working Tree State"=Working Tree State
wnd(Log|Project|Std).edt"Commit to"=Commit to
wnd(Log|Project|Std).hnt"File Filter"=ファイルフィルタ
wnd(Log|Project|Std).hnt"Filter or Tag Search"=Filter or Tag Search
wnd(Log|Project|Std).lbl"$1 files hidden"=$1 files hidden
wnd(Log|Project|Std).lbl"Directories"=ディレクトリ
wnd(Log|Project|Std).lbl"Directory"=ディレクトリ
wnd(Log|Project|Std).lbl"File"=ファイル
wnd(Log|Project|Std).lbl"Files"=ファイル
wnd(Log|Project|Std).lblStatusBarMessage"$1"=$1
wnd(Log|Project|Std).mni"  Show Rewritten Behind Commits"=\
 Show Rewritten Behind Commits
wnd(Log|Project|Std).mni"<no entry>"=<no entry>
wnd(Log|Project|Std).mni"<none>"=<none>
wnd(Log|Project|Std).mni"Abbreviated"=Abbreviated
wnd(Log|Project|Std).mni"Add GitHub Comment"=GitHubコメントの追加
wnd(Log|Project|Std).mni"Add GitLab Comment"=GitLabコメントの追加
wnd(Log|Project|Std).mni"Add Review Comment"=レビューコメントを追加
wnd(Log|Project|Std).mni"All"=全て
wnd(Log|Project|Std).mni"Apply Patch"=パッチを適用
wnd(Log|Project|Std).mni"Assign"=割り当て
wnd(Log|Project|Std).mni"Author Abbreviated"=Author Abbreviated
wnd(Log|Project|Std).mni"Author Avatar"=Author Avatar
wnd(Log|Project|Std).mni"Author with Full Name and Email"=\
 Author with Full Name and Email
wnd(Log|Project|Std).mni"Author with Full Name"=Author with Full Name
wnd(Log|Project|Std).mni"Author"=Author
wnd(Log|Project|Std).mni"Branch Coloring"=ブランチカラーリング
wnd(Log|Project|Std).mni"Branches and Tags"=ブランチとタグ
wnd(Log|Project|Std).mni"Branching:"=Branching:
wnd(Log|Project|Std).mni"Cancel"=キャンセル
wnd(Log|Project|Std).mni"Check Out"=チェックアウト
wnd(Log|Project|Std).mni"Checkout"=チェックアウト
wnd(Log|Project|Std).mni"Cherry-Pick Commits to $1"=Cherry-Pick Commits to $1
wnd(Log|Project|Std).mni"Clear History"=履歴をクリア
wnd(Log|Project|Std).mni"Close"=閉じる
wnd(Log|Project|Std).mni"Coloring:"=カラーリング:
wnd(Log|Project|Std).mni"Columns"=列
wnd(Log|Project|Std).mni"Columns:"=列:
wnd(Log|Project|Std).mni"Comment $1"=コメント $1
wnd(Log|Project|Std).mni"Committer"=コミッタ
wnd(Log|Project|Std).mni"Compact Author"=Compact Author
wnd(Log|Project|Std).mni"Copy Full ID"=フルIDをコピー
wnd(Log|Project|Std).mni"Copy ID"=IDをコピー
wnd(Log|Project|Std).mni"Copy Name"=Copy Name
wnd(Log|Project|Std).mni"Copy Selection"=選択範囲をコピー
wnd(Log|Project|Std).mni"Copy URL"=URL をコピー
wnd(Log|Project|Std).mni"Copy"=コピー
wnd(Log|Project|Std).mni"Create Merge Request"=マージリクエストを作成
wnd(Log|Project|Std).mni"Create Pull Request"=プルリクエストを作成
wnd(Log|Project|Std).mni"Cut"=切り取り
wnd(Log|Project|Std).mni"Date"=Date
wnd(Log|Project|Std).mni"Default Coloring"=デフォルトカラーリング
wnd(Log|Project|Std).mni"Delete 'Comment $1'"=コメント '$1' を削除
wnd(Log|Project|Std).mni"Delete"=削除
wnd(Log|Project|Std).mni"Diff Tool"=Diffツール
wnd(Log|Project|Std).mni"Discard Hunk"=Discard Hunk
wnd(Log|Project|Std).mni"Discard Inner-line Change"=Discard Inner-line Change
wnd(Log|Project|Std).mni"Discard Line"=Discard Line
wnd(Log|Project|Std).mni"Discard Selection"=Discard Selection
wnd(Log|Project|Std).mni"Drop Local Data"=Drop Local Data
wnd(Log|Project|Std).mni"Edit 'Comment $1'"=Edit 'Comment $1'
wnd(Log|Project|Std).mni"Edit in Index Editor"=Edit in Index Editor
wnd(Log|Project|Std).mni"Edit"=編集
wnd(Log|Project|Std).mni"Fast-Forward Merge"=Fast-Forward マージ
wnd(Log|Project|Std).mni"Fetch Merge Request"=Fetch Merge Request
wnd(Log|Project|Std).mni"Fetch Pull Request"=Fetch Pull Request
wnd(Log|Project|Std).mni"File Content \(very expensive\)"=File Content \(very expensive\)
wnd(Log|Project|Std).mni"File \(expensive\)"=File \(expensive\)
wnd(Log|Project|Std).mni"Files from Subdirectories"=Files from Subdirectories
wnd(Log|Project|Std).mni"Follow All Parents"=Follow All Parents
wnd(Log|Project|Std).mni"Follow Only First Parent"=Follow Only First Parent
wnd(Log|Project|Std).mni"Forget Pattern"=Forget Pattern
wnd(Log|Project|Std).mni"Forget"=Forget
wnd(Log|Project|Std).mni"Format Patch"=Format Patch
wnd(Log|Project|Std).mni"Full Author With Email"=Full Author With Email
wnd(Log|Project|Std).mni"Full Author"=Full Author
wnd(Log|Project|Std).mni"Full Name With Email"=Full Name With Email
wnd(Log|Project|Std).mni"Full Name"=Full Name
wnd(Log|Project|Std).mni"Git Config"=Git Config
wnd(Log|Project|Std).mni"Git-LFS Version"=Git-LFS Version
wnd(Log|Project|Std).mni"ID"=ID
wnd(Log|Project|Std).mni"Include Merge Only if File was Changed"=\
 Include Merge Only if File was Changed
wnd(Log|Project|Std).mni"Integrate"=Integrate
wnd(Log|Project|Std).mni"Jump To"=Jump To
wnd(Log|Project|Std).mni"LFS"=LFS
wnd(Log|Project|Std).mni"Mark as Bad"=Mark as Bad
wnd(Log|Project|Std).mni"Mark as Good"=Mark as Good
wnd(Log|Project|Std).mni"Merge Directly To"=Merge Directly To
wnd(Log|Project|Std).mni"Merge Merge Request"=Merge Merge Request
wnd(Log|Project|Std).mni"Merge Pull Request"=Merge Pull Request
wnd(Log|Project|Std).mni"Merge"=マージ
wnd(Log|Project|Std).mni"Message"=メッセージ
wnd(Log|Project|Std).mni"More options"=追加のオプション
wnd(Log|Project|Std).mni"Move Commit"=Move Commit
wnd(Log|Project|Std).mni"Move To"=移動先
wnd(Log|Project|Std).mni"Move and Squash Commit"=Move and Squash Commit
wnd(Log|Project|Std).mni"Neither"=Neither
wnd(Log|Project|Std).mni"New Group"=New Group
wnd(Log|Project|Std).mni"No Group"=No Group
wnd(Log|Project|Std).mni"Only If Changed"=Only If Changed
wnd(Log|Project|Std).mni"Only Selected"=Only Selected
wnd(Log|Project|Std).mni"Open in Browser"=Open in Browser
wnd(Log|Project|Std).mni"Open in Web Browser"=Open in Web Browser
wnd(Log|Project|Std).mni"Other Branch"=Other Branch
wnd(Log|Project|Std).mni"Paste"=貼り付け
wnd(Log|Project|Std).mni"Please select Index or Working Tree."=\
 インデックスまたはワーキングツリーを選択してください。
wnd(Log|Project|Std).mni"Print Git Version"=Print Git Version
wnd(Log|Project|Std).mni"Pull, then Push"=プル→プッシュ
wnd(Log|Project|Std).mni"Push To"=プッシュ先
wnd(Log|Project|Std).mni"Push"=プッシュ
wnd(Log|Project|Std).mni"Push, then Pull"=プッシュ→プル
wnd(Log|Project|Std).mni"Quick Stash All"=Quick Stash All
wnd(Log|Project|Std).mni"Quick Stash Selection"=Quick Stash Selection
wnd(Log|Project|Std).mni"Rebase $1 commit from $2 to $3"=\
 Rebase $1 commit from $2 to $3
wnd(Log|Project|Std).mni"Rebase $1 commits from $2 to $3"=\
 Rebase $1 commits from $2 to $3
wnd(Log|Project|Std).mni"Regular Expressions"=Regular Expressions
wnd(Log|Project|Std).mni"Reject Pull Request"=Reject Pull Request
wnd(Log|Project|Std).mni"Remember Pattern"=Remember Pattern
wnd(Log|Project|Std).mni"Rename"=リネーム
wnd(Log|Project|Std).mni"Reorder Commits"=Reorder Commits
wnd(Log|Project|Std).mni"Reply '$1'"=Reply '$1'
wnd(Log|Project|Std).mni"Reply"=返信
wnd(Log|Project|Std).mni"Reset HEAD to $1"=Reset HEAD to $1
wnd(Log|Project|Std).mni"Reset to Default"=デフォルトにリセット
wnd(Log|Project|Std).mni"Resolve"=Resolve
wnd(Log|Project|Std).mni"Retract Merge Request"=マージリクエストの撤回
wnd(Log|Project|Std).mni"Retract Pull Request"=プルリクエストの撤回
wnd(Log|Project|Std).mni"Revert $1"=Revert $1
wnd(Log|Project|Std).mni"Review"=レビュー
wnd(Log|Project|Std).mni"Rewrap"=Rewrap
wnd(Log|Project|Std).mni"SHA"=SHA
wnd(Log|Project|Std).mni"Select from JIRA"=Select from JIRA
wnd(Log|Project|Std).mni"Select from Log"=ログから選択
wnd(Log|Project|Std).mni"Set '$1' to $2"=Set '$1' to $2
wnd(Log|Project|Std).mni"Show All Refs"=Show All Refs
wnd(Log|Project|Std).mni"Show Auxiliary Branch"=Show Auxiliary Branch
wnd(Log|Project|Std).mni"Show Branch Labels"=Show Branch Labels
wnd(Log|Project|Std).mni"Show Common Commits"=共通のコミットを表示する
wnd(Log|Project|Std).mni"Show Incoming Commits"=Show Incoming Commits
wnd(Log|Project|Std).mni"Show More Commits \(Temporarily\)"=Show More Commits \(Temporarily\)
wnd(Log|Project|Std).mni"Show Only Selected Branches and Tags"=\
 Show Only Selected Branches and Tags
wnd(Log|Project|Std).mni"Show Only Selected Refs"=Show Only Selected Refs
wnd(Log|Project|Std).mni"Show Unchanged Directories"=Show Unchanged Directories
wnd(Log|Project|Std).mni"Show Working Tree On Demand"=Show Working Tree On Demand
wnd(Log|Project|Std).mni"Show Working Tree Permanently"=Show Working Tree Permanently
wnd(Log|Project|Std).mni"Sort Merge Parents First"=Sort Merge Parents First
wnd(Log|Project|Std).mni"Sort Primary Parents First"=Sort Primary Parents First
wnd(Log|Project|Std).mni"Stage Hunk"=Hunkをステージ
wnd(Log|Project|Std).mni"Stage Inner-line Change"=行内の変更をステージ
wnd(Log|Project|Std).mni"Stage Innerline Change"=行内の変更をステージ
wnd(Log|Project|Std).mni"Stage Line"=行をステージ
wnd(Log|Project|Std).mni"Stage Lines"=行をステージ
wnd(Log|Project|Std).mni"Stage Selection"=選択範囲をステージ
wnd(Log|Project|Std).mni"Stash Selection"=選択した変更を隠す
wnd(Log|Project|Std).mni"Subtree"=サブツリー
wnd(Log|Project|Std).mni"Template!"=テンプレート!
wnd(Log|Project|Std).mni"Test"=テスト
wnd(Log|Project|Std).mni"Toggle Hosting Provider Integration"=Toggle Hosting Provider Integration
wnd(Log|Project|Std).mni"Toggle"=トグル
wnd(Log|Project|Std).mni"Varying Coloring"=Varying Coloring
wnd(Log|Project|Std).mniAbout=SmartGitについて
wnd(Log|Project|Std).mniAdd=追加
wnd(Log|Project|Std).mniAnnotate=ブレーム
wnd(Log|Project|Std).mniAssume-unchanged-toggle=Toggle 'Assume Unchanged'
wnd(Log|Project|Std).mniBisectBad=Mark HEAD as Bad
wnd(Log|Project|Std).mniBisectExit=リセット
wnd(Log|Project|Std).mniBisectGood=Mark HEAD as Good
wnd(Log|Project|Std).mniBisectStart=開始
wnd(Log|Project|Std).mniBranchAbort=中断
wnd(Log|Project|Std).mniBranchAdd=ブランチを追加
wnd(Log|Project|Std).mniBranchAddTag=タグを追加
wnd(Log|Project|Std).mniBranchClose=閉じる
wnd(Log|Project|Std).mniBranchContinue=続ける
wnd(Log|Project|Std).mniBranchDelete=削除
wnd(Log|Project|Std).mniBranchRename=リネーム
wnd(Log|Project|Std).mniBranchResetTracking=Stop Tracking
wnd(Log|Project|Std).mniBranchSetTracking=追跡ブランチの設定
wnd(Log|Project|Std).mniBranchSplit=Modify or Split Commit
wnd(Log|Project|Std).mniBranchSplitFiles=Split Off Files
wnd(Log|Project|Std).mniBranchesGitFlowRemoteOnly=Show remote branches in their Git-Flow sections
wnd(Log|Project|Std).mniBranchesGitFlowTracked=Show remote, tracked branches
wnd(Log|Project|Std).mniBranchesSectionize=タグやブランチをパスのような名前でグループ化 \(foo/bar\)
wnd(Log|Project|Std).mniBranchesSectionizeAfterLastSlash=After last slash
wnd(Log|Project|Std).mniBranchesSectionizeCompact=単一項目は階層化しない
wnd(Log|Project|Std).mniBranchesSectionsBeforeRefs=グループを最初に表示する
wnd(Log|Project|Std).mniBranchesSelectObsolete=廃止されたローカルブランチを選択
wnd(Log|Project|Std).mniBranchesSortByName=名前でソート
wnd(Log|Project|Std).mniBranchesSortByNameReversed=名前でソート \(番号は降順\)
wnd(Log|Project|Std).mniBranchesSortByTime=コミットされた時間で並べ替え
wnd(Log|Project|Std).mniCheckForLatestBuild=最新ビルドの確認
wnd(Log|Project|Std).mniCheckForNewVersion=新しいバージョンの確認
wnd(Log|Project|Std).mniCheckout=チェックアウト
wnd(Log|Project|Std).mniCherryPick=チェリーピック
wnd(Log|Project|Std).mniClean=Clean Working Tree
wnd(Log|Project|Std).mniClearOutput=出力をクリア
wnd(Log|Project|Std).mniCommit=コミット
wnd(Log|Project|Std).mniCompact-display=Compact Change Display
wnd(Log|Project|Std).mniCompareWithWorkingTree=Compare with Working Tree
wnd(Log|Project|Std).mniConfigureTagGrouping=タグ-グルーピング
wnd(Log|Project|Std).mniConfigureToolbar=ツールバーの設定
wnd(Log|Project|Std).mniConflictSolver=コンフリクトソルバー
wnd(Log|Project|Std).mniContactSupport=サポートに連絡
wnd(Log|Project|Std).mniCopyCommitId=IDをコピー
wnd(Log|Project|Std).mniCopyCommitMessage=メッセージをコピー
wnd(Log|Project|Std).mniCopyName=名前をコピー
wnd(Log|Project|Std).mniCopyPath=パスをコピー
wnd(Log|Project|Std).mniCopyRelativePath=相対パスをコピー
wnd(Log|Project|Std).mniCustomize=カスタマイズ
wnd(Log|Project|Std).mniDebugCreateHeapDump=Create Heap Dump
wnd(Log|Project|Std).mniDebugCreateThreadDumps=Create Periodical Thread Dumps
wnd(Log|Project|Std).mniDebugEnableRefreshTraceLogging=Starting Tracing Refreshing
wnd(Log|Project|Std).mniDebugLogFileMonitorEvents=Log File Monitor Events
wnd(Log|Project|Std).mniDebugLogFileMonitorState=Log File Monitor State
wnd(Log|Project|Std).mniDebugLogOpenRepositories=Log Open Repositories
wnd(Log|Project|Std).mniDebugRestart=再起動
wnd(Log|Project|Std).mniDebugRunGc=Run GC
wnd(Log|Project|Std).mniDelete=削除
wnd(Log|Project|Std).mniDiscard=破棄
wnd(Log|Project|Std).mniEdit-ignore-case-changes=行比較で大文字小文字を区別しない
wnd(Log|Project|Std).mniEditCommitAuthor=Autherを編集
wnd(Log|Project|Std).mniEditCommitMessage=コミットメッセージを編集
wnd(Log|Project|Std).mniEditFile=ファイルを編集
wnd(Log|Project|Std).mniExit=終了
wnd(Log|Project|Std).mniFastForward=Fast-Forward Merge
wnd(Log|Project|Std).mniFetch=プル
wnd(Log|Project|Std).mniFile-close=閉じる
wnd(Log|Project|Std).mniFilterCommits=コミットフィルタ
wnd(Log|Project|Std).mniFilterFiles=ファイルフィルタ
wnd(Log|Project|Std).mniFindAction=コマンドを検索
wnd(Log|Project|Std).mniFindObject=オブジェクトを検索
wnd(Log|Project|Std).mniFixup=Fixup
wnd(Log|Project|Std).mniFlowConfigure=設定
wnd(Log|Project|Std).mniFlowContext=Git-Flow
wnd(Log|Project|Std).mniFlowFeatureFinish=Finish Feature
wnd(Log|Project|Std).mniFlowFeatureStart=Start Feature
wnd(Log|Project|Std).mniFlowHotfixFinish=Finish Hotfix
wnd(Log|Project|Std).mniFlowHotfixStart=Start Hotfix
wnd(Log|Project|Std).mniFlowIntegrateDevelop=Integrate Develop
wnd(Log|Project|Std).mniFlowReleaseFinish=Finish Release
wnd(Log|Project|Std).mniFlowReleaseStart=Start Release
wnd(Log|Project|Std).mniFlowSupportStart=Support ブランチを開始
wnd(Log|Project|Std).mniForgetCommit=Forget Commit
wnd(Log|Project|Std).mniGoto-next-diff=次の変更
wnd(Log|Project|Std).mniGoto-previous-diff=前の変更
wnd(Log|Project|Std).mniGotoChildrenCommit=子コミットを選択
wnd(Log|Project|Std).mniGotoParentsCommit=親コミットを選択
wnd(Log|Project|Std).mniIgnore=無視
wnd(Log|Project|Std).mniIgnore-line-separators=Ignore Line-Ending Changes
wnd(Log|Project|Std).mniIgnoreReveal=無視リストを編集
wnd(Log|Project|Std).mniIncludeTrackedRemoteBranches=Include Tracked Remote Branches
wnd(Log|Project|Std).mniIndexEditor=Index Editor
wnd(Log|Project|Std).mniInvestigate=履歴調査
wnd(Log|Project|Std).mniLfsInstall=インストール
wnd(Log|Project|Std).mniLfsLock=Lock
wnd(Log|Project|Std).mniLfsPrune=Prune
wnd(Log|Project|Std).mniLfsTrack=追跡
wnd(Log|Project|Std).mniLfsUnlock=アンロック
wnd(Log|Project|Std).mniLicenseAgreement=ライセンス契約
wnd(Log|Project|Std).mniLocalGc=ガベージコレクタ
wnd(Log|Project|Std).mniLog=ログ
wnd(Log|Project|Std).mniLogCommitsColoringBranch=ブランチカラーリング
wnd(Log|Project|Std).mniLogCommitsColoringDefault=デフォルトカラーリング
wnd(Log|Project|Std).mniLogCommitsColoringLegacy=Varying Coloring
wnd(Log|Project|Std).mniLogCommitsColoringMerge=マージ可能なカラーリング
wnd(Log|Project|Std).mniLogRepository=ログウィンドウを表示
wnd(Log|Project|Std).mniLogShowAllParents=Follow All Parents
wnd(Log|Project|Std).mniLogShowOnlyFirstParents=Show Only First Parents
wnd(Log|Project|Std).mniLogTopoFiltering=Show Graph While Filtering
wnd(Log|Project|Std).mniLogWorkingTreeIndexOnDemand=Show Working Tree  Index On Demand
wnd(Log|Project|Std).mniLogWorkingTreeIndexPermanent=Show Working Tree  Index Permanently
wnd(Log|Project|Std).mniMailingList=SmartGitウェブサイト
wnd(Log|Project|Std).mniMerge=マージ
wnd(Log|Project|Std).mniModifyCommit=変更
wnd(Log|Project|Std).mniNewStandardWindow=スタンダードウィンドウを表示
wnd(Log|Project|Std).mniNewWindow=新しいウィンドウ
wnd(Log|Project|Std).mniOpen=ワーキングツリーから開く
wnd(Log|Project|Std).mniOpenDocumentation=オンラインドキュメント
wnd(Log|Project|Std).mniOpenRootLog=Open Root Log
wnd(Log|Project|Std).mniOpenUserEcho=機能の要望を送る
wnd(Log|Project|Std).mniOpenWorkingTree=Open Working Tree
wnd(Log|Project|Std).mniPreferences=環境設定
wnd(Log|Project|Std).mniPreviewCommentNext=次のコメント
wnd(Log|Project|Std).mniPreviewCommentPrevious=前のコメント
wnd(Log|Project|Std).mniPreviewCompareAutomatic=自動
wnd(Log|Project|Std).mniPreviewCompareHeadVsIndex=HEAD vs. Index
wnd(Log|Project|Std).mniPreviewCompareIndexVsWT=Index vs. Working Tree
wnd(Log|Project|Std).mniPreviewRefresh=再読込
wnd(Log|Project|Std).mniPreviewShowCurrentLines=現在の行を長いテキストボックスで表示
wnd(Log|Project|Std).mniPreviewUndo=取り消し\(Undo\)
wnd(Log|Project|Std).mniPush=プッシュ
wnd(Log|Project|Std).mniPushCommits=Push Up To
wnd(Log|Project|Std).mniPushTo=プッシュ先
wnd(Log|Project|Std).mniPushToGerrit=Push to Gerrit
wnd(Log|Project|Std).mniRebaseAbort=中断
wnd(Log|Project|Std).mniRebaseContinue=続ける
wnd(Log|Project|Std).mniRebaseHeadTo=Rebase HEAD To
wnd(Log|Project|Std).mniRebaseInteractive=Rebase Interactive From
wnd(Log|Project|Std).mniRebaseSkip=スキップ
wnd(Log|Project|Std).mniRebaseStep=ステップ
wnd(Log|Project|Std).mniRebaseToHead=Rebase to HEAD
wnd(Log|Project|Std).mniRebaseToHead"Rebase to HEAD \($1\)"=Rebase to HEAD \($1\)
wnd(Log|Project|Std).mniRebaseToHead"Rebase to HEAD"=Rebase to HEAD
wnd(Log|Project|Std).mniRefresh=更新
wnd(Log|Project|Std).mniRegister=登録
wnd(Log|Project|Std).mniRemoteAdd=追加
wnd(Log|Project|Std).mniRemoteCopyUrl=URL をコピー
wnd(Log|Project|Std).mniRemoteDelete=削除
wnd(Log|Project|Std).mniRemoteFetch=フェッチ
wnd(Log|Project|Std).mniRemoteFetchMore=Fetch More
wnd(Log|Project|Std).mniRemoteProperties=プロパティ
wnd(Log|Project|Std).mniRemoteRename=リネーム
wnd(Log|Project|Std).mniRemove=除去
wnd(Log|Project|Std).mniRename=リネーム
wnd(Log|Project|Std).mniRepositoryAdd=追加 or 作成
wnd(Log|Project|Std).mniRepositoryAddGroup=グループを作成
wnd(Log|Project|Std).mniRepositoryClone=クローン
wnd(Log|Project|Std).mniRepositoryClose=閉じる
wnd(Log|Project|Std).mniRepositoryEditConfig=リポジトリ
wnd(Log|Project|Std).mniRepositoryEditConfigUser=ユーザー
wnd(Log|Project|Std).mniRepositoryFavorite=お気に入り
wnd(Log|Project|Std).mniRepositoryOpen=リポジトリを開く
wnd(Log|Project|Std).mniRepositoryOpenInNewWindow=リポジトリを新しいウィンドウで開く
wnd(Log|Project|Std).mniRepositoryRemove=除去
wnd(Log|Project|Std).mniRepositoryRename=リネーム
wnd(Log|Project|Std).mniRepositorySearch=リポジトリの検索
wnd(Log|Project|Std).mniRepositorySelectObsolete=廃止されたリポジトリを選択する
wnd(Log|Project|Std).mniRepositorySettings=設定
wnd(Log|Project|Std).mniReset=リセット
wnd(Log|Project|Std).mniResetAdvanced=Reset Advanced
wnd(Log|Project|Std).mniResolve=Resolve
wnd(Log|Project|Std).mniResolveOurs=Take Ours
wnd(Log|Project|Std).mniResolveRecreateConflict=Recreate Conflict
wnd(Log|Project|Std).mniResolveTheirs=Take Theirs
wnd(Log|Project|Std).mniRevealCommit=コミットを表示する
wnd(Log|Project|Std).mniRevealCommitExtend=選択されたコミットと比較
wnd(Log|Project|Std).mniRevealCommitWithHead=HEAD と比較
wnd(Log|Project|Std).mniRevealPrevCommit=前のコミットを表示する
wnd(Log|Project|Std).mniRevealWorkingTree=Reveal Working Tree
wnd(Log|Project|Std).mniRevert=Revert
wnd(Log|Project|Std).mniReviewCommentCreate=コメントを追加
wnd(Log|Project|Std).mniReviewConfigure=設定
wnd(Log|Project|Std).mniReviewDumpDatabase=Dump Database
wnd(Log|Project|Std).mniReviewPullRequestCreate=プルリクエストを作成
wnd(Log|Project|Std).mniReviewPullRequestCreate"Create Merge Request"=マージリクエストを作成
wnd(Log|Project|Std).mniReviewPullRequestCreate"Create Pull Request"=プルリクエストを作成
wnd(Log|Project|Std).mniReviewShowClosedPullRequests=終了したプルリクエストを表示する
wnd(Log|Project|Std).mniReviewSync=同期
wnd(Log|Project|Std).mniRewriteTextFile=Fix Line-Endings
wnd(Log|Project|Std).mniSaveAs=名前を付けて保存
wnd(Log|Project|Std).mniSelectCommittableFiles=Select Committable Files
wnd(Log|Project|Std).mniSelectDirectory=Select Directory
wnd(Log|Project|Std).mniSelectRoot=Select Repository Root
wnd(Log|Project|Std).mniSet-syntax=Syntax Language
wnd(Log|Project|Std).mniSetDepth=深さの設定
wnd(Log|Project|Std).mniShow-line-numbers=行番号の表示
wnd(Log|Project|Std).mniShowChanges=比較する
wnd(Log|Project|Std).mniSkipWorkTree=Toggle 'Skip Worktree'
wnd(Log|Project|Std).mniSortCommitsAsIs=コミットを時間順でソート
wnd(Log|Project|Std).mniSortCommitsMergeParentsFirst=マージの親を優先してコミットをソート
wnd(Log|Project|Std).mniSortCommitsPrimaryParentsFirst=Sort Commits with Primary Parents first
wnd(Log|Project|Std).mniSplitCommit=Split
wnd(Log|Project|Std).mniSquashCommits=Squash Commits
wnd(Log|Project|Std).mniStage=ステージ
wnd(Log|Project|Std).mniStashApply=スタッシュを適用
wnd(Log|Project|Std).mniStashDrop=スタッシュを削除
wnd(Log|Project|Std).mniStashRename=リネーム
wnd(Log|Project|Std).mniStashSave=すべての変更を隠す
wnd(Log|Project|Std).mniStashSaveSelection=選択した変更を隠す
wnd(Log|Project|Std).mniSubmoduleDeactivate=Deactivate
wnd(Log|Project|Std).mniSubmoduleDeinit=Deinit
wnd(Log|Project|Std).mniSubmoduleInit=初期化
wnd(Log|Project|Std).mniSubmoduleRegister=追加
wnd(Log|Project|Std).mniSubmoduleReset=リセット
wnd(Log|Project|Std).mniSubmoduleSync=同期
wnd(Log|Project|Std).mniSubmoduleUnregister=登録を解除
wnd(Log|Project|Std).mniSubtreeAdd=追加
wnd(Log|Project|Std).mniSubtreeMerge=マージ
wnd(Log|Project|Std).mniSubtreePush=プッシュ
wnd(Log|Project|Std).mniSubtreeReset=リセット
wnd(Log|Project|Std).mniSubtreeSplit=Split
wnd(Log|Project|Std).mniSync=同期
wnd(Log|Project|Std).mniUndoLastCommit=直前のコミットを元に戻す
wnd(Log|Project|Std).mniUnstage=アンステージ
wnd(Log|Project|Std).mniView-ignore-whitespaces-all=行比較で空白をすべて無視する
wnd(Log|Project|Std).mniView-ignore-whitespaces-leading-trailing=行比較で先頭と行末の空白を無視する
wnd(Log|Project|Std).mniView-ignore-whitespaces-none=行比較で空白を無視しない
wnd(Log|Project|Std).mniView-remember-as-default=デフォルトとして記憶する
wnd(Log|Project|Std).mniView-settings=設定
wnd(Log|Project|Std).mniView-show-current-line-control=現在の行を長いテキストボックスで表示
wnd(Log|Project|Std).mniViewFromSubmodules=サブモジュールのファイルを表示する
wnd(Log|Project|Std).mniViewIgnored=無視されたファイルを表示する
wnd(Log|Project|Std).mniViewRecursive=Files from Subdirectories
wnd(Log|Project|Std).mniViewRenameSource=Show Rename Source Files
wnd(Log|Project|Std).mniViewSeparateWtAndIndex=Separate Working Tree and Index
wnd(Log|Project|Std).mniViewSetAnchorCommit=Set Anchor Commit
wnd(Log|Project|Std).mniViewSkipped=Show Skipped Files
wnd(Log|Project|Std).mniViewStaged=Show Staged Files
wnd(Log|Project|Std).mniViewStyleIndex=Only Index
wnd(Log|Project|Std).mniViewStyleMixed=Mixed
wnd(Log|Project|Std).mniViewStyleWorkingTree=Only Working Tree
wnd(Log|Project|Std).mniViewToolBar=ツールバーを表示
wnd(Log|Project|Std).mniViewUnchanged=未変更ファイルの表示
wnd(Log|Project|Std).mniViewUnchangedAssumed=Show Assume-Unchanged Files
wnd(Log|Project|Std).mniViewUnversioned=Show Unversioned Files
wnd(Log|Project|Std).mniWindowBranches=ブランチ
wnd(Log|Project|Std).mniWindowChanges=変更点
wnd(Log|Project|Std).mniWindowClose=閉じる
wnd(Log|Project|Std).mniWindowComments=コメント
wnd(Log|Project|Std).mniWindowCommit=コミット
wnd(Log|Project|Std).mniWindowDebugLog=Debug Log
wnd(Log|Project|Std).mniWindowDirectories=リポジトリ
wnd(Log|Project|Std).mniWindowFiles=ファイル
wnd(Log|Project|Std).mniWindowGraph=グラフ
wnd(Log|Project|Std).mniWindowHideView=ビューを隠す
wnd(Log|Project|Std).mniWindowJournal=Journal
wnd(Log|Project|Std).mniWindowLayoutSetMain=Main Perspective
wnd(Log|Project|Std).mniWindowLayoutSetReview=Review Perspective
wnd(Log|Project|Std).mniWindowOutput=出力
wnd(Log|Project|Std).mniWindowWorkingTree=ワーキングツリーウィンドウを表示する
wnd(Log|Project|Std).mniWorktreeAdd=ワークツリーを追加
wnd(Log|Project|Std).mniWorktreePrune=廃止されたワークツリーを整理する
wnd(Log|Project|Std).mniWorktreeRemove=廃止されたワークツリーを整理する
wnd(Log|Project|Std).mnu"Bisect"=Bisect
wnd(Log|Project|Std).mnu"Branch"=ブランチ
wnd(Log|Project|Std).mnu"Branches"=ブランチ
wnd(Log|Project|Std).mnu"Changes"=変更点
wnd(Log|Project|Std).mnu"Commits"=コミット
wnd(Log|Project|Std).mnu"Debug"=デバッグ
wnd(Log|Project|Std).mnu"Edit Git Config"=Git Config を編集
wnd(Log|Project|Std).mnu"Edit"=編集
wnd(Log|Project|Std).mnu"Git-Flow"=Git-Flow
wnd(Log|Project|Std).mnu"Help"=ヘルプ
wnd(Log|Project|Std).mnu"LFS"=LFS
wnd(Log|Project|Std).mnu"Local"=ローカル
wnd(Log|Project|Std).mnu"Query"=クエリ
wnd(Log|Project|Std).mnu"Rebase"=リベース
wnd(Log|Project|Std).mnu"Remote"=リモート
wnd(Log|Project|Std).mnu"Repositories"=リポジトリ
wnd(Log|Project|Std).mnu"Repository"=リポジトリ
wnd(Log|Project|Std).mnu"Resolve"=Resolve
wnd(Log|Project|Std).mnu"Review"=レビュー
wnd(Log|Project|Std).mnu"Submodule"=サブモジュール
wnd(Log|Project|Std).mnu"Subtree"=サブツリー
wnd(Log|Project|Std).mnu"Tools"=ツール
wnd(Log|Project|Std).mnu"View"=表示
wnd(Log|Project|Std).tab"Branches"=ブランチ
wnd(Log|Project|Std).tab"Changes of $1 - $2 \($3\)"=\
 変更点 $1 - $2 \($3\)
wnd(Log|Project|Std).tab"Changes of $1 - $2"=変更点 $1 - $2
wnd(Log|Project|Std).tab"Changes of $1 \($2\) - $3"=\
 変更点 $1 \($2\) - $3
wnd(Log|Project|Std).tab"Changes of $1 \($2\)"=変更点 $1 \($2\)
wnd(Log|Project|Std).tab"Changes"=変更点
wnd(Log|Project|Std).tab"Comments \($1\)"=コメント \($1\)
wnd(Log|Project|Std).tab"Comments"=コメント
wnd(Log|Project|Std).tab"Commit Message"=コミットメッセージ
wnd(Log|Project|Std).tab"Commit"=コミット
wnd(Log|Project|Std).tab"Debug Log"=Debug Log
wnd(Log|Project|Std).tab"Files \(Working Tree\)"=Files \(Working Tree\)
wnd(Log|Project|Std).tab"Files"=ファイル
wnd(Log|Project|Std).tab"Graph \(Initializing Log-Cache...\)"=Graph \(Initializing Log-Cache...\)
wnd(Log|Project|Std).tab"Graph \(Initializing Subtree-Cache...\)"=Graph \(Initializing Subtree-Cache...\)
wnd(Log|Project|Std).tab"Graph \(Initializing...\)"=Graph \(Initializing...\)
wnd(Log|Project|Std).tab"Graph \(Loading...\)"=Graph \(Loading...\)
wnd(Log|Project|Std).tab"Graph \(Running log...\)"=Graph \(Running log...\)
wnd(Log|Project|Std).tab"Graph \(Scanning WT...\)"=Graph \(Scanning WT...\)
wnd(Log|Project|Std).tab"Graph"=グラフ
wnd(Log|Project|Std).tab"Journal"=Journal
wnd(Log|Project|Std).tab"Output"=出力
wnd(Log|Project|Std).tab"Repositories"=リポジトリ
wnd(Log|Project|Std).tbr"  History  "=History
wnd(Log|Project|Std).tbr"Add Tag"=タグを追加
wnd(Log|Project|Std).tbr"Add or Create"=追加または作成
wnd(Log|Project|Std).tbr"Add"=追加
wnd(Log|Project|Std).tbr"Apply Stash"=スタッシュを適用
wnd(Log|Project|Std).tbr"Blame"=ブレーム
wnd(Log|Project|Std).tbr"Branch"=ブランチ
wnd(Log|Project|Std).tbr"Check Out"=チェックアウト
wnd(Log|Project|Std).tbr"Cherry-Pick"=チェリーピック
wnd(Log|Project|Std).tbr"Clone"=クローン
wnd(Log|Project|Std).tbr"Commit"=コミット
wnd(Log|Project|Std).tbr"Compact"=Compact
wnd(Log|Project|Std).tbr"Conflict Solver"=コンフリクトソルバー
wnd(Log|Project|Std).tbr"Delete"=削除
wnd(Log|Project|Std).tbr"Discard"=破棄
wnd(Log|Project|Std).tbr"Drop Stash"=スタッシュを削除
wnd(Log|Project|Std).tbr"Fetch"=フェッチ
wnd(Log|Project|Std).tbr"Finish"=完了
wnd(Log|Project|Std).tbr"Git-Flow"=Git-Flow
wnd(Log|Project|Std).tbr"Index Editor"=Index Editor
wnd(Log|Project|Std).tbr"Integrate"=Integrate
wnd(Log|Project|Std).tbr"Investigate"=履歴調査
wnd(Log|Project|Std).tbr"Local Files"=Local Files
wnd(Log|Project|Std).tbr"Log Selection"=Log Selection
wnd(Log|Project|Std).tbr"Log"=ログ
wnd(Log|Project|Std).tbr"Main"=メイン
wnd(Log|Project|Std).tbr"Merge"=マージ
wnd(Log|Project|Std).tbr"Pull"=プル
wnd(Log|Project|Std).tbr"Push"=プッシュ
wnd(Log|Project|Std).tbr"Rebase"=リベース
wnd(Log|Project|Std).tbr"Remove"=除去
wnd(Log|Project|Std).tbr"Reset Adv."=Reset Adv.
wnd(Log|Project|Std).tbr"Reset"=リセット
wnd(Log|Project|Std).tbr"Revert"=Revert
wnd(Log|Project|Std).tbr"Review"=レビュー
wnd(Log|Project|Std).tbr"Save Stash"=スタッシュに保存
wnd(Log|Project|Std).tbr"Search"=検索
wnd(Log|Project|Std).tbr"Side by Side"=並べて表示
wnd(Log|Project|Std).tbr"Stage"=ステージ
wnd(Log|Project|Std).tbr"Start"=開始
wnd(Log|Project|Std).tbr"Sync"=同期
wnd(Log|Project|Std).tbr"Unified"=単独表示
wnd(Log|Project|Std).tbr"Unstage"=アンステージ
wnd(Log|Project|Std).tbt"Clear logging."=ログをクリア
wnd(Log|Project|Std).tbt"Commit Message History"=コミットメッセージの履歴
wnd(Log|Project|Std).tbt"Hosting provider is not configured for the current repository. Go to the Preferences to add a configuration."=\
 現在のリポジトリにホスティングプロバイダーが設定されていません。環境設定から、設定を追加してください。
wnd(Log|Project|Std).tbt"If selected, files from subdirectories are shown."=\
 選択した場合、サブディレクトリにあるファイルも表示されます。
wnd(Log|Project|Std).tbt"If selected, the directories will be shown."=\
 ディレクトリが表示されます。
wnd(Log|Project|Std).tbt"Indicates how many files or directories are selected."=\
 選択されているファイルまたはディレクトリの数を示します。
wnd(Log|Project|Std).tbt"Interpret the search pattern as regular expression."=\
 検索パターンを正規表現として解釈します。
wnd(Log|Project|Std).tbt"Options"=オプション
wnd(Log|Project|Std).tbt"Reading incoming merge requests from '$1'."=\
 $1 から受信したマージ要求を読み取る
wnd(Log|Project|Std).tbt"Reading repository info from '$1'."=Reading repository info from '$1'.
wnd(Log|Project|Std).tbt"Refresh information from GitLab."=Refresh information from GitLab.
wnd(Log|Project|Std).tbt"Show directories tree"=Show directories tree
wnd(Log|Project|Std).tbtAnnotate=Show a blame \(annotated\) view of the selected file.
wnd(Log|Project|Std).tbtBranchAdd=現在のコミットに対して新しいブランチを追加します。
wnd(Log|Project|Std).tbtBranchAddTag=現在のコミットに対して新しいタグを追加します。
wnd(Log|Project|Std).tbtCheckout=既存のコミットをチェックアウトします。
wnd(Log|Project|Std).tbtCherryPick=他のブランチからの変更をマージします。
wnd(Log|Project|Std).tbtClearOutput=「出力」ペーンをクリアします。
wnd(Log|Project|Std).tbtCommit=ローカルの変更をコミットします。
wnd(Log|Project|Std).tbtConflictSolver=Open the Conflict Solver \(or configured external merge tool\) to resolve conflicts.
wnd(Log|Project|Std).tbtDelete=選択したローカルファイルまたはディレクトリを削除します。
wnd(Log|Project|Std).tbtDiscard=ローカルの変更を破棄します
wnd(Log|Project|Std).tbtFetch=リモートリポジトリからコミットを取得し、（オプションで）ローカルの可能なコミットと統合します。
wnd(Log|Project|Std).tbtFlowContext=Finish a Git-Flow feature.
wnd(Log|Project|Std).tbtFlowFeatureStart=Start a new Git-Flow feature.
wnd(Log|Project|Std).tbtFlowHotfixFinish=Finish a Git-Flow hotfix.
wnd(Log|Project|Std).tbtFlowHotfixStart=Start a new Git-Flow hotfix.
wnd(Log|Project|Std).tbtFlowIntegrateDevelop=Integrate new base commits into a Git-Flow feature.
wnd(Log|Project|Std).tbtGoto-next-diff=次の変更点に進みます。
wnd(Log|Project|Std).tbtGoto-previous-diff=前の変更点に移動します。
wnd(Log|Project|Std).tbtIndexEditor=行単位のステージングなど、選択したファイルのインデックスの状態を編集することができます。
wnd(Log|Project|Std).tbtInvestigate=Investigate history line-wise with DeepGit.
wnd(Log|Project|Std).tbtLog=選択したファイルやディレクトリの履歴を表示します。
wnd(Log|Project|Std).tbtLogRepository=リポジトリ全体の履歴を表示します。
wnd(Log|Project|Std).tbtMerge=他のブランチからの変更をマージします。
wnd(Log|Project|Std).tbtPush=ローカルのコミットをリモートの origin リポジトリにプッシュします。
wnd(Log|Project|Std).tbtRebaseHeadTo=選択したコミットに対して、HEADコミットを適用します。
wnd(Log|Project|Std).tbtRemove=選択したファイルやディレクトリをリポジトリから削除します。
wnd(Log|Project|Std).tbtReset=現在のHEADを別のコミットにリセットします。
wnd(Log|Project|Std).tbtResetAdvanced=Reset current HEAD to another commit and keep the difference in Index or Working Tree.
wnd(Log|Project|Std).tbtRevealHomeCommit=Reveal HEAD/working tree in graph.
wnd(Log|Project|Std).tbtRevealPrevCommit=Reveal selected commits before invoking Reveal Working Tree.
wnd(Log|Project|Std).tbtRevealWorkingTree=Reveal working tree node in graph.
wnd(Log|Project|Std).tbtRevert=Undo the changes of an existing commit by "reverse" merging it.
wnd(Log|Project|Std).tbtStage=作業中のツリーファイルをインデックスに格納し、次のコミットに備えます。
wnd(Log|Project|Std).tbtStashApply=スタッシュからローカルに変更を再適用します。
wnd(Log|Project|Std).tbtStashDrop=Drop one or more stashes from the repository.
wnd(Log|Project|Std).tbtStashSave=現在のローカルの変更をスタッシュに退避します。
wnd(Log|Project|Std).tbtStdSetModeHistory=ヒストリービューを表示する。
wnd(Log|Project|Std).tbtStdSetModeWt=Show the local files of the repository \(Working Tree\).
wnd(Log|Project|Std).tbtSync=現在のブランチのローカルコミットをプッシュし、リモートの変更をプルします。
wnd(Log|Project|Std).tbtUnstage=インデックスからステージングされた変更を削除します。
wnd(Log|Project|Std).tbtViewFromSubmodules=サブモジュールのファイルが表示されます。
wnd(Log|Project|Std).tbtViewIgnored=無視されたファイルが表示されます。
wnd(Log|Project|Std).tbtViewRenameSource=If selected, removed/missing source files of detected renames will be shown.
wnd(Log|Project|Std).tbtViewSkipped=スキップされたファイルが表示されます。
wnd(Log|Project|Std).tbtViewStaged=If selected, files with staged \(Index\) changes and without working tree changes will be shown.
wnd(Log|Project|Std).tbtViewUnchanged=選択すると、変更されていないファイルが表示されます。
wnd(Log|Project|Std).tbtViewUnchangedAssumed=選択すると、「assume-unchanged」フラグを持つファイルが表示されます。
wnd(Log|Project|Std).tbtViewUnversioned=選択すると、まだバージョン管理されていないファイルが表示されます。
wnd(Log|Project|Std).tbtWindowLayoutSetMain=メイン の表示に切り替えます。
wnd(Log|Project|Std).tbtWindowLayoutSetReview=レビュー向けの表示に切り替えます。
