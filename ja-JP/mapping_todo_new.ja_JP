*.btn"OK"=OK
dlgProgress.tle"Jump To"=Jump To
dlgProgress.tle"Layouting Graph"=Layouting Graph
dlgScCustomizeAccelerators.col"Accelerator"=Accelerator
dlgScCustomizeAccelerators.edt"Accelerator"=Accelerator
dlgScCustomizeAccelerators.hdl=Customize Accelerators
dlgScCustomizeAccelerators.inf=Double click on the menu item for which the accelerator should be changed, then press the accelerator keys and click the Assign button.
dlgScDevOpsSslFingerprintNew.btn"Accept"=Accept
dlgScDevOpsSslFingerprintNew.btn"Reject"=Reject
dlgScJiraCommitMessageSelect.col"Fix Version"=Fix Version
dlgScJiraCommitMessageSelect.lbl"Enter the JQL-Queries which will be loaded in the specified order: every query on a new line, \$\{projects\} will be substituted by the JIRA project key\(s\) which is derived or explicitly specified in your .gitbugtraq file.\n\nYou can compose a JQL query directly in JIRA, using Issues\|Search and go to Advanced view there."=\
 Enter the JQL-Queries which will be loaded in the specified order: every query on a new line, \$\{projects\} will be substituted by the JIRA project key\(s\) which is derived or explicitly specified in your .gitbugtraq file.\n\nYou can compose a JQL query directly in JIRA, using Issues\|Search and go to Advanced view there.
dlgScJiraResolveIssue.edt"Resolution"=Resolution
dlgScPropertyEdit.rbt"false"=false
dlgScPropertyEdit.rbt"true"=true
dlgScSslFingerprint.btn"Accept"=Accept
dlgScSslFingerprint.btn"Reject"=Reject
dlgScTextSettings.chk"Split leading/trailing added or removed lines into separate blocks"=\
 Split leading/trailing added or removed lines into separate blocks
dlgScTextSettings.chk"Trim equal start/end of Inner-Line changes"=\
 Trim equal start/end of Inner-Line changes
dlgScTextSettings.rbt"Off"=Off
dlgScTextSettings.rbt"Trailing and changed"=Trailing and changed
dlgSgAbortMergingConfirm.fur=Your working tree is in 'merging' state. You may abort it to get out of this state and freshly start over with the merge afterwards.\n\nAborting will try to reconstruct the pre-merge state \(by invoking 'git merge --abort'\)!
dlgSgAbortRebasingConfirm.fur=Your working tree is in 'rebasing' state. You may abort rebasing; if you just want to skip the current patch, use Branch \| Rebase \| Rebase HEAD To instead.\n\nAborting will clean any local modification \(by invoking 'git reset --hard'\)!
dlgSgAbortRevertingConfirm.fur=Your working tree is in 'reverting' state. You may abort it to get out of this state and freshly start over with the revert afterwards.\n\nAborting will clean any local modification \(by invoking 'git reset --hard'\)!
dlgSgBisectStartConfirm.btn"Start Bisect with Bad HEAD"=Start Bisect with Bad HEAD
dlgSgBisectStartConfirm.btn"Start Bisect"=Start Bisect
dlgSgBisectStartConfirm.hdl=Should the bisect be started with a bad commit?
dlgSgBisectStartConfirm.tle=Start Bisect
dlgSgCheckoutFastForwardMerge.btn"Just Checkout"=Just Checkout
dlgSgCheckoutFastForwardMerge.fur=Fast-forward-merging automatically moves the branch forward to the tracked remote branch.
dlgSgCherryPickUnpushedCommits.fur=At least one of the selected commits has not been pushed yet, hence cherry-pick is only local and won't be translated to SVN \(mergeinfo\).
dlgSgClean.btn"Clean Working Tree"=Clean Working Tree
dlgSgClean.tle=Clean Working Tree
dlgSgClone.chk"Create upstream remote"=Create upstream remote
dlgSgCommit.rbt"Merge commit \(multiple parents\)"=Merge commit \(multiple parents\)
dlgSgCommit.rbt"Simple commit \(one parent, \"squash\"\)"=Simple commit \(one parent, "squash"\)
dlgSgCommit.wrn"When modifying or splitting a commit, you first need to commit all local changes before being able to continue the rebase."=\
 When modifying or splitting a commit, you first need to commit all local changes before being able to continue the rebase.
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.btn"Continue Rebase"=Continue Rebase
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.fur=The repository is in 'rebasing' state. Instead of creating an additional commit as part of your rebased commits, you will usually just want continue the rebase.
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.hdl=Do you want to continue the rebase or create an additional commit?
dlgSgCommitSelectMessageFromLog.chk"Add 'fixup!' prefix for easier automatic squashing using Interactive Rebase"=\
 Add 'fixup!' prefix for easier automatic squashing using Interactive Rebase
dlgSgCommitSelectMessageFromLog.mni"Author"=Author
dlgSgCommitSelectMessageFromLog.mni"File Content \(very expensive\)"=File Content \(very expensive\)
dlgSgCommitSelectMessageFromLog.mni"File \(expensive\)"=File \(expensive\)
dlgSgCommitSelectMessageFromLog.mni"Forget Pattern"=Forget Pattern
dlgSgCommitSelectMessageFromLog.mni"Remember Pattern"=Remember Pattern
dlgSgCommitSelectMessageFromLog.tle=Select Commit Message
dlgSgCommitToDetachedHead.btn"Commit Anyway"=Commit Anyway
dlgSgCommitToDetachedHead.hdl=Do you want to commit to a detached HEAD?
dlgSgConflictSolverMarkResolved.btn"Leave Conflicted"=Leave Conflicted
dlgSgConflictSolverStageForCommit.btn"Don't Stage"=Don't Stage
dlgSgCustomizeProjectUi.col"Accelerator"=Accelerator
dlgSgCustomizeProjectUi.col"Selected"=Selected
dlgSgCustomizeProjectUi.edt"Accelerator"=Accelerator
dlgSgCustomizeProjectUi.tab"Accelerators"=Accelerators
dlgSgDiscard.btn"Discard to Stash"=Discard to Stash
dlgSgDiscardNoFilesFound.fur=Neither staged files nor locally changed files were found.
dlgSgDiscardNoFilesFound.hdl=There is nothing to discard.
dlgSgDiscardRevertToHead.hdl%1=Do you want to reset $1 files back to their HEAD state?
dlgSgDiscardRevertToIndex.hdl%1=Do you want to reset $1 files back to their Index state?
dlgSgDiscardRevertTo(Head|Index).fur=The content might be hard to restore!
dlgSgErrorUtilsClientException.fur"Commit '$1' was not found in repository."=\
 Commit '$1' was not found in repository.
dlgSgErrorUtilsClientException.fur"Could not determine URL for submodule $1. Is it correctly initialized?"=\
 Could not determine URL for submodule $1. Is it correctly initialized?
dlgSgErrorUtilsClientException.fur"Repository '$1' is not valid."=Repository '$1' is not valid.
dlgSgErrorUtilsClientException.fur%1=GIT_DIR for repository at '$1' does not exist.
dlgSgFileCompareNoChanges.hdl=Open the file compare though no changes will be shown?
dlgSgFindObject.edt"Repository Path, Commit ID or Ref"=\
 Repository Path, Commit ID or Ref
dlgSgFlowBranchDivergedHandlerFastForward.btn"Fast-Forward"=Fast-Forward
dlgSgFlowBranchDivergedHandlerFastForward.fur%3=The local branch '$1' is behind its tracked branch '$2'. You may fast-forward now or do it manually later, e.g. by checking out the branch '$3'.
dlgSgFlowBranchDivergedHandlerFastForward.hdl%2=Should branch '$1' be fast-forwarded to '$2'?
dlgSgFlowBranchDivergedHandlerFastForward.tle=Start Feature
dlgSgFlowBranchDivergedHandlerReplaceRemote.fur%2=The local branch '$1' seems to contain more recent but rewritten commits of remote branch '$2'.\n\nIf you are not sure whether the local branch is actually more recent than the remote branch, you should better cancel this operation and investigate local and remote changes in more detail.
dlgSgFlowBranchDivergedHandlerReplaceRemote.hdl%2=Should branch '$1' replace remote branch '$2'?
dlgSgFlowBranchDivergedHandlerReplaceRemote.tle=Finish Feature
dlgSgFlowBranchDivergedHandlerResetToRemote.fur%2=The remote branch '$1' seems to contain more recent but rewritten commits of local branch '$2'.\n\nIf you are not sure whether the remote branch is actually more recent than the local branch, you should better cancel this operation and investigate local and remote changes in more detail.
dlgSgFlowBranchDivergedHandlerResetToRemote.hdl%2=Should branch '$1' be reset to remote branch '$2'?
dlgSgFlowBranchDivergedHandlerResetToRemote.tle=Finish Feature
dlgSgFlowConfigure.edt"Feature Branches"=Feature Branches
dlgSgFlowConfigure.edt"Git-Flow Type"=Git-Flow Type
dlgSgFlowConfigure.edt"Hot-Fix Branches"=Hot-Fix Branches
dlgSgFlowConfigure.edt"Main Development Branch"=Main Development Branch
dlgSgFlowConfigure.edt"Master Branch"=Master Branch
dlgSgFlowConfigure.edt"Prefix for Feature Branches"=Prefix for Feature Branches
dlgSgFlowConfigure.edt"Release Branches"=Release Branches
dlgSgFlowConfigure.edt"Version Tags"=Version Tags
dlgSgFlowConfigure.hdl=Configure the branch naming scheme
dlgSgFlowConfigure.inf=Configure how your feature, release and hotfix branches should be named.
dlgSgFlowConfigure.rbt"Full \(feature, release, hotfix, support branches\)"=\
 Full \(feature, release, hotfix, support branches\)
dlgSgFlowConfigure.rbt"Light \(just feature branches\)"=Light \(just feature branches\)
dlgSgFlowConfigureChangeOrSwitchOff.btn"Switch-Off Git-Flow"=Switch-Off Git-Flow
dlgSgFlowConfigureChangeOrSwitchOff.fur=Git-Flow is already configured for this repository. You may change the Git-Flow configuration or switch-off the Git-Flow features. In both cases, the file ~/.git/config will be modified accordingly.
dlgSgFlowConfigureChangeOrSwitchOff.hdl=Do you want to change or switch-off the Git-Flow configuration?
dlgSgFlowFeatureFinish.chk"Fetch latest commits and remove remote feature branch"=\
 Fetch latest commits and remove remote feature branch
dlgSgFlowFeatureFinish.hdl=Finish current feature
dlgSgFlowFeatureFinish.inf"Choose how to finish the current feature. This operation will integrate the feature into the '$1' branch."=\
 Choose how to finish the current feature. This operation will integrate the feature into the '$1' branch.
dlgSgFlowFeatureFinish.inf"Choose how to finish the feature branch '$1'. This operation will integrate the feature into the '$2' branch."=\
 Choose how to finish the feature branch '$1'. This operation will integrate the feature into the '$2' branch.
dlgSgFlowFeatureFinish.rbt"Create simple commit \(squash\)"=Create simple commit \(squash\)
dlgSgFlowFeatureFinish.rbt"Rebase onto '$1'"=Rebase onto '$1'
dlgSgFlowFeatureFinish.tle=Finish Feature
dlgSgFlowFeatureStart.edt"Feature Name"=Feature Name
dlgSgFlowFeatureStart.err"Invalid feature name: The name must not end with a slash or dot."=\
 Invalid feature name: The name must not end with a slash or dot.
dlgSgFlowFeatureStart.hdl=Start a new feature
dlgSgFlowFeatureStart.inf%1=Enter the name of the new feature branch. This operation will fork a new branch from the '$1' branch.
dlgSgFlowFeatureStart.lbl"Resulting Branch: $1"=Resulting Branch: $1
dlgSgFlowFeatureStart.tle=Start Feature
dlgSgFlowHotfixFinish.chk"Create version tag"=Create version tag
dlgSgFlowHotfixFinish.chk"Create version tag:"=Create version tag:
dlgSgFlowHotfixFinish.chk"Fetch latest '$1' commits"=Fetch latest '$1' commits
dlgSgFlowHotfixFinish.chk"Push results and remove remote hotfix branch"=\
 Push results and remove remote hotfix branch
dlgSgFlowHotfixFinish.hdl=Finish a hotfix
dlgSgFlowHotfixFinish.inf"Choose how to finish the current hotfix. This operation will merge the hotfix into the '$1' and '$2' branches."=\
 Choose how to finish the current hotfix. This operation will merge the hotfix into the '$1' and '$2' branches.
dlgSgFlowHotfixFinish.inf"Choose how to finish the hotfix branch '$1'. This operation will merge the hotfix into the '$2' and '$3' branches."=\
 Choose how to finish the hotfix branch '$1'. This operation will merge the hotfix into the '$2' and '$3' branches.
dlgSgFlowHotfixFinish.inf"Choose how to finish the hotfix branch '$1'."=\
 Choose how to finish the hotfix branch '$1'.
dlgSgFlowHotfixFinish.tle=Finish Hotfix
dlgSgFlowHotfixStart.chk"Fetch from '$1' branch"=Fetch from '$1' branch
dlgSgFlowHotfixStart.chk"Fetch from base branch"=Fetch from base branch
dlgSgFlowHotfixStart.edt"Hotfix Name"=Hotfix Name
dlgSgFlowHotfixStart.hdl=Start a new hotfix
dlgSgFlowHotfixStart.inf%1=Enter the name of the new hotfix branch. This operation will fork a new branch from the '$1' branch.
dlgSgFlowHotfixStart.lbl"Resulting Branch: $1"=Resulting Branch: $1
dlgSgFlowHotfixStart.tle=Start Hotfix
dlgSgFlowIntegrateDevelop.btn"Integrate"=Integrate
dlgSgFlowIntegrateDevelop.chk"Fetch latest '$1' commits from remote repository"=\
 Fetch latest '$1' commits from remote repository
dlgSgFlowIntegrateDevelop.hdl%1=Integrate commits from '$1'
dlgSgFlowIntegrateDevelop.inf"Merge or rebase commits from the main development line to the current feature."=\
 Merge or rebase commits from the main development line to the current feature.
dlgSgFlowIntegrateDevelop.inf"Merge or rebase commits from the main development line to the feature branch '$1'."=\
 Merge or rebase commits from the main development line to the feature branch '$1'.
dlgSgFlowIntegrateDevelop.rbt"Rebase current feature onto '$1'"=Rebase current feature onto '$1'
dlgSgFlowIntegrateDevelop.tle=Integrate Develop
dlgSgFlowReleaseFinish.chk"Create version tag"=Create version tag
dlgSgFlowReleaseFinish.chk"Create version tag:"=Create version tag:
dlgSgFlowReleaseFinish.chk"Fetch latest '$1' and '$2' commits"=\
 Fetch latest '$1' and '$2' commits
dlgSgFlowReleaseFinish.chk"Push results and remove remote release branch"=\
 Push results and remove remote release branch
dlgSgFlowReleaseFinish.hdl=Finish a release
dlgSgFlowReleaseFinish.inf"Choose how to finish the release branch '$1'. This operation will merge the current release into the '$2' and '$3' branches."=\
 Choose how to finish the release branch '$1'. This operation will merge the current release into the '$2' and '$3' branches.
dlgSgFlowReleaseFinish.inf"Choose how to finish the release branch '$1'."=\
 Choose how to finish the release branch '$1'.
dlgSgFlowReleaseFinish.tle=Finish Release
dlgSgFlowReleaseStart.chk"Fetch from base branch"=Fetch from base branch
dlgSgFlowReleaseStart.edt"Release Name"=Release Name
dlgSgFlowReleaseStart.hdl=Start a new release
dlgSgFlowReleaseStart.inf%1=Enter the name of the new release branch. This operation will fork a new branch from the '$1' branch.
dlgSgFlowReleaseStart.lbl"Resulting Branch: $1"=Resulting Branch: $1
dlgSgFlowReleaseStart.tle=Start Release
dlgSgGitHubGenerateToken.btn"Authenticate"=Authenticate
dlgSgGitHubPullRequestCreate.chk"Draft \(don\'t notify code owners yet\)"=\
 Draft \(don\'t notify code owners yet\)
dlgSgGitHubPullRequestMerge.hdl=Merge a Pull Request
dlgSgGitHubPullRequestMerge.lbl"If you have integrated the Pull Request manually, choose this option to close the Pull Request on the server."=\
 If you have integrated the Pull Request manually, choose this option to close the Pull Request on the server.
dlgSgGitHubPullRequestMerge.lbl"If your are fine with the Pull Request changes, choose this option to perform the merge directly on the GitHub server."=\
 If your are fine with the Pull Request changes, choose this option to perform the merge directly on the GitHub server.
dlgSgGitHubPullRequestMerge.rbt"Mark as merged on GitHub Server"=\
 Mark as merged on GitHub Server
dlgSgGitHubPullRequestMerge.tle=Merge Pull Request
dlgSgGitLabGenerateToken.hdl=Enter the generated token
dlgSgGitLabGenerateToken.tle=Request Access Token
dlgSgGitLabSettingsInvalidToken.tle=Input Validation
dlgSgHistoryModifySplitConfirm.btn"Split"=Split
dlgSgHistoryModifySplitConfirm.fur='Modify' will stop after the commit.\n\n'Split' will put the changes into the Index. You may discard some changes that should go into the second commit.\n\nAfter you've done the changes, process the remaining commits by continuing the rebase.
dlgSgHistoryModifySplitConfirm.tle=Modify or Split Commit
dlgSgHistoryPushCommitsReplaceRemoteBranch.hdl%1=Do you want to replace the remote branch by commit $1?
dlgSgHistoryPushCommitsReplaceRemoteBranch.tle=Push Up To
dlgSgHistoryPushCommitsUpToCommit.hdl%1=Do you want to push changes up to commit $1?
dlgSgHistoryPushCommitsUpToCommit.tle=Push Up To
dlgSgHistoryPushedCommitsModifyPushedCommits.tle=Journal
dlgSgHistorySquash.btn"Squash Commits"=Squash Commits
dlgSgHistorySquash.edt"Authorship"=Authorship
dlgSgHistorySquash.hdl=Squash multiple commits
dlgSgHistorySquash.inf=The selected commits will be replaced by one squashed commit containing all changes of the individual commits.
dlgSgHistorySquash.tle=Squash Commits
dlgSgHostingProviderAdd.edt"Domain"=Domain
dlgSgHostingProviderAdd.edt"Server URL \(including collection\)"=Server URL \(including collection\)
dlgSgHttpPasswordAuthenticationFailedCause1.fur%3=The OAuth-access token could not be requested. Most likely your $1 configuration has changed and SmartGit's stored OAuth credentials are invalid.\n\nTo resolve, recreate the $2 hosting provider in the Preferences.\n\nDetails:\n\n$3
dlgSgHttpPasswordAuthenticationFailedCause1.tle=HTTP authentication
dlgSgIgnoreEdit.mni"Reveal"=Reveal
dlgSgIgnoreFile.btn"Remove && Ignore"=Remove && Ignore
dlgSgIgnoreFile.edt"Ignore File"=Ignore File
dlgSgJournalFormCommitCantBeModified.fur=Not part of your head's primary-parent history
dlgSgLfsInstallConfirm.fur=This will configure hooks and filters required for LFS.
dlgSgLfsInstallConfirm.hdl=Would you like to initialize this repository for Large File Support \(LFS\)?
dlgSgLfsInstallConfirm.tle=LFS Install
dlgSgLfsTrack.err"File '$1' does not match the specified pattern."=\
 File '$1' does not match the specified pattern.
dlgSgLfsTrack.hdl=Mark a file or pattern as tracked
dlgSgLfsTrack.tle=LFS Track
dlgSgLocalChangesFormTakeBlockListenerRevertWorkingTreeFile.btn"Revert"=Revert
dlgSgLocalChangesFormTakeBlockListenerRevertWorkingTreeFile.fur%1=You are about to apply lines from the Index to the working tree file '$1'. The modifications will be saved immediately.
dlgSgLocalChangesFormTakeBlockListenerRevertWorkingTreeFile.tle=Revert Working Tree File
dlgSgLogCheckoutFileAs.btn"Save After"=Save After
dlgSgLogCheckoutFileAs.btn"Save Before"=Save Before
dlgSgLogCheckoutFileAs.inf"Select the local file to saved to."=\
 Select the local file to saved to.
dlgSgLogCheckoutFileAs.inf"Select whether to save the file state Before or After the selected commit."=\
 Select whether to save the file state Before or After the selected commit.
dlgSgLogCompareSelectedFilesAgainstEachOther.btn"Compare Separately"=Compare Separately
dlgSgLogCompareSelectedFilesAgainstEachOther.fur=You may compare the selected files against each other or open up two separate compares for each file against its previous state.
dlgSgLogCompareSelectedFilesAgainstEachOther.hdl=Do you want to compare the selected files against each other?
dlgSgLogCompareWithWorkingTree.tle=Compare with Working Tree
dlgSgLogGraphRootSwitch.chk"Include tracked remote branches"=Include tracked remote branches
dlgSgLogGraphRootSwitch.hdl=Select shown branches
dlgSgLogGraphRootSwitch.inf=Select the branches for which to show commits in the graph.
dlgSgLogGraphRootSwitch.tle=Select Branches
dlgSgLogOpenFailedRepository.fur=Is the repository still valid?
dlgSgLogOpenFailedRepository.hdl=Repository could not be opened.
dlgSgLogOpenFailedSubmodule.fur=Is the repository still valid?
dlgSgLogOpenNewWindow.fur=There is already an existing Log window which can be revealed.
dlgSgLogOpenNewWindow.hdl=Do you want to open a new Log window?
dlgSgLogOpenSubmoduleLinkOrRepository.btn"History of Updates"=History of Updates
dlgSgLogOpenSubmoduleLinkOrRepository.hdl=Do you want to show the history of submodule updates or the Log for the submodule repository?
dlgSgLogRefreshRepositoryInvalid.btn"Remove Repository"=Remove Repository
dlgSgLogRefreshRepositoryInvalid.fur%1=This could mean that the repository at\n\n$1was removed or renamed outside SmartGit.
dlgSgLogRefreshRepositoryInvalid.hdl%1=The opened repository '$1' became invalid.
dlgSgMergeHowToMerge.btn"Fast-Forward"=Fast-Forward
dlgSgMergeHowToMerge.btn"Squash-Merge"=Squash-Merge
dlgSgOpenRepositoryInitializeChooseVcs.fur=The specified directory does not appear to be a valid Git or Mercurial repository.
dlgSgOpenRepositoryInitializeChooseVcs.hdl=What VCS should be used to initialize 'swt'?
dlgSgOpenRepositoryInitializeGit.btn"Initialize"=Initialize
dlgSgOpenRepositoryInitializeGit.fur=The specified directory does not appear to be a valid Git repository.
dlgSgOpenRepositoryInitializeGit.hdl%1=Should '$1' be initialized as a new Git repository?
dlgSgOutput.chk"Don't show again for these $1 warnings"=\
 Don't show again for these $1 warnings
dlgSgOutput.chk"Don't show again for this warning"=\
 Don't show again for this warning
dlgSgOutput.chk"Show automatically for failed command"=Show automatically for failed command
dlgSgOutput.lbl"If in question, please ask your repository administrator."=\
 If in question, please ask your repository administrator.
dlgSgOutput.tle"Output"=Output
dlgSgPingRepositoryFailed.hdl%1=Could not connect to the repository '$1'.
dlgSgPreferences.btn"Re-Add Defaults"=Re-Add Defaults
dlgSgPreferences.cdl"Executables"=Executables
dlgSgPreferences.cdl"Git Config"=Git Config
dlgSgPreferences.col"Accelerator"=Accelerator
dlgSgPreferences.edt"Functionality\*"=Functionality\*
dlgSgPreferences.edt"GPG Program"=GPG Program
dlgSgPreferences.edt"Hg Executable"=Hg Executable
dlgSgPreferences.edt"Known credentials"=Known credentials
dlgSgPreferences.edt"Prefer"=Prefer
dlgSgPreferences.lbl"Here you can view your account's 'gitconfig'. Because it contains 'include'-sections you need to edit it manually."=\
 Here you can view your account's 'gitconfig'. Because it contains 'include'-sections you need to edit it manually.
dlgSgPreferences.lbl"In order to use all SmartGit functionality, you need to have command line Git or Mercurial installed on your system. Provide here the full path to the installed 'git' or 'hg' executable."=\
 In order to use all SmartGit functionality, you need to have command line Git or Mercurial installed on your system. Provide here the full path to the installed 'git' or 'hg' executable.
dlgSgPreferences.rbt"Light"=Light
dlgSgPreferences.rbt"Smart upper case \('FoB' will match 'FooBar', but neither 'foobar' nor 'Fob'\)"=\
 Smart upper case \('FoB' will match 'FooBar', but neither 'foobar' nor 'Fob'\)
dlgSgProcessKiller.btn"Wait"=Wait
dlgSgProcessKiller.lbl"This usually happens when SmartGit is configured to use the system SSH client, which needs to ask for credentials. Due to technical issues, SmartGit can't read the SSH client's input request and hence hangs.\n\nIf you think the process is hanging, click the Exit Process button, otherwise Wait."=\
 This usually happens when SmartGit is configured to use the system SSH client, which needs to ask for credentials. Due to technical issues, SmartGit can't read the SSH client's input request and hence hangs.\n\nIf you think the process is hanging, click the Exit Process button, otherwise Wait.
dlgSgProviderPullRequestCreateNoTargetRepositories.fur=The repository is no GitHub-fork and there are no other remotes which are forks of this repository.
dlgSgProviderPullRequestCreateNoTargetRepositories.hdl=No target repositories found.
dlgSgProviderPullRequestDropConfirmMr.btn"Drop"=Drop
dlgSgProviderPullRequestDropConfirmMr.fur=The merge request itself will not be deleted on the server.
dlgSgProviderPullRequestDropConfirmMr.tle=Drop Merge Request
dlgSgProviderPullRequestDropConfirmPr.btn"Drop"=Drop
dlgSgProviderPullRequestDropConfirmPr.fur=The pull request itself will not be deleted on the server.
dlgSgProviderPullRequestDropConfirmPr.hdl%1=Do you really want to drop the local commits of pull request $1?
dlgSgProviderPullRequestDropConfirmPr.tle=Drop Pull Request
dlgSgProviderPullRequestRetractMr.btn"Retract"=Retract
dlgSgProviderPullRequestRetractMr.inf=Enter the comment which will be logged with the closed merge request.
dlgSgProviderPullRequestRetractPr.btn"Retract"=Retract
dlgSgProviderPullRequestRetractPr.inf=Enter the comment which will be logged with the closed pull request.
dlgSgPull.inf"Select the remote repository to pull. In contrast to Fetch Only, Pull will also incorporate the fetched changes \(expand the options below to configure\)."=\
 Select the remote repository to pull. In contrast to Fetch Only, Pull will also incorporate the fetched changes \(expand the options below to configure\).
dlgSgPullConfiguration.chk"Remember as default for other repositories"=\
 Remember as default for other repositories
dlgSgPullConfiguration.hdl=Configure how to pull
dlgSgPullConfiguration.inf=Specify whether to merge or rebase on Pull for the current repository.
dlgSgPullConfiguration.lbl"Merging produces additional 'merge'-commits and is not recommended. It might however be a convention of your repository \(ask the maintainer to find out\)."=\
 Merging produces additional 'merge'-commits and is not recommended. It might however be a convention of your repository \(ask the maintainer to find out\).
dlgSgPullConfiguration.lbl"Rebasing gives a clean linear history and is recommended in general."=\
 Rebasing gives a clean linear history and is recommended in general.
dlgSgPullMergeInsteadOfRebase.hdl=Do you want to merge your local changes instead of rebasing?
dlgSgPullNoRemoteRepository.fur=You first need to add a remote repository to pull from.
dlgSgPullNoRemoteRepository.hdl=No remote repository has been found.
dlgSgPullOrJustFetch.fur=You can change the Pull behavior in the Repository Settings.
dlgSgPullOrJustFetch.hdl%1=Do you want to pull or just fetch $1 repositories?
dlgSgPushForcedSvn.fur=You are about to replace the remote branch. Revisions of that branch might not be \(easily\) accessible anymore.
dlgSgPushOverwriteRemoteBranchConfirm.fur=You are about to replace the remote branch, which contains commits that you haven't seen at all. Maybe you want to merge/rebase onto the remote changes before?
dlgSgPushToRef.inf=Select the target repository where to push the ref\(s\).
dlgSgPushToRemoteRemoveTargetBranches.fur=Removed branches and their commits in the target remote which will be lost afterwards.
dlgSgRebase.btn"Rebase HEAD to"=Rebase HEAD to
dlgSgRebase.hdl=Rebase HEAD to
dlgSgRebase.inf=Select the commit to which the HEAD commits should be rebased.
dlgSgRebaseContinueAfterSplittingCommit.fur%1=The splitting of commit $1 still is in progress and all changes of this commit have been applied.
dlgSgRebaseContinueNothingToCommitContinue.fur=The repository is in 'rebasing' state, but there is nothing to commit, so you may just continue the Rebase.
dlgSgRebaseContinueNothingToCommitSkip.btn"Skip Commit"=Skip Commit
dlgSgRebaseContinueNothingToCommitSkip.fur=The repository is in 'rebasing' state, but there is nothing to commit, so you may just skip this rebased commit.
dlgSgRebaseContinueNothingToCommitSkip.hdl=Do you want to skip this rebased commit?
dlgSgRebaseContinuePreserveUntrackedFiles.btn"Preserve"=Preserve
dlgSgRebaseContinuePreserveUntrackedFiles.fur=Your working tree contains untracked files. You may either choose to preserve them in the working tree or include them for the rebased commit.
dlgSgRebaseContinuePreserveUntrackedFiles.hdl=Do you want to preserve untracked files in your working tree?
dlgSgRebaseContinueWithoutApplyingAllChanges.btn"Continue Anyway"=Continue Anyway
dlgSgRebaseContinueWithoutApplyingAllChanges.btn"Put Changes into Index"=Put Changes into Index
dlgSgRebaseContinueWithoutApplyingAllChanges.fur%1=The splitting of commit $1 still is in progress, but not all changes of this commit have been applied.\n\nIf this is intentional, you can continue. Otherwise, you should click 'Put Changes into Index' and review your changes.
dlgSgRebaseContinueWithoutApplyingAllChanges.hdl=Do you want to continue splitting the commit without applying all changes?
dlgSgRebaseHeadToCommitConfirmBc.fur%1=This will apply all commits from the working tree branch '$1' \(HEAD\) onto the selected commit.
dlgSgRebaseHeadToCommitConfirmBr.fur%2=This will apply all commits from the working tree branch '$1' \(HEAD\) to '$2'.
dlgSgRebaseHeadToCommitConfirm(Br|Bc|Hr|Hc).btn"Rebase HEAD to"=Rebase HEAD to
dlgSgRebaseHeadToCommitConfirm(Br|Bc|Hr|Hc).btn"Rebase Interactively"=Rebase Interactively
dlgSgRebaseHeadToCommitConfirm(Br|Bc|Hr|Hc).tle=Rebase HEAD to Selected Commit
dlgSgRebaseInteractive.btn"Squash"=Squash
dlgSgRebaseInteractive.hdl=Rewrite History
dlgSgRebaseInteractive.inf=Reorder or squash commits according to your needs.
dlgSgRebaseInteractive.mni"Neighboring Commits"=Neighboring Commits
dlgSgRebaseInteractive.mni"To Bottom Commit"=To Bottom Commit
dlgSgRebaseInteractive.mni"To Top Commit"=To Top Commit
dlgSgRebaseInteractive.tle=Rebase Interactive
dlgSgRebaseInteractiveRemoveCommit.fur=It might become hard or impossible to recover the commit again.
dlgSgRebaseInteractiveRemoveCommit.hdl%1=Do you want to remove the selected commit $1?
dlgSgRebaseInteractiveRemoveCommit.tle=Remove Commit
dlgSgRebaseTagCommit.btn"Skip Tag"=Skip Tag
dlgSgRebaseTagCommit.fur=After the rebase, the remaining commit won't be reachable anymore.
dlgSgRebaseTagCommit.hdl%1=Should commit $1 be tagged?
dlgSgRebasingAbortConfirm.fur=Your working tree is in 'rebasing' state. You may abort rebasing; if you just want to skip the current patch, use Branch \| Rebase \| Rebase HEAD To instead.\n\nAborting will clean any local modification \(by invoking 'git reset --hard'\)!
dlgSgRebasingAbortConfirm.hdl=Do you want to abort the rebasing?
dlgSgRecursiveStage.inf=Select the files to stage to the Index.
dlgSgRecursiveUnstage.hdl=Revert staged changes from the Index to the working tree
dlgSgRecursiveUnstage.inf=Select the files to unstage from the Index.
dlgSgRemoteDeleteConfirm.fur=This will just delete the link to the remote repository.
dlgSgRemoteFetchMore.tle=Fetch More
dlgSgRemoteFetchMoreNoMoreBranches.hdl=There are no more remote branches to fetch.
dlgSgRemoteFetchMoreNoMoreBranches.tle=Fetch More
dlgSgRemoteProperties.edt"URL or Path"=URL or Path
dlgSgRemoteProperties.tle=Remote Properties
dlgSgRemoteSelect.hdl=Initialize remote review database
dlgSgRemoteSelect.inf=Select the remote repository for which you want to initialize the review database.
dlgSgRemoteSelect.tle=Initialize Remote
dlgSgRemotesAdd.chk"Verify repository connection"=Verify repository connection
dlgSgRemotesAdd.edt"URL or Path"=URL or Path
dlgSgRemotesAdd.inf=Enter the URL and a short name for the remote repository.
dlgSgRepositoriesSearch.edt"Search In"=Search In
dlgSgRepositoryClose.btn"Force Close"=Force Close
dlgSgRepositoryOpen.tle=Repository Opening
dlgSgRepositoryRemoveMultiGroup.fur=Repositories inside a removed group will be moved out of the group.
dlgSgRepositoryRemoveMultiRepo.fur=This will keep the repositories on disk, but just let SmartGit forget about them.
dlgSgRepositoryRemoveSingleGroup.fur=Repositories inside a removed group will be moved out of the group.
dlgSgRepositoryRemoveSingleRepo.fur=This will keep the repositories on disk, but just let SmartGit forget about them.
dlgSgRepositoryRemoveSingleRepo.hdl%1=Do you want to remove the repository "$1"?
dlgSgRepositoryRemoveSingleRepoMultiGroup.hdl%2=Do you want to remove the repository "$1" and $2 groups?
dlgSgRepositoryRemoveSingleRepoSingleGroup.hdl%2=Do you want to remove the repository "$1" and the group "$2"?
dlgSgRepositorySettings.edt"GPG Program"=GPG Program
dlgSgRepositorySettings.wrn"The name should not contain an email address."=\
 The name should not contain an email address.
dlgSgResetAdv.chk"Thoroughly fix line-endings according to .gitattributes"=\
 Thoroughly fix line-endings according to .gitattributes
dlgSgResolve.btn"Resolve"=Resolve
dlgSgResolve.edt"Content"=Content
dlgSgResolve.hdl=Resolve Conflict
dlgSgResolve.inf=Select which content to use for the resolved file\(s\).
dlgSgResolve.rbt"Leave as is"=Leave as is
dlgSgResolve.rbt"Open Conflict Solver"=Open Conflict Solver
dlgSgResolve.rbt"Set to $1 \(\"ours\", $2\)"=Set to $1 \("ours", $2\)
dlgSgResolve.rbt"Set to $1 \(\"theirs\", $2\)"=Set to $1 \("theirs", $2\)
dlgSgResolve.rbt"Set to rebase target \(\"theirs\", $1\)"=\
 Set to rebase target \("theirs", $1\)
dlgSgResolve.rbt"Set to rebased branch '$1' \(\"ours\", $2\)"=\
 Set to rebased branch '$1' \("ours", $2\)
dlgSgResolve.tle=Resolve
dlgSgResolveManuallyModifiedSingle.btn"Overwrite"=Overwrite
dlgSgResolveManuallyModifiedSingle.fur%1=$1 seems to contain manual conflict resolutions. They will be lost when continuing.
dlgSgResolveManuallyModifiedSingle.hdl=Do you want to overwrite your manual conflict resolution?
dlgSgResolveManuallyModifiedSingle.tle=Resolve
dlgSgResolveSubmodule.btn"Resolve"=Resolve
dlgSgResolveSubmodule.hdl=Resolve Conflict
dlgSgResolveSubmodule.inf=Select to which submodule commit you want to resolve.
dlgSgResolveSubmodule.rbt"Check out and set submodule pointer to 'theirs' version"=\
 Check out and set submodule pointer to 'theirs' version
dlgSgResolveSubmodule.rbt"Leave submodule pointer as is"=Leave submodule pointer as is
dlgSgResolveSubmodule.tle=Resolve
dlgSgRevertAndCommitConfirmSingle.btn"Revert && Commit"=Revert && Commit
dlgSgRevertAndCommitConfirmSingle.btn"Revert"=Revert
dlgSgRevertAndCommitConfirmSingle.fur=This will undo the changes introduced with the selected commit.
dlgSgRevertAndCommitConfirmSingle.hdl=Do you want to revert the selected commit?
dlgSgRevertAndCommitConfirmSingle.tle=Revert
dlgSgRevertInProgress.fur=You have to finish the Revert before you can continue. To finish the Revert use Commit, to abort use Discard.
dlgSgRevertInProgress.hdl=There is currently a Revert in progress.
dlgSgRevertInProgress.tle=Revert
dlgSgRevertNotAllConflictsResolved.fur=You may need to resolve the conflicts before proceeding.
dlgSgRevertNotAllConflictsResolved.hdl=Reverting failed because of conflicts.
dlgSgRevertNotAllConflictsResolved.tle=Revert
dlgSgReviewCommentEdit.hdl=Edit comment
dlgSgReviewCommentEdit.tle=Edit Comment
dlgSgReviewCommentReply.hdl=Reply to selected comment
dlgSgReviewCommentReply.tle=Reply To Comment
dlgSgReviewComment(Add|Edit|Reply).inf=Enter the text of the comment.
dlgSgReviewConfigureDisposeDatabase.btn"Dispose"=Dispose
dlgSgReviewConfigureDisposeDatabase.fur=This will disable the Reviewing system and unpushed local data will be lost.
dlgSgReviewConfigureDisposeDatabase.tle=Dispose Database
dlgSgReviewConfigureWhat.btn"Dispose Database"=Dispose Database
dlgSgReviewConfigureWhat.btn"Initialize a Remote"=Initialize a Remote
dlgSgReviewPullRequestClose.inf=Enter the comment which will be logged when closing the pull request.
dlgSgReviewPullRequestCreate.edt"Assignees"=Assignees
dlgSgReviewPullRequestCreate.lbl"The message will be displayed for the pull request node and will be the default commit message when integrating the pull request."=\
 The message will be displayed for the pull request node and will be the default commit message when integrating the pull request.
dlgSgReviewPullRequestState.edt"Assignees"=Assignees
dlgSgReviewPullRequestState.hdl=Assign Pull Request
dlgSgReviewPullRequestState.inf=Enter the user\(s\) to which the Pull Request should be assigned to.
dlgSgReviewUserAddEdit.err"Email address is not valid."=Email address is not valid.
dlgSgReviewUserAddEdit.err"Enter at least one alias."=Enter at least one alias.
dlgSgSelectBranch.hdl=Select tracked branch
dlgSgSetup.chk"Send 'crash footprints' after an internal error has occurred"=\
 Send 'crash footprints' after an internal error has occurred
dlgSgSetup.edt"Hg Executable"=Hg Executable
dlgSgSetup.edt"Repository search"=Repository search
dlgSgSetup.lbl"You may try SmartGit free of charge for 30 days."=\
 You may try SmartGit free of charge for 30 days.
dlgSgSetup.rbt"Commits \(Log History\)"=Commits \(Log History\)
dlgSgSetup.rbt"Free SmartGit evaluation for commercial use"=\
 Free SmartGit evaluation for commercial use
dlgSgSetup.rbt"Non-commercial use only \(most features, no support\)"=\
 Non-commercial use only \(most features, no support\)
dlgSgSetup.rbt"Registered user, commercial use \(all features, support\)"=\
 Registered user, commercial use \(all features, support\)
dlgSgSetup.rbt"Undecided"=Undecided
dlgSgSetup.tle=Setup SmartGit
dlgSgShowLocalChanges.hdl=File preview.html.erb modified in Index and working tree
dlgSgShowLocalChanges.inf=Select the file states to compare.
dlgSgShowLocalChanges.rbt"HEAD vs. Index"=HEAD vs. Index
dlgSgShowLocalChanges.rbt"HEAD vs. Working Tree"=HEAD vs. Working Tree
dlgSgShowLocalChanges.rbt"Index vs. Working Tree"=Index vs. Working Tree
dlgSgSplitOffFiles.btn"Split Off"=Split Off
dlgSgSplitOffFiles.hdl=Move files to a second commit
dlgSgSplitOffFiles.inf=Provide the message for the second commit that should contain the changes from the selected files.
dlgSgSplitOffFiles.tle=Split Off Files
dlgSgSshCredentials.hdl=SSH Credentials
dlgSgStageNoFilesFound.fur=Could not find files with modified working tree, untracked or missing files.
dlgSgStageNoFilesFound.hdl=No files found that could be staged.
dlgSgStashApply.inf=Decide how to apply the stash to the Index or working tree.
dlgSgStashApplyWithoutRestoringIndex.btn"Try Without Restoring Index"=Try Without Restoring Index
dlgSgStashApplyWithoutRestoringIndex.fur=Restoring the index failed while applying the patch.
dlgSgStashApplyWithoutRestoringIndex.hdl=Should the stash been applied without restoring the index?
dlgSgStashOnDemandLocalChangesCantBeReapplied.fur=Once you have concluded the Pull, you should manually apply the latest stash to get your local changes back into the working tree.
dlgSgStashOnDemandLocalChangesCantBeReapplied.hdl=Your local changes have been stashed away, but could not be reapplied.
dlgSgSubmoduleAdd.chk"Map SVN trunk, tags and branches to Git"=\
 Map SVN trunk, tags and branches to Git
dlgSgSubmoduleAdd.edt"Local Directory"=Local Directory
dlgSgSubmoduleAdd.edt"Local Path"=Local Path
dlgSgSubmoduleAdd.edt"URL"=URL
dlgSgSubmoduleDeinitConfirm.btn"Deinit"=Deinit
dlgSgSubmoduleDeinitConfirm.fur=The submodule will be skipped from the working tree. To get rid from the \(remote\) repository, you have to use Unregister instead.
dlgSgSubmoduleDeinitConfirm.tle=Deinit Submodule
dlgSgSubmoduleResetConfirm.fur=The corresponding commit will be checked out, so the submodule content will match the content of the registered commit.
dlgSgSubmoduleResetConfirm.hdl%1=Do you want to reset submodule '$1' to the commit registered in the repository?
dlgSgSubmoduleResetConfirm.tle=Reset Submodule
dlgSgSvnSslFingerprintChanged.btn"Accept"=Accept
dlgSgSvnSslFingerprintChanged.btn"Reject"=Reject
dlgSgSvnSslFingerprintChanged.edt"MD5 fingerprint"=MD5 fingerprint
dlgSgSvnSslFingerprintChanged.lbl"This might indicate a security problem! When in doubt, contact your server administrator."=\
 This might indicate a security problem! When in doubt, contact your server administrator.
dlgSgTagAdd.err"The name must not end with a slash or dot."=\
 The name must not end with a slash or dot.
dlgSgTagAdd.inf=Enter the name of the tag to create. If entering a message, an annotated tag is created.
dlgSgTagAddOverwrite.hdl%1=The tag '$1' already exists. Do you want to overwrite it?
dlgSgTagDeleteConfirmSingle.fur=You will not be able to restore it.
dlgSgToolAdd.mni"2nd Commit ID or Ref"=2nd Commit ID or Ref
dlgSgTool(Add|Edit).edt"Accelerator"=Accelerator
dlgSgTool(Add|Edit).rbt"Refs"=Refs
dlgSgTool(Add|Edit).rbt"SHAs"=SHAs
dlgSgUndoLastCommitConfirm.fur"Message: $1"=Message: $1
dlgSgUndoLastCommitConfirm.fur"Undoing an already pushed commit might cause serious problems!\n\nMessage: $1"=\
 Undoing an already pushed commit might cause serious problems!\n\nMessage: $1
dlgSgUndoLastCommitConfirm.hdl=Do you want to undo the last local commit?
dlgSgUnstageNoFilesFound.fur=Could not find files with staged changes.
dlgSgUnstageNoFilesFound.hdl=No files found that could be unstaged.
dlgSgWorktreePruneNoWorktree.fur=All your worktrees are still available.
dlgSgWorktreePruneNoWorktree.hdl=No worktree to prune.
dlgShPushTrackingLocalSvnBranches.btn"Push as New"=Push as New
dlgShPushTrackingLocalSvnBranches.btn"Push onto Existing"=Push onto Existing
dlgShPushTrackingLocalSvnBranches.fur=You are going to push local branches back to the SVN repository. These branches may either be pushed as new branches or onto their existing SVN counterparts \(recommended in most cases\).
edt"Search For"=Search For
wndAnnotate.mniCommit-first=Go to First Commit
wndAnnotate.mniCommit-last=Go to Last Commit
wndAnnotate.mniCommit-preceding-line=Go to Preceding Commit
wndAnnotate.mniSet-syntax=Syntax Language
wndAnnotate.mniUndo-goto=Undo Go To
wndAnnotate.mniWindowLineHistory=Line History
wndAnnotate.rbt"Commit Index"=Commit Index
wndConflictSolver.mniView-layout-left-merge=Left and Merge
wndConflictSolver.mniView-layout-left-right-above-merge=Left and Right Above Merge
wndConflictSolver.mniView-layout-right-merge=Merge and Right
wndConflictSolver.tbr"Base Changes"=Base Changes
wndConflictSolver.tbr"Left + Merge"=Left + Merge
wndConflictSolver.tbr"Merge + Right"=Merge + Right
wndConflictSolver.tbr"Merge Below"=Merge Below
wndConflictSolver.tbr"Take Left, Right"=Take Left, Right
wndConflictSolver.tbr"Take Right, Left"=Take Right, Left
wndConflictSolver.tbtFile-open-base=Open the left and right changes from the common base file.
wndConflictSolver.tbtGoto-next-diff=Go to next change.
wndConflictSolver.tbtView-layout-left-right-above-merge=Show the left and right files above the merge file.
wndDeepgit.btn"Go Deeper"=Go Deeper
wndDeepgit.mni"Open File Log"=Open File Log
wndDeepgit.mni"Open Repository Log"=Open Repository Log
wndDeepgit.mniBack=Go Back
wndDeepgit.mniExtendLineToBlock=Extend Lines To Blocks
wndDeepgit.mniFilterReset=Reset Filter
wndDeepgit.mniFilterSetSelection=Set Selection as Filter
wndDeepgit.mniFollowRenames=Follow Renames
wndDeepgit.mniForward=Go Forward
wndDeepgit.mniIgnoreWhitespaceOnlyChanges=Ignore Whitespace Changes
wndDeepgit.mniOptimizeCreationOrigins=Optimize 'Appeared Here' Origins
wndDeepgit.mniPerspectiveBlameOrigin=Blame+Origins Perspective
wndDeepgit.mniPerspectiveBlameSimple=Blame Perspective
wndDeepgit.mniPerspectiveCommit=Log Perspective
wndDeepgit.mniPerspectiveHistory=Diff Perspective
wndDeepgit.mniPerspectiveOrigins=Origins Perspective
wndDeepgit.mniResetInlineHelp=Reshow All Inline Help
wndDeepgit.mniShowLinePrefixes=Show Line Prefixes
wndDeepgit.mniShowOnRefs=Show On Refs in Navigation
wndDeepgit.mniToggleLineHistory=Line History
wndDeepgit.mniWindowHorizontalLayout=Horizontal Blame + Origins Layout
wndDeepgit.mniWindowVerticalLayout=Vertical Blame + Origins Layout
wndDeepgit.tbr"Blame+Origins"=Blame+Origins
wndDeepgit.tbr"Diff"=Diff
wndDeepgit.tbr"Origins"=Origins
wndDeepgit.tbtPerspectiveBlameOrigin=Find where the line originates from in cases where you need to choose from one of possible Origins.
wndDeepgit.tbtPerspectiveBlameSimple=Find where the line originates from in simple cases when there are no alternative Origins.
wndDeepgit.tbtPerspectiveCommit=Investigate Log.
wndDeepgit.tbtPerspectiveOrigins=Find out what else happened where the line originates from.\n\nIn order to inspect available Origins, they have to be evaluated first. First, select the file you want to investigate using File\|Open and select a line in it. Then wait until the calculation of possible Origins has finished.
wndEditor.mni"CR \(classic macOS\)"=CR \(classic macOS\)
wndEditor.mni"CR+LF \(Windows\)"=CR+LF \(Windows\)
wndEditor.mni"LF \(Unix, macOS\)"=LF \(Unix, macOS\)
wndGit.indexEditor.mniView-layout-head-wt-above-index=HEAD and Working Tree Above Index
wndGit.indexEditor.mniView-layout-left-right-above-merge=HEAD and Working Tree Above Index
wndGit.indexEditor.tbtEdit-take-left=Take the left block to the merge result. Depending on the left block, this will insert, replace or delete at the merge result.
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std).mnu"< No Windows >"=< No Windows >
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-take-left-right=Take Left, then Right Block
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-take-right-left=Take Right, then Left Block
wnd(Compare|ConflictSolver|Git.indexEditor).mniFile-open-base=Open Base File Changes
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSet-syntax=Syntax Language
wnd(Log|Project|Std)."Conflict Solver"=Conflict Solver
wnd(Log|Project|Std)."Mark HEAD as Bad"=Mark HEAD as Bad
wnd(Log|Project|Std)."Mark HEAD as Good"=Mark HEAD as Good
wnd(Log|Project|Std)."Mark Resolved"=Mark Resolved
wnd(Log|Project|Std)."Recreate Conflict"=Recreate Conflict
wnd(Log|Project|Std)."Rerun Thoroughly"=Rerun Thoroughly
wnd(Log|Project|Std)."Reveal"=Reveal
wnd(Log|Project|Std)."Take Ours"=Take Ours
wnd(Log|Project|Std)."Take Theirs"=Take Theirs
wnd(Log|Project|Std).btn"Mark HEAD as Bad"=Mark HEAD as Bad
wnd(Log|Project|Std).btn"Mark HEAD as Good"=Mark HEAD as Good
wnd(Log|Project|Std).btn"Mark Resolved"=Mark Resolved
wnd(Log|Project|Std).btn"Recreate Conflict"=Recreate Conflict
wnd(Log|Project|Std).btn"Rerun Thoroughly"=Rerun Thoroughly
wnd(Log|Project|Std).btn"Reveal"=Reveal
wnd(Log|Project|Std).btn"Take Ours"=Take Ours
wnd(Log|Project|Std).btn"Take Theirs"=Take Theirs
wnd(Log|Project|Std).chk"Create simple commit \('squash'\)"=Create simple commit \('squash'\)
wnd(Log|Project|Std).col"Assignee"=Assignee
wnd(Log|Project|Std).col"Author"=Author
wnd(Log|Project|Std).col"Copied From"=Copied From
wnd(Log|Project|Std).col"Copied from"=Copied from
wnd(Log|Project|Std).col"Date"=Date
wnd(Log|Project|Std).col"Entry"=Entry
wnd(Log|Project|Std).col"Ext."=Ext.
wnd(Log|Project|Std).col"Index State"=Index State
wnd(Log|Project|Std).col"Last Changed On"=Last Changed On
wnd(Log|Project|Std).col"Renamed Path"=Renamed Path
wnd(Log|Project|Std).col"Working Tree State"=Working Tree State
wnd(Log|Project|Std).edt"Commit to"=Commit to
wnd(Log|Project|Std).hnt"Filter or Tag Search"=Filter or Tag Search
wnd(Log|Project|Std).lbl"$1 files hidden"=$1 files hidden
wnd(Log|Project|Std).mni"  Show Rewritten Behind Commits"=\
 Show Rewritten Behind Commits
wnd(Log|Project|Std).mni"<no entry>"=<no entry>
wnd(Log|Project|Std).mni"<none>"=<none>
wnd(Log|Project|Std).mni"Abbreviated"=Abbreviated
wnd(Log|Project|Std).mni"Author Abbreviated"=Author Abbreviated
wnd(Log|Project|Std).mni"Author Avatar"=Author Avatar
wnd(Log|Project|Std).mni"Author with Full Name and Email"=\
 Author with Full Name and Email
wnd(Log|Project|Std).mni"Author with Full Name"=Author with Full Name
wnd(Log|Project|Std).mni"Author"=Author
wnd(Log|Project|Std).mni"Branching:"=Branching:
wnd(Log|Project|Std).mni"Cherry-Pick Commits to $1"=Cherry-Pick Commits to $1
wnd(Log|Project|Std).mni"Compact Author"=Compact Author
wnd(Log|Project|Std).mni"Discard Hunk"=Discard Hunk
wnd(Log|Project|Std).mni"Discard Inner-line Change"=Discard Inner-line Change
wnd(Log|Project|Std).mni"Discard Line"=Discard Line
wnd(Log|Project|Std).mni"Discard Selection"=Discard Selection
wnd(Log|Project|Std).mni"Drop Local Data"=Drop Local Data
wnd(Log|Project|Std).mni"Edit 'Comment $1'"=Edit 'Comment $1'
wnd(Log|Project|Std).mni"Edit in Index Editor"=Edit in Index Editor
wnd(Log|Project|Std).mni"Fetch Merge Request"=Fetch Merge Request
wnd(Log|Project|Std).mni"Fetch Pull Request"=Fetch Pull Request
wnd(Log|Project|Std).mni"File Content \(very expensive\)"=File Content \(very expensive\)
wnd(Log|Project|Std).mni"File \(expensive\)"=File \(expensive\)
wnd(Log|Project|Std).mni"Files from Subdirectories"=Files from Subdirectories
wnd(Log|Project|Std).mni"Follow All Parents"=Follow All Parents
wnd(Log|Project|Std).mni"Follow Only First Parent"=Follow Only First Parent
wnd(Log|Project|Std).mni"Forget Pattern"=Forget Pattern
wnd(Log|Project|Std).mni"Forget"=Forget
wnd(Log|Project|Std).mni"Format Patch"=Format Patch
wnd(Log|Project|Std).mni"Full Author With Email"=Full Author With Email
wnd(Log|Project|Std).mni"Full Author"=Full Author
wnd(Log|Project|Std).mni"Full Name With Email"=Full Name With Email
wnd(Log|Project|Std).mni"Full Name"=Full Name
wnd(Log|Project|Std).mni"Git Config"=Git Config
wnd(Log|Project|Std).mni"Git-LFS Version"=Git-LFS Version
wnd(Log|Project|Std).mni"Include Merge Only if File was Changed"=\
 Include Merge Only if File was Changed
wnd(Log|Project|Std).mni"Integrate"=Integrate
wnd(Log|Project|Std).mni"Jump To"=Jump To
wnd(Log|Project|Std).mni"Mark as Bad"=Mark as Bad
wnd(Log|Project|Std).mni"Mark as Good"=Mark as Good
wnd(Log|Project|Std).mni"Merge Directly To"=Merge Directly To
wnd(Log|Project|Std).mni"Merge Merge Request"=Merge Merge Request
wnd(Log|Project|Std).mni"Merge Pull Request"=Merge Pull Request
wnd(Log|Project|Std).mni"Move Commit"=Move Commit
wnd(Log|Project|Std).mni"Move and Squash Commit"=Move and Squash Commit
wnd(Log|Project|Std).mni"Neither"=Neither
wnd(Log|Project|Std).mni"New Group"=New Group
wnd(Log|Project|Std).mni"No Group"=No Group
wnd(Log|Project|Std).mni"Only If Changed"=Only If Changed
wnd(Log|Project|Std).mni"Only Selected"=Only Selected
wnd(Log|Project|Std).mni"Open in Browser"=Open in Browser
wnd(Log|Project|Std).mni"Open in Web Browser"=Open in Web Browser
wnd(Log|Project|Std).mni"Other Branch"=Other Branch
wnd(Log|Project|Std).mni"Print Git Version"=Print Git Version
wnd(Log|Project|Std).mni"Quick Stash All"=Quick Stash All
wnd(Log|Project|Std).mni"Quick Stash Selection"=Quick Stash Selection
wnd(Log|Project|Std).mni"Rebase $1 commit from $2 to $3"=\
 Rebase $1 commit from $2 to $3
wnd(Log|Project|Std).mni"Rebase $1 commits from $2 to $3"=\
 Rebase $1 commits from $2 to $3
wnd(Log|Project|Std).mni"Reject Pull Request"=Reject Pull Request
wnd(Log|Project|Std).mni"Remember Pattern"=Remember Pattern
wnd(Log|Project|Std).mni"Reorder Commits"=Reorder Commits
wnd(Log|Project|Std).mni"Reply '$1'"=Reply '$1'
wnd(Log|Project|Std).mni"Reset HEAD to $1"=Reset HEAD to $1
wnd(Log|Project|Std).mni"Resolve"=Resolve
wnd(Log|Project|Std).mni"Revert $1"=Revert $1
wnd(Log|Project|Std).mni"Rewrap"=Rewrap
wnd(Log|Project|Std).mni"Select from JIRA"=Select from JIRA
wnd(Log|Project|Std).mni"Set '$1' to $2"=Set '$1' to $2
wnd(Log|Project|Std).mni"Show All Refs"=Show All Refs
wnd(Log|Project|Std).mni"Show Auxiliary Branch"=Show Auxiliary Branch
wnd(Log|Project|Std).mni"Show Branch Labels"=Show Branch Labels
wnd(Log|Project|Std).mni"Show Incoming Commits"=Show Incoming Commits
wnd(Log|Project|Std).mni"Show More Commits \(Temporarily\)"=Show More Commits \(Temporarily\)
wnd(Log|Project|Std).mni"Show Only Selected Branches and Tags"=\
 Show Only Selected Branches and Tags
wnd(Log|Project|Std).mni"Show Only Selected Refs"=Show Only Selected Refs
wnd(Log|Project|Std).mni"Show Unchanged Directories"=Show Unchanged Directories
wnd(Log|Project|Std).mni"Show Working Tree On Demand"=Show Working Tree On Demand
wnd(Log|Project|Std).mni"Show Working Tree Permanently"=Show Working Tree Permanently
wnd(Log|Project|Std).mni"Sort Merge Parents First"=Sort Merge Parents First
wnd(Log|Project|Std).mni"Sort Primary Parents First"=Sort Primary Parents First
wnd(Log|Project|Std).mni"Toggle Hosting Provider Integration"=Toggle Hosting Provider Integration
wnd(Log|Project|Std).mni"Varying Coloring"=Varying Coloring
wnd(Log|Project|Std).mniAssume-unchanged-toggle=Toggle 'Assume Unchanged'
wnd(Log|Project|Std).mniBisectBad=Mark HEAD as Bad
wnd(Log|Project|Std).mniBisectGood=Mark HEAD as Good
wnd(Log|Project|Std).mniBranchResetTracking=Stop Tracking
wnd(Log|Project|Std).mniBranchSplit=Modify or Split Commit
wnd(Log|Project|Std).mniBranchSplitFiles=Split Off Files
wnd(Log|Project|Std).mniBranchesGitFlowRemoteOnly=Show remote branches in their Git-Flow sections
wnd(Log|Project|Std).mniBranchesGitFlowTracked=Show remote, tracked branches
wnd(Log|Project|Std).mniBranchesSectionizeAfterLastSlash=After last slash
wnd(Log|Project|Std).mniClean=Clean Working Tree
wnd(Log|Project|Std).mniCompact-display=Compact Change Display
wnd(Log|Project|Std).mniCompareWithWorkingTree=Compare with Working Tree
wnd(Log|Project|Std).mniDebugCreateHeapDump=Create Heap Dump
wnd(Log|Project|Std).mniDebugCreateThreadDumps=Create Periodical Thread Dumps
wnd(Log|Project|Std).mniDebugEnableRefreshTraceLogging=Starting Tracing Refreshing
wnd(Log|Project|Std).mniDebugLogFileMonitorEvents=Log File Monitor Events
wnd(Log|Project|Std).mniDebugLogFileMonitorState=Log File Monitor State
wnd(Log|Project|Std).mniDebugLogOpenRepositories=Log Open Repositories
wnd(Log|Project|Std).mniDebugRunGc=Run GC
wnd(Log|Project|Std).mniFastForward=Fast-Forward Merge
wnd(Log|Project|Std).mniFixup=Fixup
wnd(Log|Project|Std).mniFlowContext=Git-Flow
wnd(Log|Project|Std).mniFlowFeatureFinish=Finish Feature
wnd(Log|Project|Std).mniFlowFeatureStart=Start Feature
wnd(Log|Project|Std).mniFlowHotfixFinish=Finish Hotfix
wnd(Log|Project|Std).mniFlowHotfixStart=Start Hotfix
wnd(Log|Project|Std).mniFlowIntegrateDevelop=Integrate Develop
wnd(Log|Project|Std).mniFlowReleaseFinish=Finish Release
wnd(Log|Project|Std).mniFlowReleaseStart=Start Release
wnd(Log|Project|Std).mniForgetCommit=Forget Commit
wnd(Log|Project|Std).mniIgnore-line-separators=Ignore Line-Ending Changes
wnd(Log|Project|Std).mniIncludeTrackedRemoteBranches=Include Tracked Remote Branches
wnd(Log|Project|Std).mniIndexEditor=Index Editor
wnd(Log|Project|Std).mniLfsLock=Lock
wnd(Log|Project|Std).mniLfsPrune=Prune
wnd(Log|Project|Std).mniLogCommitsColoringLegacy=Varying Coloring
wnd(Log|Project|Std).mniLogShowAllParents=Follow All Parents
wnd(Log|Project|Std).mniLogShowOnlyFirstParents=Show Only First Parents
wnd(Log|Project|Std).mniLogTopoFiltering=Show Graph While Filtering
wnd(Log|Project|Std).mniLogWorkingTreeIndexOnDemand=Show Working Tree  Index On Demand
wnd(Log|Project|Std).mniLogWorkingTreeIndexPermanent=Show Working Tree  Index Permanently
wnd(Log|Project|Std).mniOpenRootLog=Open Root Log
wnd(Log|Project|Std).mniOpenWorkingTree=Open Working Tree
wnd(Log|Project|Std).mniPreviewCompareHeadVsIndex=HEAD vs. Index
wnd(Log|Project|Std).mniPreviewCompareIndexVsWT=Index vs. Working Tree
wnd(Log|Project|Std).mniPushCommits=Push Up To
wnd(Log|Project|Std).mniPushToGerrit=Push to Gerrit
wnd(Log|Project|Std).mniRebaseHeadTo=Rebase HEAD To
wnd(Log|Project|Std).mniRebaseInteractive=Rebase Interactive From
wnd(Log|Project|Std).mniRebaseToHead=Rebase to HEAD
wnd(Log|Project|Std).mniRebaseToHead"Rebase to HEAD \($1\)"=Rebase to HEAD \($1\)
wnd(Log|Project|Std).mniRebaseToHead"Rebase to HEAD"=Rebase to HEAD
wnd(Log|Project|Std).mniRemoteFetchMore=Fetch More
wnd(Log|Project|Std).mniResetAdvanced=Reset Advanced
wnd(Log|Project|Std).mniResolve=Resolve
wnd(Log|Project|Std).mniResolveOurs=Take Ours
wnd(Log|Project|Std).mniResolveRecreateConflict=Recreate Conflict
wnd(Log|Project|Std).mniResolveTheirs=Take Theirs
wnd(Log|Project|Std).mniRevealWorkingTree=Reveal Working Tree
wnd(Log|Project|Std).mniRevert=Revert
wnd(Log|Project|Std).mniReviewDumpDatabase=Dump Database
wnd(Log|Project|Std).mniRewriteTextFile=Fix Line-Endings
wnd(Log|Project|Std).mniSelectCommittableFiles=Select Committable Files
wnd(Log|Project|Std).mniSelectDirectory=Select Directory
wnd(Log|Project|Std).mniSelectRoot=Select Repository Root
wnd(Log|Project|Std).mniSet-syntax=Syntax Language
wnd(Log|Project|Std).mniSkipWorkTree=Toggle 'Skip Worktree'
wnd(Log|Project|Std).mniSortCommitsPrimaryParentsFirst=Sort Commits with Primary Parents first
wnd(Log|Project|Std).mniSplitCommit=Split
wnd(Log|Project|Std).mniSquashCommits=Squash Commits
wnd(Log|Project|Std).mniSubmoduleDeactivate=Deactivate
wnd(Log|Project|Std).mniSubmoduleDeinit=Deinit
wnd(Log|Project|Std).mniSubtreeSplit=Split
wnd(Log|Project|Std).mniViewRecursive=Files from Subdirectories
wnd(Log|Project|Std).mniViewRenameSource=Show Rename Source Files
wnd(Log|Project|Std).mniViewSeparateWtAndIndex=Separate Working Tree and Index
wnd(Log|Project|Std).mniViewSetAnchorCommit=Set Anchor Commit
wnd(Log|Project|Std).mniViewSkipped=Show Skipped Files
wnd(Log|Project|Std).mniViewStaged=Show Staged Files
wnd(Log|Project|Std).mniViewStyleIndex=Only Index
wnd(Log|Project|Std).mniViewStyleMixed=Mixed
wnd(Log|Project|Std).mniViewStyleWorkingTree=Only Working Tree
wnd(Log|Project|Std).mniViewUnchangedAssumed=Show Assume-Unchanged Files
wnd(Log|Project|Std).mniViewUnversioned=Show Unversioned Files
wnd(Log|Project|Std).mniWindowDebugLog=Debug Log
wnd(Log|Project|Std).mniWindowJournal=Journal
wnd(Log|Project|Std).mniWindowLayoutSetMain=Main Perspective
wnd(Log|Project|Std).mniWindowLayoutSetReview=Review Perspective
wnd(Log|Project|Std).mnu"Bisect"=Bisect
wnd(Log|Project|Std).mnu"Git-Flow"=Git-Flow
wnd(Log|Project|Std).mnu"Resolve"=Resolve
wnd(Log|Project|Std).tab"Debug Log"=Debug Log
wnd(Log|Project|Std).tab"Files \(Working Tree\)"=Files \(Working Tree\)
wnd(Log|Project|Std).tab"Graph \(Initializing Log-Cache...\)"=Graph \(Initializing Log-Cache...\)
wnd(Log|Project|Std).tab"Graph \(Initializing Subtree-Cache...\)"=Graph \(Initializing Subtree-Cache...\)
wnd(Log|Project|Std).tab"Graph \(Initializing...\)"=Graph \(Initializing...\)
wnd(Log|Project|Std).tab"Graph \(Loading...\)"=Graph \(Loading...\)
wnd(Log|Project|Std).tab"Graph \(Running log...\)"=Graph \(Running log...\)
wnd(Log|Project|Std).tab"Graph \(Scanning WT...\)"=Graph \(Scanning WT...\)
wnd(Log|Project|Std).tab"Journal"=Journal
wnd(Log|Project|Std).tbr"  History  "=History
wnd(Log|Project|Std).tbr"Compact"=Compact
wnd(Log|Project|Std).tbr"Git-Flow"=Git-Flow
wnd(Log|Project|Std).tbr"Index Editor"=Index Editor
wnd(Log|Project|Std).tbr"Integrate"=Integrate
wnd(Log|Project|Std).tbr"Local Files"=Local Files
wnd(Log|Project|Std).tbr"Log Selection"=Log Selection
wnd(Log|Project|Std).tbr"Reset Adv."=Reset Adv.
wnd(Log|Project|Std).tbr"Revert"=Revert
wnd(Log|Project|Std).tbt"Reading repository info from '$1'."=Reading repository info from '$1'.
wnd(Log|Project|Std).tbt"Refresh information from GitLab."=Refresh information from GitLab.
wnd(Log|Project|Std).tbt"Show directories tree"=Show directories tree
wnd(Log|Project|Std).tbtAnnotate=Show a blame \(annotated\) view of the selected file.
wnd(Log|Project|Std).tbtConflictSolver=Open the Conflict Solver \(or configured external merge tool\) to resolve conflicts.
wnd(Log|Project|Std).tbtFlowContext=Finish a Git-Flow feature.
wnd(Log|Project|Std).tbtFlowFeatureStart=Start a new Git-Flow feature.
wnd(Log|Project|Std).tbtFlowHotfixFinish=Finish a Git-Flow hotfix.
wnd(Log|Project|Std).tbtFlowHotfixStart=Start a new Git-Flow hotfix.
wnd(Log|Project|Std).tbtFlowIntegrateDevelop=Integrate new base commits into a Git-Flow feature.
wnd(Log|Project|Std).tbtInvestigate=Investigate history line-wise with DeepGit.
wnd(Log|Project|Std).tbtResetAdvanced=Reset current HEAD to another commit and keep the difference in Index or Working Tree.
wnd(Log|Project|Std).tbtRevealHomeCommit=Reveal HEAD/working tree in graph.
wnd(Log|Project|Std).tbtRevealPrevCommit=Reveal selected commits before invoking Reveal Working Tree.
wnd(Log|Project|Std).tbtRevealWorkingTree=Reveal working tree node in graph.
wnd(Log|Project|Std).tbtRevert=Undo the changes of an existing commit by "reverse" merging it.
wnd(Log|Project|Std).tbtStashDrop=Drop one or more stashes from the repository.
wnd(Log|Project|Std).tbtStdSetModeWt=Show the local files of the repository \(Working Tree\).
wnd(Log|Project|Std).tbtViewRenameSource=If selected, removed/missing source files of detected renames will be shown.
wnd(Log|Project|Std).tbtViewStaged=If selected, files with staged \(Index\) changes and without working tree changes will be shown.
